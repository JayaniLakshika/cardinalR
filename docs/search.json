[{"path":"https://jayanilakshika.github.io/cardinalR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Jayani P. G. Lakshika Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-1-2d-plane","dir":"Articles","previous_headings":"","what":"Dataset 1 (2D plane)","title":"Clustering datasets","text":"","code":"plane_2D <- function(sample_size = 100, with_seed = NULL, coefficient_x_1 = 1,     coefficient_x_2 = 1, coefficient_y_1 = -1, coefficient_y_2 = 1, intercept_x = -10,     intercept_y = 8, u_min = 10, u_max = 30, v_min = 10, v_max = 20, num_of_noise_dim = 2, min_noise = 0, max_noise = 1) {      # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      u <- runif(sample_size, min = u_min, max = u_max)     v <- runif(sample_size, min = v_min, max = v_max)     x <- coefficient_x_1 * u + coefficient_x_2 * v + intercept_x     y <- coefficient_y_1 * u + coefficient_y_2 * v + intercept_y      df <- tibble::tibble(x1 = x, x2 = y)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 3:(3 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset1 <- plane_2D(sample_size = 300, with_seed = 2023062801)  langevitour(dataset1)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-2-2d-curvilinear","dir":"Articles","previous_headings":"","what":"Dataset 2 (2D curvilinear)","title":"Clustering datasets","text":"","code":"curvilinear_2D <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 2, min_noise = -1, max_noise = 1){   # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      x <- runif(sample_size, 0, 2)   y <- -(x^3 + runif(sample_size, 0, 3)) + runif(sample_size, 0, 0.5)      df <- tibble::tibble(x1 = x, x2 = y)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 3:(3 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df    } dataset2 <- curvilinear_2D(sample_size = 300, with_seed = 2023062801)  langevitour(dataset2)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-3-5-gaussian-clusters","dir":"Articles","previous_headings":"","what":"Dataset 3 (5 Gaussian clusters)","title":"Clustering datasets","text":"","code":"dataset3 <- gaussian_clusters(sample_size = 250, with_seed = 2023062801, num_clusters = 5, cluster_sd = 0.05, num_dims = 4)  langevitour(dataset3)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-4-3d-cube","dir":"Articles","previous_headings":"","what":"Dataset 4 (3D Cube)","title":"Clustering datasets","text":"","code":"## Equidistant Solid Cube: A function to generate a solid cube with # equidistant points p dimension of object n length of number of # points in each dimension Return points:location of points edges: # edges of the object cube_3D_with_noise <- function(with_seed = NULL, num_of_effective_dims = 3, num_of_noise_dim = 2,     min_noise = -0.1, max_noise = 0.1) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      cube <- geozoo::cube.solid.grid(p = num_of_effective_dims, n = 11)     df <- tibble::as_tibble(cube$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", num_of_effective_dims), 1:num_of_effective_dims)      sample_size <- NROW(df)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 4:(4 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)      return(list(df = df, sample_size = NROW(cube$points)))  } dataset4 <- cube_3D_with_noise()$df  cube_3D_with_noise()$sample_size #> [1] 1728  langevitour(dataset4)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-5-non-linear","dir":"Articles","previous_headings":"","what":"Dataset 5 (Non-linear)","title":"Clustering datasets","text":"","code":"nonlinear_2D <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 2,     min_noise = -1, max_noise = 1) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      theta = runif(sample_size, 0.2, 0.6 * pi)     x = cos(theta) + rnorm(sample_size, 10, 0.03)     y = sin(theta) + rnorm(sample_size, 10, 0.03)      df <- tibble::tibble(x1 = x, x2 = y)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 3:(3 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset5 <- nonlinear_2D(sample_size = 250, num_of_noise_dim = 5, min_noise = -0.1, max_noise = 0.2)  langevitour(dataset5)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-6-different-shape-clusters","dir":"Articles","previous_headings":"","what":"Dataset 6 (Different shape clusters)","title":"Clustering datasets","text":"","code":"## To generate different types of clusters ## sample_size: Total number of points in the data set  ## cluster_sd: Standard deviation of a cluster   ## output: df: tibble  clusters_different_shapes <- function(sample_size = 300, with_seed = NULL, num_gussian_clusters = 4, num_non_gaussian_clusters = 2,     cluster_sd_gau = 0.05, cluster_sd_non_gau = 0.1, num_dims = 7, a = 2, b = 4) {         # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      num_clusters <- num_gussian_clusters + num_non_gaussian_clusters      # To check that the assigned sample_size is divided by three     if ((sample_size%%num_clusters) != 0) {         warning(\"The sample size should be a product of three.\")         cluster_size <- floor(sample_size/num_clusters)      } else {         cluster_size <- sample_size/num_clusters     }      ## Generate Gaussian clusters      # Create a vector of possible values (0 and 1)     values <- c(0, 1)      # Create an expanded grid with 0's and 1's     mean_val_grid <- tidyr::expand_grid(!!!setNames(rep(list(values), num_dims),         paste0(\"mean_dim\", 1:num_dims)))      # To select combinations for assigned number of clusters      mean_val_grid_gau <- mean_val_grid %>%         dplyr::slice_sample(n = num_gussian_clusters)          mean_val_grid_non_gau <- mean_val_grid %>%         dplyr::slice_sample(n = num_non_gaussian_clusters)      # To generate empty tibble     column_names <- paste0(rep(\"x\", num_dims), 1:num_dims)     df <- tibble(!!!setNames(rep(list(NULL), length(column_names)), column_names))      for (i in 1:num_gussian_clusters) {          # To filter the mean values for specific cluster         mean_val_for_cluster <- mean_val_grid_gau %>%             dplyr::filter(dplyr::row_number() == i) %>%             unlist(use.names = FALSE)          # Initialize an empty list to store the vectors with column         # values         dim_val_list <- list()          for (j in 1:num_dims) {              dim_val_list[[column_names[j]]] <- rnorm(cluster_size, mean = mean_val_for_cluster[j],                 sd = cluster_sd_gau)          }         # To generate a tibble for a cluster         df_gau_cluster <- tibble::as_tibble(dim_val_list)          df <- bind_rows(df, df_gau_cluster)      }          phi <- runif(cluster_size, max = 2*pi)     rho <- sqrt(runif(cluster_size))          for (i in 1:num_non_gaussian_clusters) {          # To filter the mean values for specific cluster         presence_of_elipse_cluster <- mean_val_grid_non_gau %>%             dplyr::filter(dplyr::row_number() == i) %>%             unlist(use.names = FALSE)          # Initialize an empty list to store the vectors with column         # values         dim_val_list_n <- list()          for (j in 1:num_dims) {           if(presence_of_elipse_cluster[j] == 1){             dim_val_list_n[[column_names[j]]] <- sqrt(a)*rho*cos(phi) + b             ## Surface of poolar coordinate           } else {             dim_val_list_n[[column_names[j]]] <- rnorm(cluster_size, mean = 0,                 sd = cluster_sd_non_gau)                        }                        }         # To generate a tibble for a cluster         df_non_gau_cluster <- tibble::as_tibble(dim_val_list_n)          df <- bind_rows(df, df_non_gau_cluster)      }      df  } dataset6 <- clusters_different_shapes()  langevitour(dataset6)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-7-sine-curve-with-noise","dir":"Articles","previous_headings":"","what":"Dataset 7 (Sine curve with noise)","title":"Clustering datasets","text":"","code":"sine_curve_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      theta = runif(sample_size, 0,1.80 * pi)     x = theta     y = sin(theta)      df <- tibble::tibble(x1 = x, x2 = y)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 3:(3 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset7 <- sine_curve_with_noise()  langevitour(dataset7)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-9-three-clusters-data-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 9 (three clusters data with extra noise dimensions)","title":"Clustering datasets","text":"","code":"three_clusters_data_with_noise <- function(sample_size = 100, with_seed = NULL, num_dims = 7, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size %% 3) != 0) {         warning(\"The sample size should be a product of three.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }     df <- snedata::three_clusters_data(n = cluster_size, dim = num_dims) ## n = number of points per Gaussian     df <- df %>%        select(-color)     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset9 <- three_clusters_data_with_noise(sample_size = 300, num_of_noise_dim = 3)  langevitour(dataset9)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-10-torus-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 10 (Torus with extra noise dimensions)","title":"Clustering datasets","text":"","code":"# Torus: A function to generate a torus in any dimension # p dimension of object # n number of points # radius radiuses of the torus, set from largest to smallest # Return # points:location of points # edges: edges of the object (null) torus_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      torus <- geozoo::torus(p = 3, n = sample_size)     df <- tibble::as_tibble(torus$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", 3), 1:3)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), 4:(4 + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset10 <- torus_with_noise(sample_size = 300, num_of_noise_dim = 4) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`  langevitour(dataset10)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-11-spiral-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 11 (Spiral with extra noise dimensions)","title":"Clustering datasets","text":"","code":"spiral_with_noise <- function(sample_size = 100, with_seed = NULL, num_dims = 10, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      result  <- mgc::mgc.sims.spiral(n = sample_size, d = num_dims)  # simulate 100 samples in 10 dimensions      df <- tibble::as_tibble(result$X, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset11 <- spiral_with_noise(sample_size = 300, num_of_noise_dim = 4) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6` #> • `` -> `...7` #> • `` -> `...8` #> • `` -> `...9` #> • `` -> `...10`  langevitour(dataset11)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-12-roman-surface-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 12 (Roman surface with extra noise dimensions)","title":"Clustering datasets","text":"","code":"roman_surface_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      klein <- geozoo::roman.surface(n = sample_size, a = 1)     df <- tibble::as_tibble(klein$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset12 <- roman_surface_with_noise(sample_size = 300, num_of_noise_dim = 3, min_noise = -0.05, max_noise = 0.05) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`  langevitour(dataset12)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-13-roman-surface-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 13 (Roman surface with extra noise dimensions)","title":"Clustering datasets","text":"","code":"#Mobius Experiment # A function to generate a 5-D mobius strip in the third dimension. # p dimension of object.  (5) # n number of points  mobius_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      mobius <- geozoo::mobius.experiment(p = 5, n = sample_size)     df <- tibble::as_tibble(mobius$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset13 <- mobius_with_noise(sample_size = 300, num_of_noise_dim = 3) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`  langevitour(dataset13)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-14-dini-surface-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 14 (Dini surface with extra noise dimensions)","title":"Clustering datasets","text":"","code":"dini_surface_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      dini <- geozoo::dini.surface(n = sample_size, a = 1, b = 1)     df <- tibble::as_tibble(dini$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset14 <- dini_surface_with_noise(sample_size = 300, num_of_noise_dim = 3) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`  langevitour(dataset14)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-15-conic-spiral-with-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 15 (conic spiral with extra noise dimensions)","title":"Clustering datasets","text":"","code":"conic_spiral_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      conic_spiral <- geozoo::conic.spiral(n = sample_size, a = .2, b = 1, c = .1, w = 2)     df <- tibble::as_tibble(conic_spiral$points, .name_repair = \"unique\")     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset15 <- conic_spiral_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3`  langevitour(dataset15)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-16-s-curve-with-a-hole-and-extra-noise-dimensions","dir":"Articles","previous_headings":"","what":"Dataset 16 (S curve with a hole and extra noise dimensions)","title":"Clustering datasets","text":"","code":"s_curve_data_hole_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      df <- snedata::s_curve_hole(n_samples = sample_size, noise = 0) ## Should add more data because remove to create the hole     df <- df %>%        select(-color)     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          sample_size_n <- NROW(df)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size_n,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size_n,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          return(list(df = df, sample_size = sample_size_n))  } dataset16 <- s_curve_data_hole_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)$df  s_curve_data_hole_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)$sample_size #> [1] 289  langevitour(dataset16)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-17","dir":"Articles","previous_headings":"","what":"Dataset 17","title":"Clustering datasets","text":"","code":"long_cluster_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of two.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }            df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 20 df_2_split_1$y <- df_2_split_1$y - 20  df <- bind_rows(df_2_split_1, df_2_split[[2]]) %>%    select(-color)     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset17 <- long_cluster_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset17)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-18","dir":"Articles","previous_headings":"","what":"Dataset 18","title":"Clustering datasets","text":"","code":"nonlinear_connect_with_noise <- function(sample_size = 400, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size%%4) != 0) {         warning(\"The sample size should be a product of four.\")         cluster_size <- floor(sample_size/4)      } else {         cluster_size <- sample_size/4     }      theta = runif(cluster_size, 0,0.80 * pi)   x = cos(theta) + rnorm(cluster_size, 10, 0.03)   y = sin(theta) + rnorm(cluster_size, 10, 0.03)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)       df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x = cos(-theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)    y = sin(-theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x = cos(-theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)    z = sin(-theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)   y <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x = cos(theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)    z = sin(theta) + rnorm(cluster_size, 10, 0.03) + rnorm(cluster_size, 0.1, 0)   y <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df4 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    df <- bind_rows(df1, df2, df3, df4)      names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset18 <- nonlinear_connect_with_noise(sample_size = 400, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset18)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-19","dir":"Articles","previous_headings":"","what":"Dataset 19","title":"Clustering datasets","text":"","code":"nonlinear_mirror_with_noise <- function(sample_size = 400, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of four.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }      x <- runif(cluster_size, -8, 1.5) y <- -(exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)    df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x <- runif(cluster_size, -8, 1.5) y <- (exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    df <- bind_rows(df1, df2)      names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset19 <- nonlinear_mirror_with_noise(sample_size = 400, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset19)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-20","dir":"Articles","previous_headings":"","what":"Dataset 20","title":"Clustering datasets","text":"","code":"three_circulars_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of four.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }      theta = runif(cluster_size, 0.0,2 * pi) x = cos(theta) + rnorm(cluster_size, 10, 0.03) y = sin(theta) + rnorm(cluster_size, 10, 0.03)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)    df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x = 0.5 * cos(theta) + rnorm(cluster_size, 10, 0.03) y = 0.5 * sin(theta) + rnorm(cluster_size, 10, 0.03)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)      x = rnorm(cluster_size, 10, 0.03) y = rnorm(cluster_size, 10, 0.03)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)      df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    df <- bind_rows(df1, df2, df3)      names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)     df  } dataset20 <- three_circulars_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset20)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-21","dir":"Articles","previous_headings":"","what":"Dataset 21","title":"Clustering datasets","text":"","code":"cluster_and_curvilinear__with_noise_and_bkg_noise <- function(sample_size = 260, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # To check that the assigned sample_size is divided by 2   if ((sample_size%%2) != 0) {     stop(\"The sample size should be a product of 2.\")    } else {     cluster_size <- (sample_size - sample_size * 0.3)/2   }    theta = runif(cluster_size, 0.20,0.60 * pi)   x = cos(theta) + rnorm(cluster_size, 10, 0.03)   y = sin(theta) + rnorm(cluster_size, 10, 0.03)    z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)    df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    x = rnorm(cluster_size, 10, 0.05)   y = rnorm(cluster_size, 10, 0.05)    z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.05)   w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.05)    df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    x = rnorm(sample_size * 0.3, 11, 0.5)   y = rnorm(sample_size * 0.3, 11, 0.5)    z <- rep(0, sample_size * 0.3) + rnorm(sample_size * 0.3, 10, 0.05)   w <- rep(0, sample_size * 0.3) - rnorm(sample_size * 0.3, 10, 0.05)    df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    df <- dplyr::bind_rows(df1, df2, df3)   names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)   df  } dataset21 <- cluster_and_curvilinear__with_noise_and_bkg_noise(sample_size = 260, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset21)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-22","dir":"Articles","previous_headings":"","what":"Dataset 22","title":"Clustering datasets","text":"","code":"link_data_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }      df <- snedata::link_data(n = cluster_size)     df <- df %>%        select(-color)     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset22 <- link_data_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset22)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-23","dir":"Articles","previous_headings":"","what":"Dataset 23","title":"Clustering datasets","text":"","code":"swiss_roll_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      df <- snedata::swiss_roll(n = sample_size)     df <- df %>%        select(-color)     names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset23 <- swiss_roll_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset23)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-24","dir":"Articles","previous_headings":"","what":"Dataset 24","title":"Clustering datasets","text":"","code":"curvy_tree_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }      x <- runif(cluster_size, -2, 2) y <- -(x^3 + runif(cluster_size, 0, 6)) + runif(cluster_size, 0, 0.2)  z <- rnorm(cluster_size, 10, 0.1) w <- rnorm(cluster_size, 10, 0.1)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, 0, 2) y <- (x^3 + runif(cluster_size, 0, 6)) + runif(cluster_size, 0, 0.2)  z <- rnorm(cluster_size, 10, 0.1) w <- rnorm(cluster_size, 10, 0.1)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 0) y <- -(x^3 + runif(cluster_size, 0, 6)) + runif(cluster_size, 0, 0.2) + 10  z <- rnorm(cluster_size, 10, 0.1) w <- rnorm(cluster_size, 10, 0.1)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset24 <- curvy_tree_with_noise(sample_size = 300, num_of_noise_dim = 1,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset24)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-25","dir":"Articles","previous_headings":"","what":"Dataset 25","title":"Clustering datasets","text":"","code":"tree_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%5) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/5)      } else {         cluster_size <- sample_size/5     }   x <- runif(cluster_size, -3, 3) y <- abs(0.5 * x)   z <- rnorm(cluster_size, 10, 0.03) w <- rnorm(cluster_size, 10, 0.03)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -0.5, 0.5) y <- abs(10*x)   z <- rnorm(cluster_size, 10, 0.03) w <- rnorm(cluster_size, 10, 0.03)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -6, 3) y <- (-1) * abs(0.5 * x + 5)   z <- rnorm(cluster_size, 10, 0.03) w <- rnorm(cluster_size, 10, 0.03)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -0.5, 0.5) y <- (-1) * abs(10 * x) - 5  z <- rnorm(cluster_size, 10, 0.03) w <- rnorm(cluster_size, 10, 0.03)  df4 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -5, 5) y <- x  z <- rnorm(cluster_size, 10, 0.03) w <- rnorm(cluster_size, 10, 0.03)  df5 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3, df4, df5)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset25 <- tree_with_noise(sample_size = 500, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset25)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-26","dir":"Articles","previous_headings":"","what":"Dataset 26","title":"Clustering datasets","text":"","code":"cell_cycle_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }   r1 <- 2 r2 <- 1  theta = runif(cluster_size, 0, 2 * pi) x <- rep(0, cluster_size) y <- r1 * cos(theta) z <- r2 * sin(theta)  df1 <- tibble::tibble(x1=x, x2=y, x3=z)  x <- r2 * cos(theta) y <- rep(0, cluster_size) z <- r1 * sin(theta)  df2 <- tibble::tibble(x1=x, x2=y, x3=z)  x <- r1 * cos(theta) y <- r2 * sin(theta) z <- rep(0, cluster_size)  df3 <- tibble::tibble(x1=x, x2=y, x3=z)  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset26 <- cell_cycle_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset26)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-27","dir":"Articles","previous_headings":"","what":"Dataset 27","title":"Clustering datasets","text":"","code":"curvy_cell_cycle_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }   r = sqrt(3)/3  theta = runif(cluster_size, 0, 2 * pi) x <- cos(theta) y <- r + sin(theta) z <- cos(3 * theta)/3  df1 <- tibble::tibble(x1=x, x2=y, x3=z)  x <- cos(theta) + 0.5 y <- sin(theta) - r/2 z <- cos(3 * theta)/3  df2 <- tibble::tibble(x1=x, x2=y, x3=z)  x <- cos(theta) - 0.5 y <- sin(theta) - r/2 z <- cos(3 * theta)/3  df3 <- tibble::tibble(x1=x, x2=y, x3=z)  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset27 <- curvy_cell_cycle_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset27)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-28","dir":"Articles","previous_headings":"","what":"Dataset 28","title":"Clustering datasets","text":"","code":"two_curvy_panckakes_with_noise <- function(sample_size = 300, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }   phi <- runif(cluster_size, max = 2*pi) rho <- sqrt(runif(cluster_size))  theta = runif(cluster_size, 0,1.80 * pi) x = theta y = sin(theta)  df1 <- tibble::tibble(x1=x, x2=y, x3=sqrt(1)*rho*cos(phi) + 4, x4=sqrt(1)*rho*sin(phi) + 4) df2 <- tibble::tibble(x1=x+1, x2=y+1, x3=sqrt(1)*rho*cos(phi) + 6, x4=sqrt(1)*rho*sin(phi) + 6)   df <- bind_rows(df1, df2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset28 <- two_curvy_panckakes_with_noise(sample_size = 300, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset28)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-29","dir":"Articles","previous_headings":"","what":"Dataset 29","title":"Clustering datasets","text":"","code":"small_big_sphere_with_noise <- function(sample_size = 390, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%13) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         small_sphere_sample_size <- floor(sample_size/13)      } else {         small_sphere_sample_size <- sample_size/13     }   df <- snedata::taspheres(n_samples = small_sphere_sample_size, d = 3, n_spheres = 4, r = 3) %>% select(-labels) # Creates a dataframe consisting of samples from the d-spheres of radius r enclosed within a larger d-sphere of radius 5 * r          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset29 <- small_big_sphere_with_noise(sample_size = 390, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset29)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-30","dir":"Articles","previous_headings":"","what":"Dataset 30","title":"Clustering datasets","text":"","code":"seven_branching_data_with_noise <- function(sample_size = 210, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%7) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/7)      } else {         cluster_size <- sample_size/7     }    x <- runif(cluster_size, -2, 2) y <- -(x^3 + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 1.5) y <- (x^3 + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 1.5) y <- (1 + (x-3)^2 + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.1)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -0.5, 3) y <- (1 + -(x-3)^2 + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.1)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df4 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 1) y <- (20 + x^3 + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.01)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df5 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 2) y <- (x^2 + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.01) + 10  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df6 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 2) y <- (x^2 + runif(cluster_size, 0, 0.2)) + runif(cluster_size, 0, 0.01) + 15  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df7 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3, df4, df5, df6, df7)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset30 <- seven_branching_data_with_noise(sample_size = 420, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset30)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-31","dir":"Articles","previous_headings":"","what":"Dataset 31","title":"Clustering datasets","text":"","code":"four_branching_data_with_noise <- function(sample_size = 400, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if (((sample_size - sample_size * 0.1)%%4) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor((sample_size - sample_size * 0.1)/4)      } else {         cluster_size <- (sample_size - sample_size * 0.1)/4     }     x <- runif(cluster_size, -5, 1) y <- (exp(x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 5) y <- (exp(-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)   x <- runif(cluster_size, 0, 5) y <- (log(x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)   x <- runif(cluster_size, -5, 0) y <- (log(-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)  z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df4 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)   x <- runif(sample_size * 0.1, -5, 0) y <- runif(sample_size * 0.1, 0, 0.8) + runif(sample_size * 0.1, 0, 0.8)  z <- rep(0, sample_size * 0.1) + rnorm(sample_size * 0.1, 10, 0.03) w <- rep(0, sample_size * 0.1) - rnorm(sample_size * 0.1, 10, 0.03)  df5 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3, df4, df5)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset31 <- four_branching_data_with_noise(sample_size = 400, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset31)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-32","dir":"Articles","previous_headings":"","what":"Dataset 32","title":"Clustering datasets","text":"","code":"eight_branching_data_with_noise <- function(sample_size = 400, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if ((sample_size%%8) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/8)      } else {         cluster_size <- sample_size/8     }     x <- runif(cluster_size, -1, 2) y <- (exp(x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 1) y <- (exp(2*x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 0.6) y <- (exp(3*x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 3) y <- (exp(0.5*x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df4 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -2, 1) y <- (exp(-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df5 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -1, 1) y <- (exp(2*-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df6 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -0.6, 1) y <- (exp(3*-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df7 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -3, 1) y <- (exp(0.5*-x) + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df8 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3, df4, df5, df6, df7, df8)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset32 <- eight_branching_data_with_noise(sample_size = 400, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset32)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-33","dir":"Articles","previous_headings":"","what":"Dataset 33","title":"Clustering datasets","text":"","code":"one_doublet_with_noise <- function(sample_size = 110, with_seed = NULL, num_of_noise_dim = 6,                                    min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }     # To check that the assigned sample_size is divided by 2.2   if (((sample_size * 10)%%22) != 0) { #sample_size%%2.2     stop(\"The sample size should be a product of 2.2.\")    } else {     cluster_size <- (sample_size * 10)/22   }     df1 <- tibble::tibble(x=rnorm(cluster_size, mean = 0, sd = 0.05), y=rnorm(cluster_size, mean = 1, sd = 0.05), z=rnorm(cluster_size, mean = 0, sd = 0.05), w=rnorm(cluster_size, mean = 0, sd = 0.05))    df2 <- tibble::tibble(x=rnorm(cluster_size, mean = 1, sd = 0.05), y=rnorm(cluster_size, mean = 0, sd = 0.05), z=rnorm(cluster_size, mean = 0, sd = 0.05), w=rnorm(cluster_size, mean = 0, sd = 0.05))    df3_new <- (df1 + df2) / 2   #get a sample of 10   samp <- sample(nrow(df3_new), cluster_size * 0.20) ## 20% from the original dataset    #data in the sample   df3 <- df3_new[samp,]     df <- dplyr::bind_rows(df1, df2, df3)   df <- df |>     dplyr::rename(x1 = x, x2 = y, x3 = z, x4 = w)    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)    df  } dataset33 <- one_doublet_with_noise(sample_size = 110, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset33)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-34","dir":"Articles","previous_headings":"","what":"Dataset 34","title":"Clustering datasets","text":"","code":"two_curvilinear_data_with_noise <- function(sample_size = 250, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        # To check that the assigned sample_size is divided by three     if (((sample_size - sample_size * 0.2)%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor((sample_size - sample_size * 0.2)/2)      } else {         cluster_size <- (sample_size - sample_size * 0.2)/2     }     x <- runif(cluster_size, -2, -0.5) y <- (x^2 + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, 0.5, 2) y <- (x^2 + runif(cluster_size, 0, 0.1)) + runif(cluster_size, 0, 0.2)   z <- rep(0, cluster_size) + rnorm(cluster_size, 10, 0.03) w <- rep(0, cluster_size) - rnorm(cluster_size, 10, 0.03)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- rnorm(sample_size * 0.2, mean = 0, sd = 0.4) y <- rnorm(sample_size * 0.2, mean = 1.5, sd = 0.5)  z <- rep(0, sample_size * 0.2) + rnorm(sample_size * 0.2, 10, 0.03) w <- rep(0, sample_size * 0.2) - rnorm(sample_size * 0.2, 10, 0.03)  df3 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset34 <- two_curvilinear_data_with_noise(sample_size = 500, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset34)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-35","dir":"Articles","previous_headings":"","what":"Dataset 35","title":"Clustering datasets","text":"","code":"sphere_data_with_noise <- function(sample_size = 250, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }        df <- snedata::sphere(sample_size) %>%       select(-color)          names(df) <- paste0(rep(\"x\", 3), 1:3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset35 <- sphere_data_with_noise(sample_size = 500, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset35)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-36","dir":"Articles","previous_headings":"","what":"Dataset 36","title":"Clustering datasets","text":"","code":"three_doublets_with_noise <- function(sample_size = 210, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%4.2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/4.2)      } else {         cluster_size <- sample_size/4.2     }         df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 3, sd = 0.05), x2 = rnorm(cluster_size, mean = 1, sd = 0.05), x3=rnorm(cluster_size, mean = 1, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                       x5=rnorm(cluster_size, mean = 1, sd = 0.05),                       x6=rnorm(cluster_size, mean = 1, sd = 0.05),                       x7=rnorm(cluster_size, mean = 1, sd = 0.05),                       x8=rnorm(cluster_size, mean = 1, sd = 0.05),                       x9=rnorm(cluster_size, mean = 1, sd = 0.05),                       x10=rnorm(cluster_size, mean = 1, sd = 0.05))  df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2=rnorm(cluster_size, mean = 1, sd = 0.05), x3=rnorm(cluster_size, mean = 1, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                       x5=rnorm(cluster_size, mean = 1, sd = 0.05),                       x6=rnorm(cluster_size, mean = 1, sd = 0.05),                       x7=rnorm(cluster_size, mean = 1, sd = 0.05),                       x8=rnorm(cluster_size, mean = 1, sd = 0.05),                       x9=rnorm(cluster_size, mean = 1, sd = 0.05),                       x10=rnorm(cluster_size, mean = 1, sd = 0.05))  df3_new <- (df1 + df2) / 2 #get a sample of 10 samp <- sample(nrow(df3_new), cluster_size * 0.40) ## 20% from the original dataset  #data in the sample df3 <- df3_new[samp,]  df4 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2=rnorm(cluster_size, mean = 1, sd = 0.05), x3=rnorm(cluster_size, mean = 1, sd = 0.05), x4=rnorm(cluster_size, mean = 3, sd = 0.05),                       x5=rnorm(cluster_size, mean = 1, sd = 0.05),                       x6=rnorm(cluster_size, mean = 1, sd = 0.05),                       x7=rnorm(cluster_size, mean = 1, sd = 0.05),                       x8=rnorm(cluster_size, mean = 1, sd = 0.05),                       x9=rnorm(cluster_size, mean = 1, sd = 0.05),                       x10=rnorm(cluster_size, mean = 1, sd = 0.05))  df5_new <- (df2 + df4) / 2  #get a sample of 10 samp1 <- sample(nrow(df5_new), cluster_size * 0.30) ## 20% from the original dataset  #data in the sample df5 <- df5_new[samp1,]  df6_new <- (df1 + df4) / 2  #get a sample of 10 samp2 <- sample(nrow(df6_new), cluster_size * 0.50) ## 20% from the original dataset  #data in the sample df6 <- df6_new[samp2,]  df <- bind_rows(df1, df2, df3, df4, df5, df6)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset36 <- three_doublets_with_noise(sample_size = 210, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset36)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-37","dir":"Articles","previous_headings":"","what":"Dataset 37","title":"Clustering datasets","text":"","code":"one_doublet_four_clusters_with_noise <- function(sample_size = 210, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # To check that the assigned sample_size is divided by 4.4   if (((sample_size * 10)%%44) != 0) { #sample_size%%4.4     stop(\"The sample size should be a product of 4.4.\")    } else {     cluster_size <- (sample_size * 10)/44   }     df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2 = rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 1, sd = 0.05))    df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05),                         x5=rnorm(cluster_size, mean = 1, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 0, sd = 0.05))    df3_new <- (df1 + df2) / 2   #get a sample of 10   samp <- sample(nrow(df3_new), cluster_size * 0.40) ## 20% from the original dataset    #data in the sample   df3 <- df3_new[samp,]    df4 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 1, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 0, sd = 0.05))     df5 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 0, sd = 0.05))    df <- bind_rows(df1, df2, df3, df4, df5)    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)    df  } dataset37 <- one_doublet_four_clusters_with_noise(sample_size = 440, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset37)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-38","dir":"Articles","previous_headings":"","what":"Dataset 38","title":"Clustering datasets","text":"","code":"one_doublet_dfifferent_var_clusters_with_noise <- function(sample_size = 260, with_seed = NULL, num_of_noise_dim = 0,                                                            min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # To check that the assigned sample_size is divided by 2.6   if (((sample_size * 10)%%26) != 0) {     stop(\"The sample size should be a product of 2.6.\")    } else {     cluster_size <- sample_size/2.6   }     df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.1), x2 = rnorm(cluster_size, mean = 0, sd = 0.08), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.08),                         x6=rnorm(cluster_size, mean = 0, sd = 0.08),                         x7=rnorm(cluster_size, mean = 1, sd = 0.08),                         x8=rnorm(cluster_size, mean = 1, sd = 0.02),                         x9=rnorm(cluster_size, mean = 0, sd = 0.02),                         x10=rnorm(cluster_size, mean = 0, sd = 0.02))    df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.02), x2=rnorm(cluster_size, mean = 0, sd = 0.02), x3=rnorm(cluster_size, mean = 0, sd = 0.02), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 1, sd = 0.02),                         x6=rnorm(cluster_size, mean = 0, sd = 0.02),                         x7=rnorm(cluster_size, mean = 0, sd = 0.02),                         x8=rnorm(cluster_size, mean = 1, sd = 0.02),                         x9=rnorm(cluster_size, mean = 0, sd = 0.02),                         x10=rnorm(cluster_size, mean = 0, sd = 0.02))    df3_new <- (df1 + df2) / 2   #get a sample of 10   samp <- sample(nrow(df3_new), cluster_size * 0.60) ## 20% from the original dataset    #data in the sample   df3 <- df3_new[samp,]    df <- bind_rows(df1, df2, df3)    if (num_of_noise_dim != 0) {      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {       if ((j%%2) == 0) {         noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                        min = min_noise, max = max_noise)       } else {         noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                               min = min_noise, max = max_noise)       }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)      df    } else {      df    }  } dataset38 <- one_doublet_dfifferent_var_clusters_with_noise(sample_size = 260, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset38)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-39","dir":"Articles","previous_headings":"","what":"Dataset 39","title":"Clustering datasets","text":"","code":"one_doublet_dfifferent_pattern_clusters_with_noise <- function(sample_size = 280, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2.8) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2.8)      } else {         cluster_size <- sample_size/2.8     }         theta = runif(cluster_size, 0.20, 0.60 * pi)  df1 <- tibble::tibble( x1 = cos(theta) + rnorm(cluster_size, 1, 0.5), x2 = sin(theta) + rnorm(cluster_size, 1, 0.03),  x3 = cos(theta) + rnorm(cluster_size, 1, 0.03), x4 = sin(theta) + rnorm(cluster_size, 1, 0.03),  x5 = cos(theta) + rnorm(cluster_size, 1, 0.03), x6 = sin(theta) + rnorm(cluster_size, 1, 0.03),  x7 = cos(theta) + rnorm(cluster_size, 1, 0.05), x8 = sin(theta) + rnorm(cluster_size, 1, 0.03),  x9 = cos(theta) + rnorm(cluster_size, 1, 0.3), x10 = sin(theta) + rnorm(cluster_size, 1, 0.03))  df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.1), x2 = rnorm(cluster_size, mean = 0, sd = 0.08), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                       x5=rnorm(cluster_size, mean = 0, sd = 0.08),                       x6=rnorm(cluster_size, mean = 0, sd = 0.08),                       x7=rnorm(cluster_size, mean = 1, sd = 0.08),                       x8=rnorm(cluster_size, mean = 1, sd = 0.02),                       x9=rnorm(cluster_size, mean = 0, sd = 0.02),                       x10=rnorm(cluster_size, mean = 0, sd = 0.02))   df3_new <- (df1 + df2) / 2 #get a sample of 10 samp <- sample(nrow(df3_new), cluster_size * 0.80) ## 20% from the original dataset  #data in the sample df3 <- df3_new[samp,]  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset39 <- one_doublet_dfifferent_pattern_clusters_with_noise(sample_size = 280, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset39)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-40","dir":"Articles","previous_headings":"","what":"Dataset 40","title":"Clustering datasets","text":"","code":"two_doublets_parallel_with_noise <- function(sample_size = 440, with_seed = NULL, num_of_noise_dim = 0,                                              min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # To check that the assigned sample_size is divided by 4.4   if (((sample_size * 10)%%44) != 0) { #sample_size%%4.4     stop(\"The sample size should be a product of 4.4.\")    } else {     cluster_size <- (sample_size * 10)/44   }     df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2 = rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 1, sd = 0.05),                         x8=rnorm(cluster_size, mean = 1, sd = 0.05),                         x9=rnorm(cluster_size, mean = 0, sd = 0.05),                         x10=rnorm(cluster_size, mean = 0, sd = 0.05))    df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 1, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 0, sd = 0.05),                         x8=rnorm(cluster_size, mean = 1, sd = 0.05),                         x9=rnorm(cluster_size, mean = 0, sd = 0.05),                         x10=rnorm(cluster_size, mean = 0, sd = 0.05))    df3_new <- (df1 + df2) / 2   #get a sample of 10   samp <- sample(nrow(df3_new), cluster_size * 0.20) ## 20% from the original dataset    #data in the sample   df3 <- df3_new[samp,]    df4 <- tibble::tibble(x1=rnorm(cluster_size, mean = -1, sd = 0.05), x2 = rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                         x5=rnorm(cluster_size, mean = 0, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = -1, sd = 0.05),                         x8=rnorm(cluster_size, mean = -1, sd = 0.05),                         x9=rnorm(cluster_size, mean = 0, sd = 0.05),                         x10=rnorm(cluster_size, mean = 0, sd = 0.05))    df5 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = -1, sd = 0.05),                         x5=rnorm(cluster_size, mean = -1, sd = 0.05),                         x6=rnorm(cluster_size, mean = 0, sd = 0.05),                         x7=rnorm(cluster_size, mean = 0, sd = 0.05),                         x8=rnorm(cluster_size, mean = -1, sd = 0.05),                         x9=rnorm(cluster_size, mean = 0, sd = 0.05),                         x10=rnorm(cluster_size, mean = 0, sd = 0.05))    df6_new <- (df4 + df5) / 2   #get a sample of 10   samp1 <- sample(nrow(df6_new), cluster_size * 0.20) ## 20% from the original dataset    #data in the sample   df6 <- df6_new[samp1,]    df <- dplyr::bind_rows(df1, df2, df3, df4, df5, df6)    if (num_of_noise_dim != 0) {      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {       if ((j%%2) == 0) {         noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                        min = min_noise, max = max_noise)       } else {         noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                               min = min_noise, max = max_noise)       }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)      df    } else {      df    }  } dataset40 <- two_doublets_parallel_with_noise(sample_size = 440, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset40)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-41","dir":"Articles","previous_headings":"","what":"Dataset 41","title":"Clustering datasets","text":"","code":"one_doublets_with_bkg_noise <- function(sample_size = 250, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2.5) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2.5)      } else {         cluster_size <- sample_size/2.5     }         df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2 = rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                       x5=rnorm(cluster_size, mean = 0, sd = 0.05),                       x6=rnorm(cluster_size, mean = 0, sd = 0.05),                       x7=rnorm(cluster_size, mean = 1, sd = 0.05))  df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 1, sd = 0.05),                       x5=rnorm(cluster_size, mean = 1, sd = 0.05),                       x6=rnorm(cluster_size, mean = 0, sd = 0.05),                       x7=rnorm(cluster_size, mean = 0, sd = 0.05))  df3_new <- (df1 + df2) / 2 #get a sample of 10 samp <- sample(nrow(df3_new), cluster_size * 0.20) ## 20% from the original dataset  #data in the sample df3 <- df3_new[samp,]  df4_new <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.2), x2 = rnorm(cluster_size, mean = 0, sd = 0.5), x3=rnorm(cluster_size, mean = 0.5, sd = 0.5), x4=rnorm(cluster_size, mean = 0.2, sd = 0.5),                       x5=rnorm(cluster_size, mean = 0.2, sd = 0.3),                       x6=rnorm(cluster_size, mean = 0, sd = 0.5),                       x7=rnorm(cluster_size, mean = 0, sd = 0.3))  #get a sample of 10 samp1 <- sample(nrow(df4_new), cluster_size * 0.30) ## 20% from the original dataset  #data in the sample df4 <- df4_new[samp1,]  df <- bind_rows(df1, df2, df3, df4)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset41 <- one_doublets_with_bkg_noise(sample_size = 250, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset41)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-42","dir":"Articles","previous_headings":"","what":"Dataset 42","title":"Clustering datasets","text":"","code":"curvy_branching_with_noise <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }         theta = runif(cluster_size, 0.20, 0.90 * pi)  df1 <- tibble::tibble( x1 = cos(theta) + rnorm(cluster_size, 1, 0.06), x2 = sin(theta) + rnorm(cluster_size, 1, 0.06),  x3 = cos(theta) + rnorm(cluster_size, 1, 0.06), x4 = sin(theta) + rnorm(cluster_size, 1, 0.06) )  theta1 = runif(cluster_size, 0.20, 0.90 * pi)  df2 <- tibble::tibble( x1 = cos(-theta1) + rnorm(cluster_size, 1, 0.06), x2 = sin(-theta1) + rnorm(cluster_size, 1, 0.06),  x3 = cos(-theta1) + rnorm(cluster_size, 1, 0.06), x4 = sin(-theta1) + rnorm(cluster_size, 1, 0.06) )  df <- bind_rows(df1, df2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset42 <- curvy_branching_with_noise(sample_size = 250, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset42)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-43","dir":"Articles","previous_headings":"","what":"Dataset 43","title":"Clustering datasets","text":"","code":"two_doublets_with_bkg_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%4) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/4)      } else {         cluster_size <- sample_size/4     }         df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))   df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))  df6_new <- (df1 + df2) / 2 #get a sample of 10 samp <- sample(nrow(df6_new), cluster_size * 0.20) ## 20% from the original dataset  #data in the sample df6 <- df6_new[samp,]   df3 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 1, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))  df7_new <- (df1 + df3) / 2 #get a sample of 10 samp <- sample(nrow(df7_new), cluster_size * 0.20) ## 20% from the original dataset  #data in the sample df7 <- df7_new[samp,]  df4 <- tibble::tibble(x1=rnorm(cluster_size * 0.6, mean = 0, sd = 0.5), x2=rnorm(cluster_size * 0.6, mean = 0, sd = 0.5), x3=rnorm(cluster_size * 0.6, mean = 0, sd = 0.5), x4=rnorm(cluster_size * 0.6, mean = 0, sd = 0.5))   df <- bind_rows(df1, df2, df3, df6, df7, df4)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset43 <- two_doublets_with_bkg_noise(sample_size = 400, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset43)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-44","dir":"Articles","previous_headings":"","what":"Dataset 44","title":"Clustering datasets","text":"","code":"two_nonlinear_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }     x <- runif(cluster_size, -8, 1.5) y <- -(exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  z <- -(exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7) w <- -(exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  x <- runif(cluster_size, -8, 1.5) y <- 3 - (exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  z <- 3 - (exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7) w <- 3 - (exp(x) + runif(cluster_size, 0, 1)) + runif(cluster_size, 0, 0.7)  df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)  df <- bind_rows(df1, df2)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset44 <- two_nonlinear_with_noise(sample_size = 200, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset44)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-45","dir":"Articles","previous_headings":"","what":"Dataset 45","title":"Clustering datasets","text":"","code":"two_s_curve_hole_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }     ## S curve with a hole df1 <- snedata::s_curve_hole(n_samples = sample_size/2, noise = 0) ## Should add more data because remove to create the hole df1 <- df1 %>%    select(-color) names(df1) <- paste0(rep(\"x\",3), 1:3)  df2 <- df1 + 1  df <- bind_rows(df1, df2)  sample_size <- NROW(df)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          return(list(df = df, sample_size = sample_size))  } dataset45 <- two_s_curve_hole_with_noise(sample_size = 400, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  dataset45$sample_size #> [1] 382  langevitour(dataset45$df)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-46","dir":"Articles","previous_headings":"","what":"Dataset 46","title":"Clustering datasets","text":"","code":"three_grid_with_noise <- function(n_value = 19, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }    df1 <- snedata::grid_data(n = n_value) df1 <- df1 %>%   select(-color)  names(df1) <- paste0(rep(\"x\",2), 1:2) df1$x3 <- runif(nrow(df1), -0.01, 0.01) df1$x4 <- runif(nrow(df1), -0.01, 0.01)  df2 <- snedata::grid_data(n = n_value) df2 <- df2 %>%   select(-color)  names(df2) <- paste0(rep(\"x\",2), c(1, 3)) df2$x2 <- runif(nrow(df2), -0.01, 0.01) df2$x4 <- runif(nrow(df2), -0.01, 0.01) df2 <- df2 %>%   select(x1, x2, x3, x4)  df3 <- snedata::grid_data(n = n_value) df3 <- df3 %>%   select(-color)  names(df3) <- paste0(rep(\"x\",2), c(1, 4)) df3$x2 <- runif(nrow(df3), -0.01, 0.01) df3$x3 <- runif(nrow(df3), -0.01, 0.01) df3 <- df3 %>%   select(x1, x2, x3, x4)   df <- bind_rows(df1, df2, df3)  sample_size <- NROW(df)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          return(list(df = df, sample_size = sample_size))  } dataset46 <- three_grid_with_noise(n_value = 19, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  dataset46$sample_size #> [1] 1083  langevitour(dataset46$df)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-47","dir":"Articles","previous_headings":"","what":"Dataset 47","title":"Clustering datasets","text":"","code":"one_grid_diff_with_bkg_noise <- function(sample_size = 260, with_seed = NULL, num_of_noise_dim = 5,                                          min_noise = -0.5, max_noise = 0.5) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }       if (((sample_size - (sample_size * 6/26)) %% 2) != 0) {          stop(\"The sample size should be a product of two.\")        } else {          if (((sqrt((sample_size - (sample_size * 6/26)) / 2)) %% 1) != 0) {              stop(\"The square root should exists.\")            } else {              n_value <- sqrt((sample_size - (sample_size * 0.6/2.6)) / 2)            }        }      df1 <- snedata::grid_data(n = n_value)   df1 <- df1 |>     dplyr::select(-color)    names(df1) <- paste0(rep(\"x\",2), 1:2)    df3 <- df1 + 3    df1 <- dplyr::bind_rows(df1, df3)     # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))    #sample_size <- NROW(df1) + NROW(df1) * 0.6/2    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(NROW(df1),                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(NROW(df1),                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df1 <- dplyr::bind_cols(df1, df_noise)    ## To add background noise   column_names_bkg <- paste0(rep(\"x\", NCOL(df1)), 1:NCOL(df1))    noise_bkg_val_list <- list()    for (j in 1:NCOL(df1)) {     noise_bkg_val_list[[column_names_bkg[j]]] <- rnorm(sample_size * 0.6/2.6, mean = 3, sd = 5)     }    df2 <- tibble::as_tibble(noise_bkg_val_list)     df <- dplyr::bind_rows(df1, df2)    df  } dataset47 <- one_grid_diff_with_bkg_noise(sample_size = 260, num_of_noise_dim = 5,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset47)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-48","dir":"Articles","previous_headings":"","what":"Dataset 48","title":"Clustering datasets","text":"","code":"two_grid_with_bkg_noise <- function(n_value = 10, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }            df1 <- snedata::grid_data(n = n_value)     df1 <- df1 %>%       select(-color)          names(df1) <- paste0(rep(\"x\",2), 1:2)          df3 <- df1 + 5          df1 <- dplyr::bind_rows(df1, df3)      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))          sample_size <- NROW(df1) + NROW(df1) * 0.6/2      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(NROW(df1),                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(NROW(df1),                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df1 <- dplyr::bind_cols(df1, df_noise)          ## To add background noise     column_names_bkg <- paste0(rep(\"x\", NCOL(df1)), 1:NCOL(df1))          noise_bkg_val_list <- list()          for (j in 1:NCOL(df1)) {         noise_bkg_val_list[[column_names_bkg[j]]] <- rnorm(sample_size * 0.6/2.6, mean = 3, sd = 5)      }          df2 <- tibble::as_tibble(noise_bkg_val_list)               df <- dplyr::bind_rows(df1, df2)          return(list(df = df, sample_size = sample_size))  } dataset48 <- two_grid_with_bkg_noise(n_value = 10, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  dataset48$sample_size #> [1] 260  langevitour(dataset48$df)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-49","dir":"Articles","previous_headings":"","what":"Dataset 49","title":"Clustering datasets","text":"","code":"traingular_3D_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }    trace.point <- runif(3) corner.points <- tibble::tibble(x1 =c(  0,  1, 0.5, 0.5),                             x2 =c(  0,  0,   1, 0.5),                             x3 =c(  0,  0,   0,   1)) df <- tibble::tibble(x1 =rep(0,sample_size),                            x2 =rep(0,sample_size),                            x3 =rep(0,sample_size)) for(i in 1:sample_size){   trace.point    = (corner.points[sample(4,1),]+trace.point)/2   df[i,] = trace.point }           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset49 <- traingular_3D_with_noise(sample_size = 500, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset49)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-50","dir":"Articles","previous_headings":"","what":"Dataset 50","title":"Clustering datasets","text":"","code":"triangular_plane_with_bkg_noise <- function(sample_size = 675, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }         trace.point <- runif(2) corner.points <- tibble::tibble(x1 =c(  0,  1, 0.5),                             x2 =c(  0,  0,   1)) df1 <- tibble::tibble(x1 =rep(0,cluster_size),                            x2 =rep(0,cluster_size)) for(i in 1:cluster_size){   trace.point    = (corner.points[sample(3,1),]+trace.point)/2   df1[i,] = trace.point }      # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(cluster_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(cluster_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df1 <- dplyr::bind_cols(df1, df_noise)          ## To add background noise     column_names_bkg <- paste0(rep(\"x\", NCOL(df1)), 1:NCOL(df1))          noise_bkg_val_list <- list()          for (j in 1:NCOL(df1)) {         noise_bkg_val_list[[column_names_bkg[j]]] <- rnorm(cluster_size, mean = 0.025, sd = 0.5)      }          df2 <- tibble::as_tibble(noise_bkg_val_list)               df <- dplyr::bind_rows(df1, df2, -df1)          df  } dataset50 <- triangular_plane_with_bkg_noise(sample_size = 675, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset50)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-51","dir":"Articles","previous_headings":"","what":"Dataset 51","title":"Clustering datasets","text":"","code":"two_curvilinear_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }         theta = runif(cluster_size, 0.20, 0.90 * pi)  df1 <- tibble::tibble( x1 = cos(theta) + rnorm(cluster_size, 1, 0.06), x2 = sin(theta) + rnorm(cluster_size, 1, 0.06),  x3 = cos(theta) + rnorm(cluster_size, 1, 0.06), x4 = sin(theta) + rnorm(cluster_size, 1, 0.06) )  theta1 = runif(cluster_size, 0.20, 0.90 * pi)  df2 <- tibble::tibble( x1 = 1 + cos(theta1) + rnorm(cluster_size, 1, 0.06), x2 = 1 + sin(theta1) + rnorm(cluster_size, 1, 0.06),  x3 = 1 + cos(theta1) + rnorm(cluster_size, 1, 0.06), x4 = 1 + sin(theta1) + rnorm(cluster_size, 1, 0.06) )  df <- bind_rows(df1, df2)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset51 <- two_curvilinear_with_noise(sample_size = 100, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset51)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-52","dir":"Articles","previous_headings":"","what":"Dataset 52","title":"Clustering datasets","text":"","code":"two_curvilinear_diff_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%2) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }         theta = runif(cluster_size, 0.40, 0.70 * pi)  df1 <- tibble::tibble( x1 = cos(theta) + rnorm(cluster_size, 1, 0.06), x2 = sin(theta) + rnorm(cluster_size, 1, 0.06),  x3 = cos(theta) + rnorm(cluster_size, 1, 0.06), x4 = sin(theta) + rnorm(cluster_size, 1, 0.06) )  theta1 = runif(cluster_size, 0.20, 0.90 * pi)  df2 <- tibble::tibble( x1 = 1 + cos(theta1) + rnorm(cluster_size, 1, 0.06), x2 = 1 + sin(theta1) + rnorm(cluster_size, 1, 0.06),  x3 = cos(theta1) + rnorm(cluster_size, 1, 0.06), x4 = sin(theta1) + rnorm(cluster_size, 1, 0.06) )  df <- bind_rows(df1, df2)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset52 <- two_curvilinear_diff_with_noise(sample_size = 100, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset52)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-53","dir":"Articles","previous_headings":"","what":"Dataset 53","title":"Clustering datasets","text":"","code":"two_linear_diff_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }         df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 20 df_2_split_1$y <- df_2_split_1$y - 20  df_2_split_3 <- df_2_split[[1]] df_2_split_3$x <- df_2_split_3$x + 10 df_2_split_3$y <- df_2_split_3$y + 10  df <- dplyr::bind_rows(df_2_split_1, df_2_split[[2]], df_2_split_3) %>%    dplyr::select(-color)  names(df) <- paste0(rep(\"x\",2), 1:2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset53 <- two_linear_diff_with_noise(sample_size = 150, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset53)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-54","dir":"Articles","previous_headings":"","what":"Dataset 54","title":"Clustering datasets","text":"","code":"three_linear_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }         df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 20 df_2_split_1$y <- df_2_split_1$y - 20  df_2_split_3 <- df_2_split[[1]] df_2_split_3$x <- df_2_split_3$x - 10 df_2_split_3$y <- df_2_split_3$y + 10  df <- dplyr::bind_rows(df_2_split_1, df_2_split[[2]], df_2_split_3) %>%    dplyr::select(-color)  names(df) <- paste0(rep(\"x\",2), 1:2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset54 <- three_linear_with_noise(sample_size = 150, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset54)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-55","dir":"Articles","previous_headings":"","what":"Dataset 55","title":"Clustering datasets","text":"","code":"three_nonlinear_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }         phi <- runif(cluster_size, max = 2*pi) rho <- sqrt(runif(cluster_size))  theta = runif(cluster_size, 0,1.80 * pi) x = theta y = sin(theta)  df1 <- tibble::tibble(x1=x, x2=y, x3=sqrt(1)*rho*cos(phi) + 4, x4=sqrt(1)*rho*sin(phi) + 4) df2 <- tibble::tibble(x1=x+1, x2=y+1, x3=sqrt(1)*rho*cos(phi) + 6, x4=sqrt(1)*rho*sin(phi) + 6) df3 <- tibble::tibble(x1=x-1, x2=y-1, x3=sqrt(1)*rho*cos(phi) + 8, x4=sqrt(1)*rho*sin(phi) + 8)  df <- bind_rows(df1, df2, df3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset55 <- three_nonlinear_with_noise(sample_size = 150, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset55)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-56","dir":"Articles","previous_headings":"","what":"Dataset 56","title":"Clustering datasets","text":"","code":"three_cluster_mirror_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%6) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/6)      } else {         cluster_size <- sample_size/6     }         df1 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))  df2 <- tibble::tibble(x1=rnorm(cluster_size, mean = 1, sd = 0.05), x2=rnorm(cluster_size, mean = 0, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))  df3 <- tibble::tibble(x1=rnorm(cluster_size, mean = 0, sd = 0.05), x2=rnorm(cluster_size, mean = 1, sd = 0.05), x3=rnorm(cluster_size, mean = 0, sd = 0.05), x4=rnorm(cluster_size, mean = 0, sd = 0.05))  df_1 <- bind_rows(df1, df2, df3)  df_2 <- df_1 + 2 df <- bind_rows(df_1, df_2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset56 <- three_cluster_mirror_with_noise(sample_size = 150, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset56)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-57","dir":"Articles","previous_headings":"","what":"Dataset 57","title":"Clustering datasets","text":"","code":"s_curve_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }      df <- snedata::s_curve(n_samples = sample_size, noise = 0.05)    df <- df %>%      dplyr::select(-color)   names(df) <- paste0(rep(\"x\",3), 1:3)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset57 <- s_curve_with_noise(sample_size = 200, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset57)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-58","dir":"Articles","previous_headings":"","what":"Dataset 58","title":"Clustering datasets","text":"","code":"#Mobius Experiment # A function to generate a 5-D mobius strip in the third dimension. # p dimension of object.  (5) # n number of points  mobius_cluster_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          mobius <- geozoo::mobius.experiment(p = 5, n = sample_size* 0.80)  df1 <- tibble::as_tibble(mobius$points)  names(df1) <- paste0(rep(\"x\", length(names(df1))), 1: length(names(df1)))           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size* 0.80,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size* 0.80,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df1 <- dplyr::bind_cols(df1, df_noise)          ## To add background noise     column_names_bkg <- paste0(rep(\"x\", NCOL(df1)), 1:NCOL(df1))          noise_bkg_val_list <- list()          for (j in 1:NCOL(df1)) {         noise_bkg_val_list[[column_names_bkg[j]]] <- rnorm(sample_size * 0.20, mean = 0, sd = 0.3)      }          df2 <- tibble::as_tibble(noise_bkg_val_list)               df <- dplyr::bind_rows(df1, df2)               df  } dataset58 <- mobius_cluster_with_noise(sample_size = 250, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05) #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  langevitour(dataset58)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-59","dir":"Articles","previous_headings":"","what":"Dataset 59","title":"Clustering datasets","text":"","code":"four_long_clusters_with_bkg_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%5) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/5)      } else {         cluster_size <- sample_size/5     }         df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 20 df_2_split_1$y <- df_2_split_1$y - 20  df_2_split_3 <- df_2_split[[1]] df_2_split_3$x <- df_2_split_3$x - 10 df_2_split_3$y <- df_2_split_3$y + 10  df_2_split_4 <- df_2_split[[1]] df_2_split_4$x <- df_2_split_4$x + 20 df_2_split_4$y <- df_2_split_4$y + 30  df1 <- bind_rows(df_2_split_1, df_2_split[[2]], df_2_split_3, df_2_split_4) %>%    select(-color)  names(df1) <- paste0(rep(\"x\",2), 1:2)           # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(cluster_size * 4,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(cluster_size * 4,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df1 <- dplyr::bind_cols(df1, df_noise)          ## To add background noise     column_names_bkg <- paste0(rep(\"x\", NCOL(df1)), 1:NCOL(df1))          noise_bkg_val_list <- list()          for (j in 1:NCOL(df1)) {         noise_bkg_val_list[[column_names_bkg[j]]] <- rnorm(cluster_size, mean = 0, sd = 10)      }          df2 <- tibble::as_tibble(noise_bkg_val_list)               df <- dplyr::bind_rows(df1, df2)          df  } dataset59 <- four_long_clusters_with_bkg_noise(sample_size = 150, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset59)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-60","dir":"Articles","previous_headings":"","what":"Dataset 60","title":"Clustering datasets","text":"","code":"curvy_branching_cluster_with_bkg_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%4) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/4)      } else {         cluster_size <- sample_size/4     }         theta = runif(cluster_size, 0.20, 0.90 * pi)  df1 <- tibble::tibble( x1 = cos(theta) + rnorm(cluster_size, 1, 0.06), x2 = sin(theta) + rnorm(cluster_size, 1, 0.06),  x3 = cos(theta) + rnorm(cluster_size, 1, 0.06), x4 = sin(theta) + rnorm(cluster_size, 1, 0.06) )  theta1 = runif(cluster_size, 0.20, 0.90 * pi)  df2 <- tibble::tibble( x1 = cos(-theta1) + rnorm(cluster_size, 1, 0.06), x2 = sin(-theta1) + rnorm(cluster_size, 1, 0.06),  x3 = cos(-theta1) + rnorm(cluster_size, 1, 0.06), x4 = sin(-theta1) + rnorm(cluster_size, 1, 0.06) )   df3 <- tibble::tibble(x1 = rnorm(cluster_size, mean = 1, sd = 0.08), x2 = rnorm(cluster_size, mean = 1, sd = 0.08), x3=rnorm(cluster_size, mean = 1, sd = 0.08), x4=rnorm(cluster_size, mean = 1, sd = 0.08))  df4 <- tibble::tibble(x1 = rnorm(cluster_size, mean = 1, sd = 1), x2 = rnorm(cluster_size, mean = 1, sd = 1), x3=rnorm(cluster_size, mean = 1, sd = 1), x4=rnorm(cluster_size, mean = 1, sd = 1))   df <- bind_rows(df1, df2, df3, df4)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset60 <- curvy_branching_cluster_with_bkg_noise(sample_size = 200, num_of_noise_dim = 6,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset60)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-61","dir":"Articles","previous_headings":"","what":"Dataset 61","title":"Clustering datasets","text":"","code":"three_diff_linear_with_noise <- function(sample_size = 150, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/3)      } else {         cluster_size <- sample_size/3     }         df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 250 df_2_split_1$y <- df_2_split_1$y - 20  df_2_split_3 <- tibble::tibble(x = -df_2_split[[1]]$y, y = df_2_split[[1]]$x)  df <- dplyr::bind_rows(df_2_split_1, df_2_split[[2]], df_2_split_3) %>%    select(-color)  names(df) <- paste0(rep(\"x\",2), 1:2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset61 <- three_diff_linear_with_noise(sample_size = 300, num_of_noise_dim = 8,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset61)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-62","dir":"Articles","previous_headings":"","what":"Dataset 62","title":"Clustering datasets","text":"","code":"four_diff_long_clutsers_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/4)      } else {         cluster_size <- sample_size/4     }         df_2_split <- snedata::long_cluster_data(n = cluster_size) %>%    group_by(color) %>%    group_split()  df_2_split_1 <- df_2_split[[1]] df_2_split_1$x <- df_2_split_1$x - 150 df_2_split_1$y <- df_2_split_1$y - 20  df_2_split_3 <- tibble::tibble(x = df_2_split[[1]]$y - 70, y = -df_2_split[[1]]$x)  df_2_split_4 <- tibble::tibble(x = df_2_split_3$x, y = df_2_split_3$y + 150)  df <- dplyr::bind_rows(df_2_split_1, df_2_split[[2]], df_2_split_3, df_2_split_4) %>%    select(-color)  names(df) <- paste0(rep(\"x\",2), 1:2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset62 <- four_diff_long_clutsers_with_noise(sample_size = 500, num_of_noise_dim = 8,     min_noise = -0.05, max_noise = 0.05) #> Warning in four_diff_long_clutsers_with_noise(sample_size = 500, #> num_of_noise_dim = 8, : The sample size should be a product of number of #> clusters.  langevitour(dataset62)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-63","dir":"Articles","previous_headings":"","what":"Dataset 63","title":"Clustering datasets","text":"","code":"two_s_curves_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }         df1 <- snedata::s_curve(n_samples = cluster_size)  df1 <- df1 %>%    select(-color) names(df1) <- paste0(rep(\"x\",3), 1:3)  df2 <- tibble::tibble(x1 = -df1$x1 + 5, x2 = df1$x2 + 1, x3 = df1$x3 + 1)  df <- dplyr::bind_rows(df1, df2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset63 <- two_s_curves_with_noise(sample_size = 500, num_of_noise_dim = 5,     min_noise = -0.05, max_noise = 0.05) #> Warning in two_s_curves_with_noise(sample_size = 500, num_of_noise_dim = 5, : #> The sample size should be a product of number of clusters.  langevitour(dataset63)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-64","dir":"Articles","previous_headings":"","what":"Dataset 64","title":"Clustering datasets","text":"","code":"plane_2D_with_hole <- function(sample_size = 100, with_seed = NULL, num_of_noise_dim = 2, min_noise = 0, max_noise = 1) {    # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # To check that the assigned sample_size is divided by four   if ((sample_size%%4) != 0) {     stop(\"The sample size should be a product of 4.\")    } else {     cluster_size <- sample_size/4   }    u <- runif(cluster_size, min = 10, max = 30)   v <- runif(cluster_size, min = 10, max = 20)   x <- u + v - 10   y <- v - u + 8    df1 <- tibble::tibble(x1 = x, x2 = y)    anchor <- c(1, 1)   indices <- rowSums((sweep(df1, 2, anchor, `-`))) > 20   df1 <- df1[indices, ]   rownames(df1) <- NULL    df2 <- tibble::tibble(x1 = -df1$x2 + 26, x2 = df1$x1 - 15)   df3 <- tibble::tibble(x1 = df1$x2 + 30, x2 = -df1$x1 + 25)    df <- dplyr::bind_rows(df1 - 10, df1 + 10, df2, df3)    sample_size <- NROW(df)     # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), 3:(3 + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)    return(list(df = df, sample_size = sample_size))  } dataset64 <- plane_2D_with_hole(sample_size = 480, with_seed = 20230531)  dataset64$sample_size #> [1] 412  langevitour(dataset64$df)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-65","dir":"Articles","previous_headings":"","what":"Dataset 65","title":"Clustering datasets","text":"","code":"mirror_s_curves_with_noise <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 8,     min_noise = -0.5, max_noise = 0.5) {     # To check the seed is not assigned     if (!is.null(with_seed)) {         set.seed(with_seed)     }          # To check that the assigned sample_size is divided by three     if ((sample_size%%3) != 0) {         warning(\"The sample size should be a product of number of clusters.\")         cluster_size <- floor(sample_size/2)      } else {         cluster_size <- sample_size/2     }         df1 <- snedata::s_curve(n_samples = cluster_size)      df1 <- df1 %>%        select(-color)     names(df1) <- paste0(rep(\"x\",3), 1:3)          df2 <- tibble::tibble(x1 = -df1$x1 + 2, x2 = df1$x2, x3 = df1$x3)          df <- dplyr::bind_rows(df1, df2)          # To generate column names for noise dimensions     column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))      # Initialize an empty list to store the vectors with column     # values     noise_dim_val_list <- list()      for (j in 1:num_of_noise_dim) {         if ((j%%2) == 0) {             noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                 min = min_noise, max = max_noise)         } else {             noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                 min = min_noise, max = max_noise)         }      }      df_noise <- tibble::as_tibble(noise_dim_val_list)     df <- dplyr::bind_cols(df, df_noise)          df  } dataset65 <- mirror_s_curves_with_noise(sample_size = 600, num_of_noise_dim = 5,     min_noise = -0.05, max_noise = 0.05)  langevitour(dataset65)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-66","dir":"Articles","previous_headings":"","what":"Dataset 66","title":"Clustering datasets","text":"","code":"gaussian_clusters_diff_points <- function(n = 400, cluster_size_vec = c(50, 100, 200, 50), with_seed = NULL, num_clusters = 4, mean_matrix = rbind(c(1,0,0,0,0,0), c(0,1,0,0,0,0), c(0,0,1,0,0,0), c(0,0,0,1,0,0)),                               var_vec = c(0.02, 0.05, 0.06, 0.1), num_dims = 6, num_noise_dims = 4,                               min_noise = -0.05, max_noise = 0.05) {    # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    if (n < num_clusters) {     stop('Number of clusters exceed the number of observations.')    }    if ((num_dims == 0) | (num_dims == 1)) {     stop('There should be at least two dimensions.')    }    if (dim(mean_matrix)[1] != length(var_vec)) {     stop('The length of mean and variance vectors are different.')    }    if (dim(mean_matrix)[1] != num_clusters) {     stop('There is not enough mean values for clusters.')    }    if (dim(mean_matrix)[2] != num_dims) {     stop('There is not enough mean values for dimensions.')    }    if (length(var_vec) != num_clusters) {     stop('There is not enough varaiance values for clusters.')    }    # # To check that the assigned n is divided by three   # if ((n%%num_clusters) != 0) {   #   warning(\"The sample size should be a product of number of clusters.\")   #   cluster_size <- floor(n/num_clusters)   #    # } else {   #   cluster_size <- n/num_clusters   # }      # To generate empty tibble   column_names <- paste0(rep(\"x\", num_dims), 1:num_dims)   df <- tibble::tibble(!!!stats::setNames(rep(list(NULL), length(column_names)), column_names))    for (i in 1:num_clusters) {      # To filter the mean values for specific cluster     mean_val_for_cluster <- mean_matrix |>       tibble::as_tibble(.name_repair = \"unique\") |>       dplyr::filter(dplyr::row_number() == i) |>       unlist(use.names = FALSE)      # To filter the variance values for specific cluster     variance_val_for_cluster <- var_vec[i]          num_points_cluster <- cluster_size_vec[i]      # Initialize an empty list to store the vectors with column     # values     dim_val_list <- list()      for (j in 1:num_dims) {        dim_val_list[[column_names[j]]] <- stats::rnorm(num_points_cluster, mean = mean_val_for_cluster[j],                                                sd = variance_val_for_cluster)      }     # To generate a tibble for a cluster     df_cluster <- tibble::as_tibble(dim_val_list)      df <- dplyr::bind_rows(df, df_cluster)    }    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_noise_dims), (NCOL(df) + 1):((NCOL(df) + 1) + num_noise_dims))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_noise_dims) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(n,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(n,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)    df  } dataset66 <- gaussian_clusters_diff_points(n = 1500, cluster_size_vec = c(450, 350, 400, 300), with_seed = NULL, num_clusters = 4, mean_matrix = rbind(c(1,0,0,0,0,0), c(0,1,0,0,0,0), c(0,0,1,0,0,0), c(0,0,0,1,0,0)),                               var_vec = c(0.02, 0.05, 0.06, 0.1), num_dims = 6, num_noise_dims = 4,                               min_noise = -0.05, max_noise = 0.05) #> New names: #> New names: #> New names: #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6`  langevitour(dataset66)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-67","dir":"Articles","previous_headings":"","what":"Dataset 67","title":"Clustering datasets","text":"","code":"cluster_and_curvilinear__with_noise <- function(sample_size = 200, cluster_size_vec = c(50, 150), with_seed = NULL, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }     theta = runif(cluster_size_vec[1], 0.20,0.60 * pi)   x = cos(theta) + rnorm(cluster_size_vec[1], 10, 0.03)   y = sin(theta) + rnorm(cluster_size_vec[1], 10, 0.03)    z <- rep(0, cluster_size_vec[1]) + rnorm(cluster_size_vec[1], 10, 0.03)   w <- rep(0, cluster_size_vec[1]) - rnorm(cluster_size_vec[1], 10, 0.03)    df1 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    x = rnorm(cluster_size_vec[2], 10, 0.05)   y = rnorm(cluster_size_vec[2], 10, 0.05)    z <- rep(0, cluster_size_vec[2]) + rnorm(cluster_size_vec[2], 10, 0.05)   w <- rep(0, cluster_size_vec[2]) - rnorm(cluster_size_vec[2], 10, 0.05)    df2 <- tibble::tibble(x1 = x, x2 = y, x3 = z, x4 = w)    df <- dplyr::bind_rows(df1, df2)   names(df) <- paste0(rep(\"x\", NCOL(df)), 1:NCOL(df))    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)   df  } dataset67 <- cluster_and_curvilinear__with_noise(sample_size = 1500, cluster_size_vec = c(500, 1000), with_seed = NULL, num_of_noise_dim = 3,     min_noise = -0.05, max_noise = 0.05)   langevitour(dataset67)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-68","dir":"Articles","previous_headings":"","what":"Dataset 68","title":"Clustering datasets","text":"","code":"one_grid_diff <- function(sample_size = 200, with_seed = NULL, num_of_noise_dim = 2,                                          min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    if ((sample_size %% 2) != 0) {      stop(\"The sample size should be a product of two.\")    } else {      if (((sqrt(sample_size/2)) %% 1) != 0) {        stop(\"The square root should exists.\")      } else {        n_value <- sqrt(sample_size/2)      }    }      df1 <- snedata::grid_data(n = n_value)   df1 <- df1 |>     dplyr::select(-color)    names(df1) <- paste0(rep(\"x\",2), 1:2)    df3 <- df1 + 3    df1 <- dplyr::bind_rows(df1, df3)     # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df1) + 1):((NCOL(df1) + 1) + num_of_noise_dim))    sample_size <- NROW(df1)    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(NROW(df1),                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(NROW(df1),                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df1, df_noise)      return(list(df = df, sample_size = NROW(df)))  } dataset68 <- one_grid_diff(sample_size = 512, with_seed = NULL, num_of_noise_dim = 2,                                          min_noise = -0.05, max_noise = 0.05)  dataset68$sample_size #> [1] 512 langevitour(dataset68$df)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-69","dir":"Articles","previous_headings":"","what":"Dataset 69","title":"Clustering datasets","text":"","code":"curvy_branching_cluster <- function(sample_size = 200, cluster_size_vec = c(50, 100, 50), with_seed = NULL, num_of_noise_dim = 6,                                                    min_noise = -0.05, max_noise = 0.05) {   # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    # # To check that the assigned sample_size is divided by three   # if ((sample_size%%3) != 0) {   #   stop(\"The sample size should be a product of 4.\")   #    # } else {   #   cluster_size <- sample_size/3   # }     theta <- runif(cluster_size_vec[1], 0.20, 0.90 * pi)    df1 <- tibble::tibble(     x1 = cos(theta) + rnorm(cluster_size_vec[1], 1, 0.06),     x2 = sin(theta) + rnorm(cluster_size_vec[1], 1, 0.06),      x3 = cos(theta) + rnorm(cluster_size_vec[1], 1, 0.06),     x4 = sin(theta) + rnorm(cluster_size_vec[1], 1, 0.06)   )    theta1 <- runif(cluster_size_vec[3], 0.20, 0.90 * pi)    df2 <- tibble::tibble(     x1 = cos(-theta1) + rnorm(cluster_size_vec[3], 1, 0.06),     x2 = sin(-theta1) + rnorm(cluster_size_vec[3], 1, 0.06),      x3 = cos(-theta1) + rnorm(cluster_size_vec[3], 1, 0.06),     x4 = sin(-theta1) + rnorm(cluster_size_vec[3], 1, 0.06)   )     df3 <- tibble::tibble(x1 = rnorm(cluster_size_vec[2], mean = 1, sd = 0.08), x2 = rnorm(cluster_size_vec[2], mean = 1, sd = 0.08), x3=rnorm(cluster_size_vec[2], mean = 1, sd = 0.08), x4=rnorm(cluster_size_vec[2], mean = 1, sd = 0.08))        df <- dplyr::bind_rows(df1, df2, df3)    # To generate column names for noise dimensions   column_names <- paste0(rep(\"x\", num_of_noise_dim), (NCOL(df) + 1):((NCOL(df) + 1) + num_of_noise_dim))    # Initialize an empty list to store the vectors with column   # values   noise_dim_val_list <- list()    for (j in 1:num_of_noise_dim) {     if ((j%%2) == 0) {       noise_dim_val_list[[column_names[j]]] <- runif(sample_size,                                                      min = min_noise, max = max_noise)     } else {       noise_dim_val_list[[column_names[j]]] <- (-1) * runif(sample_size,                                                             min = min_noise, max = max_noise)     }     }    df_noise <- tibble::as_tibble(noise_dim_val_list)   df <- dplyr::bind_cols(df, df_noise)    df  } dataset69 <- curvy_branching_cluster(sample_size = 200, cluster_size_vec = c(50, 100, 50), with_seed = NULL, num_of_noise_dim = 6, min_noise = -0.05, max_noise = 0.05)   langevitour(dataset69)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-70","dir":"Articles","previous_headings":"","what":"Dataset 70","title":"Clustering datasets","text":"","code":"clusters_different_shapes_diff_num_points <- function(sample_size = 400, with_seed = NULL, cluster_size_vec = c(50, 50, 50, 50, 100, 100), num_gussian_clusters = 4, num_non_gaussian_clusters = 2,                                       cluster_sd_gau = 0.05, cluster_sd_non_gau = 0.1, num_dims = 7, a = 2, b = 4) {     # To check the seed is not assigned   if (!is.null(with_seed)) {     set.seed(with_seed)   }    num_clusters <- num_gussian_clusters + num_non_gaussian_clusters      ## Generate Gaussian clusters    # Create a vector of possible values (0 and 1)   values <- c(0, 1)    # Create an expanded grid with 0's and 1's   mean_val_grid <- tidyr::expand_grid(!!!setNames(rep(list(values), num_dims),                                                   paste0(\"mean_dim\", 1:num_dims)))    # To select combinations for assigned number of clusters    mean_val_grid_gau <- mean_val_grid |>     dplyr::slice_sample(n = num_gussian_clusters)    mean_val_grid_non_gau <- mean_val_grid |>     dplyr::slice_sample(n = num_non_gaussian_clusters)     # To generate empty tibble   column_names <- paste0(rep(\"x\", num_dims), 1:num_dims)   df <- tibble(!!!setNames(rep(list(NULL), length(column_names)), column_names))    for (i in 1:num_gussian_clusters) {      # To filter the mean values for specific cluster     mean_val_for_cluster <- mean_val_grid_gau |>       dplyr::filter(dplyr::row_number() == i) |>       unlist(use.names = FALSE)      # Initialize an empty list to store the vectors with column     # values     dim_val_list <- list()      for (j in 1:num_dims) {        dim_val_list[[column_names[j]]] <- rnorm(cluster_size_vec[i], mean = mean_val_for_cluster[j],                                                sd = cluster_sd_gau)      }     # To generate a tibble for a cluster     df_gau_cluster <- tibble::as_tibble(dim_val_list)      df <- dplyr::bind_rows(df, df_gau_cluster)    }        for (i in 1:num_non_gaussian_clusters) {          phi <- runif(cluster_size_vec[(num_clusters - i)], max = 2*pi)     rho <- sqrt(runif(cluster_size_vec[(num_clusters - i)]))      # To filter the mean values for specific cluster     presence_of_elipse_cluster <- mean_val_grid_non_gau |>       dplyr::filter(dplyr::row_number() == i) |>       unlist(use.names = FALSE)      # Initialize an empty list to store the vectors with column     # values     dim_val_list_n <- list()      for (j in 1:num_dims) {       if(presence_of_elipse_cluster[j] == 1){         dim_val_list_n[[column_names[j]]] <- sqrt(a)*rho*cos(phi) + b         ## Surface of poolar coordinate       } else {         dim_val_list_n[[column_names[j]]] <- rnorm(cluster_size_vec[(num_clusters - i)], mean = 0,                                                    sd = cluster_sd_non_gau)        }      }     # To generate a tibble for a cluster     df_non_gau_cluster <- tibble::as_tibble(dim_val_list_n)      df <- dplyr::bind_rows(df, df_non_gau_cluster)    }    df  } dataset70 <- clusters_different_shapes_diff_num_points(sample_size = 1500, with_seed = NULL, cluster_size_vec = c(250, 150, 150, 150, 350, 450), num_gussian_clusters = 4, num_non_gaussian_clusters = 2,                                       cluster_sd_gau = 0.05, cluster_sd_non_gau = 0.1, num_dims = 7, a = 2, b = 4)   langevitour(dataset70)"},{"path":"https://jayanilakshika.github.io/cardinalR/articles/clustering.html","id":"dataset-71","dir":"Articles","previous_headings":"","what":"Dataset 71","title":"Clustering datasets","text":"","code":"# Define the parameters for the sphere radius <- 1  # Radius of the sphere resolution <- 50  # Number of vertices to use for the sphere  # Generate the coordinates for the sphere theta <- seq(0, 2*pi, length.out = resolution) phi <- seq(0, pi, length.out = resolution) coords <- expand.grid(theta = theta, phi = phi)  # Convert spherical coordinates to Cartesian coordinates x <- radius * sin(coords$phi) * cos(coords$theta) y <- radius * sin(coords$phi) * sin(coords$theta) z <- radius * cos(coords$phi)  sphere_df <- tibble::tibble(x1 = x, x2 = y, x3 = z)  langevitour::langevitour(sphere_df)"},{"path":"https://jayanilakshika.github.io/cardinalR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jayani P.G. Lakshika. Author, maintainer. Dianne Cook. Author. Paul Harrison. Author. Michael Lydeamore. Author. Thiyanga S. Talagala. Author.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"P.G. Lakshika J, Cook D, Harrison P, Lydeamore M, S. Talagala T (2024). cardinalR: Collection data structures. R package version 0.1.0, https://github.com/JayaniLakshika/cardinalR.","code":"@Manual{,   title = {cardinalR: Collection of data structures},   author = {Jayani {P.G. Lakshika} and Dianne Cook and Paul Harrison and Michael Lydeamore and Thiyanga {S. Talagala}},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/JayaniLakshika/cardinalR}, }"},{"path":"https://jayanilakshika.github.io/cardinalR/index.html","id":"cardinalr-","dir":"","previous_headings":"","what":"Collection of data structures","title":"Collection of data structures","text":"cardinalR provides functionality generating various high-dimensional datasets.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collection of data structures","text":"can install development version cardinalR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JayaniLakshika/cardinalR\")"},{"path":"https://jayanilakshika.github.io/cardinalR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Collection of data structures","text":"can find high-dimensional view .","code":"library(cardinalR) mobius_clust_data <-  mobius_cluster_with_noise(sample_size = 500, num_noise_dims = 2,                           min_noise = -0.05, max_noise = 0.05)  head(mobius_clust_data, 5) #>            [,1]      [,2]        [,3]        [,4]        [,5] #> [1,]  3.6190498 -3.212243  0.07545382  0.04050106  0.03858323 #> [2,]  0.7685641 -4.293308 -0.32906750 -0.03478474 -0.02713460 #> [3,]  2.1550013 -4.222857 -0.39926915  0.03916184  0.01308043 #> [4,]  1.4419803  3.710829 -0.03566859 -0.02257588 -0.02419622 #> [5,] -3.8336371  1.199429 -0.43352123  0.02474006  0.03636155"},{"path":"https://jayanilakshika.github.io/cardinalR/index.html","id":"about-the-name","dir":"","previous_headings":"","what":"About the name","title":"Collection of data structures","text":"Collection various high-dimensional data structures R","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/index.html","id":"copyright","dir":"","previous_headings":"","what":"Copyright","title":"Collection of data structures","text":"package licensed MIT license.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cell_cycle_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","title":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","text":"function generates cell cycle dataset added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cell_cycle_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","text":"","code":"cell_cycle_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cell_cycle_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cell_cycle_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","text":"matrix containing cell cycle data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cell_cycle_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Cell Cycle Data with Noise — cell_cycle_with_noise","text":"","code":"cell_cycle_data <- cell_cycle_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear__with_noise_and_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","title":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","text":"function generates data clusters curvilinear patterns along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear__with_noise_and_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","text":"","code":"cluster_and_curvilinear__with_noise_and_bkg_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear__with_noise_and_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear__with_noise_and_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear__with_noise_and_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Clusters and Curvilinear Data with Noise — cluster_and_curvilinear__with_noise_and_bkg_noise","text":"","code":"# Generate clusters and curvilinear data with noise with custom parameters data <- cluster_and_curvilinear__with_noise_and_bkg_noise(sample_size = 260, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","title":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","text":"function generates data two clusters, one following curvilinear pattern distributed randomly.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","text":"","code":"cluster_and_curvilinear_with_noise(   sample_size,   cluster_size_vec = NULL,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","text":"sample_size total number data points generated. cluster_size_vec vector specifying number points cluster. provided, sample_size divided equally two clusters. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cluster_and_curvilinear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Cluster and Curvilinear Data with Noise — cluster_and_curvilinear_with_noise","text":"","code":"# Generate cluster and curvilinear data with custom parameters data <- cluster_and_curvilinear_with_noise(sample_size = 300, cluster_size_vec = c(100, 200), num_noise_dims = 3, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Clusters with Different Shapes — clusters_different_shapes","title":"Generate Clusters with Different Shapes — clusters_different_shapes","text":"function generates clusters different shapes, including Gaussian non-Gaussian clusters.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Clusters with Different Shapes — clusters_different_shapes","text":"","code":"clusters_different_shapes(   sample_size,   num_gussian_clusters,   num_non_gaussian_clusters,   cluster_sd_gau,   cluster_sd_non_gau,   num_dims,   a,   b )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Clusters with Different Shapes — clusters_different_shapes","text":"sample_size total number data points generated. num_gussian_clusters number Gaussian clusters generate. num_non_gaussian_clusters number non-Gaussian clusters generate. cluster_sd_gau standard deviation Gaussian clusters. cluster_sd_non_gau standard deviation non-Gaussian clusters. num_dims number dimensions data points. scaling factor non-Gaussian cluster shape. b translation factor non-Gaussian cluster shape.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Clusters with Different Shapes — clusters_different_shapes","text":"matrix containing generated clusters different shapes.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Clusters with Different Shapes — clusters_different_shapes","text":"","code":"# Generate clusters with default parameters data <- clusters_different_shapes(sample_size = 300, num_gussian_clusters = 4, num_non_gaussian_clusters = 2, cluster_sd_gau = 0.05, cluster_sd_non_gau = 0.1, num_dims = 7, a = 2, b = 4)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes_diff_num_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","title":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","text":"function generates clusters different shapes, including Gaussian non-Gaussian clusters, different numbers points cluster.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes_diff_num_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","text":"","code":"clusters_different_shapes_diff_num_points(   sample_size,   cluster_size_vec,   num_gussian_clusters,   num_non_gaussian_clusters,   cluster_sd_gau,   cluster_sd_non_gau,   num_dims,   a,   b )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes_diff_num_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","text":"sample_size total number data points generated. cluster_size_vec vector specifying number points cluster. num_gussian_clusters number Gaussian clusters generate. num_non_gaussian_clusters number non-Gaussian clusters generate. cluster_sd_gau standard deviation Gaussian clusters. cluster_sd_non_gau standard deviation non-Gaussian clusters. num_dims number dimensions data points. scaling factor non-Gaussian cluster shape. b translation factor non-Gaussian cluster shape.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes_diff_num_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","text":"matrix containing generated clusters different shapes different numbers points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/clusters_different_shapes_diff_num_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Clusters with Different Shapes and Different Number of Points — clusters_different_shapes_diff_num_points","text":"","code":"# Generate clusters with default parameters data <- clusters_different_shapes_diff_num_points(sample_size = 400, cluster_size_vec = c(50, 50, 50, 50, 100, 100), num_gussian_clusters = 4, num_non_gaussian_clusters = 2, cluster_sd_gau = 0.05, cluster_sd_non_gau = 0.1, num_dims = 7, a = 2, b = 4)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_3d_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","title":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","text":"function generates points conic spiral 3D space.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_3d_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","text":"","code":"conic_spiral_3d_row(a, b, c, w)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_3d_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","text":"Final radius cone. b Height object. c Inner radius. w Number spirals.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_3d_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","text":"matrix containing generated points conic spiral.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_3d_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a conic spiral in 3D space. — conic_spiral_3d_row","text":"","code":"conic_spiral_3d_row(1, 2, 0.5, 3) #>              x         y        z #> [1,] 0.5138515 0.8786526 1.421446"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","title":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","text":"function generates data points along conic spiral curve optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","text":"","code":"conic_spiral_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","text":"sample_size Total number data points generate. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/conic_spiral_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data points along a conic spiral curve with optional noise. — conic_spiral_with_noise","text":"","code":"conic_spiral_with_noise(sample_size = 100, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #>                 [,1]         [,2]          [,3]         [,4]          [,5] #>   [1,] -0.0207510344 -0.104240813  0.8565423349 -0.040931028 -0.0166046375 #>   [2,] -0.1897456848 -0.153165003  0.3261834884 -0.031813508 -0.0477462039 #>   [3,] -0.1143007122 -0.238729076  0.3190896370  0.013744115 -0.0347793166 #>   [4,] -0.1181911266  0.011985674  0.2303204236  0.007345806  0.0237506682 #>   [5,]  0.0936446329  0.046165714  0.5319536472  0.004771700  0.0283607942 #>   [6,] -0.1736094196 -0.253496995  0.3091928313  0.025875320 -0.0392013968 #>   [7,] -0.0202558489 -0.105323362  0.8628744091 -0.035268743  0.0050412531 #>   [8,] -0.0509061132 -0.140855742  0.8511714180  0.014293427  0.0146856452 #>   [9,]  0.0844611734 -0.287802336  0.3833104242 -0.040356171  0.0025612342 #>  [10,] -0.0977533422  0.079629714  0.7035529646  0.026405083 -0.0012461972 #>  [11,] -0.1368858991  0.031220103  0.7238915232 -0.021452677  0.0239702933 #>  [12,]  0.0206820358  0.101406267  0.6053109085  0.033733608 -0.0493029877 #>  [13,] -0.1949940914 -0.039564701  0.2438396855 -0.013635186  0.0036622147 #>  [14,]  0.1847525264  0.153583430  0.5436209538 -0.019939320 -0.0343417981 #>  [15,]  0.2992513885  0.102976891 -0.0044238195 -0.008601024  0.0357280403 #>  [16,]  0.0285792536 -0.100764988  0.4023204640 -0.022914698  0.0420856933 #>  [17,] -0.0922436934  0.209666098  0.6529501173  0.036285604  0.0108949394 #>  [18,] -0.0353903685  0.340045096  0.1079105155  0.015457681  0.0179547363 #>  [19,] -0.3881403830  0.024112243  0.2548485238  0.014558589  0.0122834559 #>  [20,] -0.0705605545  0.157659972  0.6693351256  0.041608703 -0.0008436582 #>  [21,] -0.0983858086 -0.039369079  0.2868194365 -0.007250921  0.0364216801 #>  [22,]  0.0758128601 -0.069242251  0.4372337578 -0.016189654  0.0360680232 #>  [23,]  0.0863155389  0.106181104  0.5594642800  0.003030169  0.0363069149 #>  [24,] -0.1179893830  0.097122442  0.7048106941 -0.005471833 -0.0362884380 #>  [25,] -0.0442495627 -0.121312338  0.8520263852  0.020322568  0.0485623369 #>  [26,]  0.0749787177 -0.104765762  0.9234217379 -0.039003743 -0.0034347890 #>  [27,] -0.0094250376 -0.105119468  0.8653073284  0.036990595 -0.0393978570 #>  [28,] -0.0391375577  0.155413611  0.6558118381 -0.049432276 -0.0467532965 #>  [29,]  0.1150048046 -0.305982271  0.3954184439  0.047076767  0.0019607651 #>  [30,] -0.0409613807 -0.209908526  0.3799208949  0.042625021  0.0145789130 #>  [31,]  0.1603522208  0.185534476  0.0393569516  0.017738804  0.0193060695 #>  [32,]  0.2320314575  0.139328772  0.5357896381 -0.013839810 -0.0043427410 #>  [33,] -0.0271065134  0.425067054  0.1165777828  0.034145119  0.0453300655 #>  [34,] -0.1762240245 -0.064180096  0.7795144070  0.026294504 -0.0041827540 #>  [35,] -0.0785955201  0.117102130  0.6817192891  0.047181112 -0.0081302271 #>  [36,] -0.1413355355  0.112686375  0.6873163998 -0.028553091  0.0122232551 #>  [37,] -0.1131517581 -0.108788186  0.2931728342 -0.020200717 -0.0168733340 #>  [38,]  0.0812929781  0.247056912  0.5993497488  0.006907545 -0.0099013192 #>  [39,]  0.0054567782  0.103040301  0.6242508078  0.001849898  0.0051537106 #>  [40,]  0.3084933922  0.187887130  0.0151933319  0.020957683  0.0399808738 #>  [41,] -0.1820643836  0.054552746  0.7202142267 -0.046946775  0.0086850211 #>  [42,]  0.4933407216  0.033592614 -0.0003778863  0.014940627  0.0036506869 #>  [43,] -0.0582192903  0.117644906  0.6524890165 -0.034076899  0.0397402511 #>  [44,] -0.2834242770 -0.115406203  0.3014162360  0.016994147 -0.0025732327 #>  [45,]  0.0043549958 -0.130942869  0.8813984699  0.003986424  0.0191004558 #>  [46,] -0.1878736166  0.036518240  0.2124275530 -0.041816719 -0.0366099922 #>  [47,]  0.1958612497  0.073825079  0.0564893513 -0.012845770 -0.0099098236 #>  [48,]  0.1838460121  0.102819694  0.5262634252 -0.035709347 -0.0186177733 #>  [49,] -0.0315737786  0.108513293  0.1579299517 -0.020558316 -0.0214005019 #>  [50,] -0.1721295318  0.280490422  0.1932942820 -0.013372063  0.0148630873 #>  [51,]  0.0788930509  0.233502261  0.5918898853 -0.023581988 -0.0269665238 #>  [52,]  0.1694746893 -0.149592876  0.4600479651  0.004148794  0.0278712874 #>  [53,] -0.1847249782 -0.275992943  0.3427454146 -0.017790378 -0.0391516257 #>  [54,]  0.0892903413  0.106431130  0.0875795412 -0.036711160  0.0028530608 #>  [55,]  0.1645865229  0.369605296  0.0703729169  0.031528962  0.0459047012 #>  [56,] -0.1504657718 -0.099165182  0.7979626454 -0.047778206 -0.0427526213 #>  [57,] -0.0344767793  0.235312666  0.6417089871 -0.020413165 -0.0177211324 #>  [58,] -0.2142710700  0.320668947  0.1900372363  0.049922821 -0.0332402042 #>  [59,] -0.3006092328 -0.108657671  0.2972390053  0.005551628  0.0373407168 #>  [60,] -0.0386599964  0.129484628  0.1645809073  0.003388784  0.0380526948 #>  [61,] -0.1282222951  0.308885058  0.1315751715  0.014668755  0.0306826322 #>  [62,] -0.0006501423 -0.102529206  0.8727471090 -0.048575067 -0.0436701143 #>  [63,]  0.0176619014 -0.259057689  0.3993007277  0.006334455  0.0490626896 #>  [64,]  0.1299246533  0.059083418  0.5214930050 -0.027062034 -0.0108800165 #>  [65,]  0.0958308666 -0.056450272  0.4652848015  0.029108361 -0.0397776565 #>  [66,] -0.1297398466  0.011551467  0.2573860312 -0.016626037  0.0134091606 #>  [67,]  0.0164506261  0.437899112  0.1325599119 -0.023652252 -0.0336862096 #>  [68,]  0.2447696416  0.041203906  0.5000619148  0.008318395  0.0317193163 #>  [69,] -0.0108711168  0.104407131  0.6374807026  0.009927869 -0.0266226169 #>  [70,] -0.1297792438 -0.212311034  0.3101906556  0.038506698  0.0008334388 #>  [71,] -0.0529094738 -0.187773727  0.3729977629 -0.029403563 -0.0343323008 #>  [72,]  0.0084603408 -0.107956268  0.8840930695  0.002679979 -0.0015254343 #>  [73,] -0.3829944128  0.052062855  0.2278876711 -0.016571605  0.0038303378 #>  [74,]  0.0559559254  0.433386783  0.1268646537  0.015887003 -0.0345719742 #>  [75,]  0.2216785679  0.009417408  0.0326095714  0.033088708  0.0091628966 #>  [76,] -0.0615413790  0.387791568  0.1572226907 -0.026307247  0.0440838093 #>  [77,]  0.0410575835 -0.091390362  0.4096653366  0.047253790  0.0450331292 #>  [78,] -0.0262710353 -0.127099269  0.8632684635  0.002374215  0.0490162657 #>  [79,] -0.0776551452 -0.071562970  0.8124199381  0.016724799 -0.0397617172 #>  [80,]  0.3888382297  0.108443188  0.0476115656 -0.017373281  0.0439050785 #>  [81,]  0.1357549598  0.149367412  0.0398247867  0.035518221  0.0315915325 #>  [82,]  0.0540559989 -0.104221499  0.4032856691 -0.044805381 -0.0239363016 #>  [83,]  0.0492343745 -0.089248197  0.9138656132 -0.006721843  0.0038314486 #>  [84,]  0.2359720686  0.160597931  0.0778600291 -0.041630979 -0.0303803701 #>  [85,] -0.0515612919  0.101682700  0.1516719274  0.046272723 -0.0183495949 #>  [86,]  0.0939973131 -0.042339121  0.9672236489 -0.012299518 -0.0470291610 #>  [87,]  0.1040000357 -0.087639851  0.4312430230 -0.001424167  0.0249677304 #>  [88,]  0.2695428462  0.046531530  0.5039892468 -0.045294641 -0.0070858952 #>  [89,]  0.2962495377  0.285824760  0.0386123707  0.033631678 -0.0094294017 #>  [90,] -0.0087333011  0.179379999  0.6170887788  0.025637897 -0.0481999118 #>  [91,]  0.2379382419 -0.213885036  0.4460636535 -0.039511600 -0.0094946513 #>  [92,] -0.0905929700 -0.042616128  0.2840734843  0.039075641  0.0253177606 #>  [93,] -0.1706739229  0.060549401  0.7150527081  0.037107969  0.0161232012 #>  [94,] -0.1360831914 -0.033029253  0.2849462431  0.045537271  0.0454102998 #>  [95,] -0.1008578029 -0.033352669  0.7790467544 -0.048247618  0.0063011053 #>  [96,] -0.0385805443  0.093954275  0.6583300483  0.034860211 -0.0048989431 #>  [97,] -0.0117020517  0.106078272  0.6386217548  0.031360758  0.0311486642 #>  [98,]  0.0948303088 -0.031769684  0.9743277327  0.035160720 -0.0444968065 #>  [99,] -0.0372878187  0.093342343  0.6565817882 -0.039983402  0.0338841403 #> [100,]  0.1380934928  0.119572152  0.0816276323  0.004460126 -0.0494551719 #>                 [,6]          [,7] #>   [1,] -0.0110229467  0.0280678025 #>   [2,]  0.0326227301  0.0004336454 #>   [3,] -0.0325215473  0.0229241136 #>   [4,]  0.0068436270 -0.0292481343 #>   [5,]  0.0423433360  0.0054062088 #>   [6,] -0.0485084417  0.0456845059 #>   [7,] -0.0462298115  0.0381087259 #>   [8,]  0.0140330959  0.0279816974 #>   [9,]  0.0095162804 -0.0488384327 #>  [10,]  0.0483097026  0.0260525496 #>  [11,]  0.0056718194  0.0321702650 #>  [12,]  0.0258407044  0.0480019712 #>  [13,] -0.0454658790  0.0013045795 #>  [14,]  0.0369926601  0.0180185257 #>  [15,] -0.0422524688 -0.0086155087 #>  [16,] -0.0139214773 -0.0418833989 #>  [17,] -0.0429054409  0.0409441932 #>  [18,]  0.0354668033 -0.0329860271 #>  [19,] -0.0006494006 -0.0349944814 #>  [20,]  0.0468205287 -0.0090962249 #>  [21,] -0.0320514872 -0.0482844761 #>  [22,]  0.0037088885 -0.0326037734 #>  [23,] -0.0296484943 -0.0213717327 #>  [24,]  0.0304009301  0.0271356672 #>  [25,]  0.0288791345 -0.0199058671 #>  [26,]  0.0427317785 -0.0067966312 #>  [27,] -0.0173631754 -0.0227669221 #>  [28,]  0.0426639666  0.0259825175 #>  [29,] -0.0119858269 -0.0466565744 #>  [30,]  0.0001357275 -0.0166667101 #>  [31,] -0.0394884266 -0.0436671678 #>  [32,]  0.0428039743 -0.0390939416 #>  [33,]  0.0490397459  0.0292753518 #>  [34,]  0.0136631798  0.0245399739 #>  [35,] -0.0158443863 -0.0438238688 #>  [36,]  0.0291489437 -0.0189134000 #>  [37,]  0.0095626371 -0.0306682875 #>  [38,]  0.0155196347  0.0183028130 #>  [39,] -0.0203011862  0.0451175238 #>  [40,] -0.0387987648 -0.0298013397 #>  [41,] -0.0382789159 -0.0352702702 #>  [42,] -0.0178381897 -0.0475535302 #>  [43,]  0.0015231580  0.0486317588 #>  [44,] -0.0451707703 -0.0141817606 #>  [45,] -0.0315645338  0.0394274886 #>  [46,] -0.0321344066 -0.0425195831 #>  [47,]  0.0199425494  0.0148866777 #>  [48,]  0.0495089726  0.0361127549 #>  [49,]  0.0271934611 -0.0157036036 #>  [50,] -0.0075116255  0.0462665078 #>  [51,]  0.0132151721 -0.0145536509 #>  [52,]  0.0457658006 -0.0125137276 #>  [53,] -0.0375053124 -0.0002467945 #>  [54,]  0.0291964776 -0.0161143983 #>  [55,] -0.0238335003 -0.0264748553 #>  [56,]  0.0370033091 -0.0390767797 #>  [57,]  0.0328116854  0.0096893140 #>  [58,] -0.0454200732 -0.0098315520 #>  [59,]  0.0055158303 -0.0325448072 #>  [60,]  0.0031474810  0.0409176209 #>  [61,]  0.0294143023  0.0076397389 #>  [62,]  0.0228433051  0.0296082929 #>  [63,] -0.0462891246 -0.0299848676 #>  [64,] -0.0066806800 -0.0334942108 #>  [65,]  0.0169367977  0.0310398541 #>  [66,]  0.0444890694  0.0366358405 #>  [67,]  0.0252456949 -0.0383800159 #>  [68,] -0.0399235833 -0.0017355042 #>  [69,]  0.0236036867 -0.0294951793 #>  [70,] -0.0077346393  0.0392258976 #>  [71,] -0.0394991875  0.0337399670 #>  [72,]  0.0397848870  0.0329826276 #>  [73,]  0.0295114224  0.0441331063 #>  [74,] -0.0172039648  0.0319469451 #>  [75,]  0.0487822811  0.0029284820 #>  [76,] -0.0165812812  0.0264666552 #>  [77,] -0.0068373466 -0.0416067633 #>  [78,] -0.0342513664 -0.0107712212 #>  [79,] -0.0347471705  0.0151850512 #>  [80,]  0.0485392787 -0.0047690683 #>  [81,] -0.0349301712 -0.0050426709 #>  [82,]  0.0166795245  0.0311217160 #>  [83,] -0.0329281465 -0.0444642481 #>  [84,] -0.0354682682  0.0006159852 #>  [85,] -0.0059760903 -0.0431443637 #>  [86,] -0.0266563027 -0.0276904524 #>  [87,] -0.0023973350  0.0206516870 #>  [88,] -0.0339686426  0.0191506107 #>  [89,]  0.0467595117 -0.0058095852 #>  [90,]  0.0203179860  0.0220340129 #>  [91,] -0.0009649931  0.0196805966 #>  [92,] -0.0186282847 -0.0347807297 #>  [93,] -0.0322077814  0.0182979421 #>  [94,]  0.0299500553 -0.0246130962 #>  [95,] -0.0055100260 -0.0390620256 #>  [96,]  0.0312982025  0.0029677907 #>  [97,]  0.0341319787  0.0313811888 #>  [98,] -0.0423835285  0.0491580483 #>  [99,] -0.0055301218  0.0393861586 #> [100,] -0.0246701091  0.0439624317"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cube_3d_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 3D cube with optional noise. — cube_3d_with_noise","title":"Generate a 3D cube with optional noise. — cube_3d_with_noise","text":"function generates 3D cube along optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cube_3d_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 3D cube with optional noise. — cube_3d_with_noise","text":"","code":"cube_3d_with_noise(num_of_effective_dims, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cube_3d_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 3D cube with optional noise. — cube_3d_with_noise","text":"num_of_effective_dims Number effective dimensions (default 3 3D cube). num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cube_3d_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 3D cube with optional noise. — cube_3d_with_noise","text":"list containing generated data matrix sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/cube_3d_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a 3D cube with optional noise. — cube_3d_with_noise","text":"","code":"cube_3d_with_noise(num_of_effective_dims = 3, num_noise_dims = 2, min_noise = -0.01, max_noise = 0.01) #> $df #>               Var1       Var2       Var3                             #>    [1,] 0.00000000 0.00000000 0.00000000  3.338706e-03  1.340343e-03 #>    [2,] 0.09090909 0.00000000 0.00000000 -6.546311e-03  2.762216e-03 #>    [3,] 0.18181818 0.00000000 0.00000000  6.797468e-03  3.849849e-03 #>    [4,] 0.27272727 0.00000000 0.00000000  6.817197e-03 -5.861564e-03 #>    [5,] 0.36363636 0.00000000 0.00000000  5.006641e-04  5.210477e-03 #>    [6,] 0.45454545 0.00000000 0.00000000  4.401832e-03  8.160865e-04 #>    [7,] 0.54545455 0.00000000 0.00000000 -2.379234e-03 -4.500046e-03 #>    [8,] 0.63636364 0.00000000 0.00000000  5.089814e-03  4.633992e-04 #>    [9,] 0.72727273 0.00000000 0.00000000  6.838200e-03  8.326927e-03 #>   [10,] 0.81818182 0.00000000 0.00000000 -5.991592e-03 -3.378551e-03 #>   [11,] 0.90909091 0.00000000 0.00000000 -2.422212e-03 -5.290145e-03 #>   [12,] 1.00000000 0.00000000 0.00000000 -2.840835e-03  7.340458e-03 #>   [13,] 0.00000000 0.09090909 0.00000000  2.148876e-03  3.463960e-03 #>   [14,] 0.09090909 0.09090909 0.00000000  1.195139e-04 -8.843208e-04 #>   [15,] 0.18181818 0.09090909 0.00000000 -1.962115e-03  4.795632e-03 #>   [16,] 0.27272727 0.09090909 0.00000000  4.639943e-03 -6.881206e-03 #>   [17,] 0.36363636 0.09090909 0.00000000 -1.403904e-03 -8.768471e-03 #>   [18,] 0.45454545 0.09090909 0.00000000 -5.998599e-03 -5.684045e-03 #>   [19,] 0.54545455 0.09090909 0.00000000  8.704346e-03  5.409437e-04 #>   [20,] 0.63636364 0.09090909 0.00000000  3.714683e-03  7.671540e-03 #>   [21,] 0.72727273 0.09090909 0.00000000  6.317331e-03 -7.177884e-03 #>   [22,] 0.81818182 0.09090909 0.00000000 -5.773757e-03 -3.641463e-03 #>   [23,] 0.90909091 0.09090909 0.00000000 -6.187146e-03  5.286492e-03 #>   [24,] 1.00000000 0.09090909 0.00000000 -4.608102e-03  3.116792e-03 #>   [25,] 0.00000000 0.18181818 0.00000000 -3.261306e-03  6.873548e-03 #>   [26,] 0.09090909 0.18181818 0.00000000  9.078490e-03 -2.709366e-03 #>   [27,] 0.18181818 0.18181818 0.00000000 -8.020929e-03 -2.664116e-03 #>   [28,] 0.27272727 0.18181818 0.00000000 -2.569771e-03  7.016483e-03 #>   [29,] 0.36363636 0.18181818 0.00000000 -4.890031e-04 -1.240564e-03 #>   [30,] 0.45454545 0.18181818 0.00000000 -9.212393e-03 -9.822400e-03 #>   [31,] 0.54545455 0.18181818 0.00000000  9.948457e-04  6.324488e-03 #>   [32,] 0.63636364 0.18181818 0.00000000 -3.808590e-03 -7.434081e-03 #>   [33,] 0.72727273 0.18181818 0.00000000 -1.117492e-03  9.626755e-03 #>   [34,] 0.81818182 0.18181818 0.00000000 -4.603306e-03 -7.461932e-03 #>   [35,] 0.90909091 0.18181818 0.00000000  4.466242e-03  8.453711e-03 #>   [36,] 1.00000000 0.18181818 0.00000000 -2.111148e-03 -4.152985e-03 #>   [37,] 0.00000000 0.27272727 0.00000000 -9.111000e-03  8.155621e-03 #>   [38,] 0.09090909 0.27272727 0.00000000 -8.796739e-03  6.190234e-03 #>   [39,] 0.18181818 0.27272727 0.00000000 -3.287611e-03  5.949535e-03 #>   [40,] 0.27272727 0.27272727 0.00000000 -1.543737e-03  6.530079e-03 #>   [41,] 0.36363636 0.27272727 0.00000000 -4.473242e-03  6.593104e-03 #>   [42,] 0.45454545 0.27272727 0.00000000 -9.989900e-03  2.543377e-03 #>   [43,] 0.54545455 0.27272727 0.00000000  1.182038e-03 -5.410315e-03 #>   [44,] 0.63636364 0.27272727 0.00000000  7.335702e-03  8.318931e-03 #>   [45,] 0.72727273 0.27272727 0.00000000 -4.384227e-03  3.748887e-03 #>   [46,] 0.81818182 0.27272727 0.00000000 -3.772453e-03  6.536436e-03 #>   [47,] 0.90909091 0.27272727 0.00000000  5.140798e-03 -3.876630e-03 #>   [48,] 1.00000000 0.27272727 0.00000000  9.337555e-03 -4.913513e-03 #>   [49,] 0.00000000 0.36363636 0.00000000  1.502558e-03  4.844102e-03 #>   [50,] 0.09090909 0.36363636 0.00000000 -3.153929e-03 -4.485962e-03 #>   [51,] 0.18181818 0.36363636 0.00000000 -7.656595e-03 -6.672706e-03 #>   [52,] 0.27272727 0.36363636 0.00000000 -9.191319e-03 -4.948695e-03 #>   [53,] 0.36363636 0.36363636 0.00000000 -2.950452e-03 -7.567628e-04 #>   [54,] 0.45454545 0.36363636 0.00000000 -8.142336e-03 -2.412958e-03 #>   [55,] 0.54545455 0.36363636 0.00000000  1.549343e-03 -7.955925e-03 #>   [56,] 0.63636364 0.36363636 0.00000000 -2.349410e-03 -5.037707e-03 #>   [57,] 0.72727273 0.36363636 0.00000000  8.618261e-03  8.751506e-03 #>   [58,] 0.81818182 0.36363636 0.00000000  1.947216e-04  7.362934e-03 #>   [59,] 0.90909091 0.36363636 0.00000000  6.170964e-03 -1.506232e-03 #>   [60,] 1.00000000 0.36363636 0.00000000  1.726120e-03  3.126197e-03 #>   [61,] 0.00000000 0.45454545 0.00000000 -9.736722e-03  6.892282e-03 #>   [62,] 0.09090909 0.45454545 0.00000000  2.308595e-04 -5.528029e-03 #>   [63,] 0.18181818 0.45454545 0.00000000  7.527487e-03 -2.212911e-03 #>   [64,] 0.27272727 0.45454545 0.00000000 -3.016018e-03  4.162691e-03 #>   [65,] 0.36363636 0.45454545 0.00000000 -7.155995e-03 -4.855250e-03 #>   [66,] 0.45454545 0.45454545 0.00000000  8.887704e-03  2.332545e-03 #>   [67,] 0.54545455 0.45454545 0.00000000 -7.872581e-03  3.016097e-03 #>   [68,] 0.63636364 0.45454545 0.00000000  3.254712e-03  6.856532e-03 #>   [69,] 0.72727273 0.45454545 0.00000000  1.972555e-03 -8.385694e-05 #>   [70,] 0.81818182 0.45454545 0.00000000 -5.731767e-04 -1.037723e-03 #>   [71,] 0.90909091 0.45454545 0.00000000 -2.834533e-03  6.608048e-04 #>   [72,] 1.00000000 0.45454545 0.00000000 -7.803664e-03 -8.302864e-03 #>   [73,] 0.00000000 0.54545455 0.00000000 -6.344470e-03  8.144457e-04 #>   [74,] 0.09090909 0.54545455 0.00000000 -7.009803e-03 -4.063778e-03 #>   [75,] 0.18181818 0.54545455 0.00000000  6.099812e-03 -8.880621e-03 #>   [76,] 0.27272727 0.54545455 0.00000000 -7.396656e-03  4.343492e-03 #>   [77,] 0.36363636 0.54545455 0.00000000  1.753378e-03 -9.683281e-03 #>   [78,] 0.45454545 0.54545455 0.00000000  1.266540e-03  5.604863e-03 #>   [79,] 0.54545455 0.54545455 0.00000000 -3.500636e-03  3.188123e-03 #>   [80,] 0.63636364 0.54545455 0.00000000 -8.617061e-03 -3.527090e-03 #>   [81,] 0.72727273 0.54545455 0.00000000 -3.113339e-04 -9.797913e-03 #>   [82,] 0.81818182 0.54545455 0.00000000  9.243498e-03  8.832393e-04 #>   [83,] 0.90909091 0.54545455 0.00000000 -2.928226e-03 -8.453746e-03 #>   [84,] 1.00000000 0.54545455 0.00000000 -9.722506e-04 -8.180679e-03 #>   [85,] 0.00000000 0.63636364 0.00000000  2.378751e-03  7.847246e-04 #>   [86,] 0.09090909 0.63636364 0.00000000  7.311191e-04  7.005618e-04 #>   [87,] 0.18181818 0.63636364 0.00000000  9.944537e-03  7.063267e-03 #>   [88,] 0.27272727 0.63636364 0.00000000  5.351835e-03 -4.485782e-03 #>   [89,] 0.36363636 0.63636364 0.00000000  2.070914e-03 -3.678135e-03 #>   [90,] 0.45454545 0.63636364 0.00000000 -6.502969e-03 -8.839196e-03 #>   [91,] 0.54545455 0.63636364 0.00000000  2.064528e-03 -9.566419e-03 #>   [92,] 0.63636364 0.63636364 0.00000000  2.910660e-03 -1.565318e-03 #>   [93,] 0.72727273 0.63636364 0.00000000  7.979452e-03 -6.509472e-03 #>   [94,] 0.81818182 0.63636364 0.00000000 -9.078015e-03  6.666113e-03 #>   [95,] 0.90909091 0.63636364 0.00000000 -1.384727e-03 -4.499946e-03 #>   [96,] 1.00000000 0.63636364 0.00000000  5.405317e-03  1.712780e-03 #>   [97,] 0.00000000 0.72727273 0.00000000 -8.585767e-03 -9.603438e-03 #>   [98,] 0.09090909 0.72727273 0.00000000 -6.461233e-03  2.937043e-04 #>   [99,] 0.18181818 0.72727273 0.00000000  4.162258e-03 -1.302560e-04 #>  [100,] 0.27272727 0.72727273 0.00000000  2.578711e-03  9.063946e-03 #>  [101,] 0.36363636 0.72727273 0.00000000  6.726235e-03  8.500851e-04 #>  [102,] 0.45454545 0.72727273 0.00000000  4.208279e-03 -2.526129e-03 #>  [103,] 0.54545455 0.72727273 0.00000000  1.642793e-03  3.362851e-03 #>  [104,] 0.63636364 0.72727273 0.00000000  8.269285e-03 -6.619427e-03 #>  [105,] 0.72727273 0.72727273 0.00000000  6.121110e-03  3.680596e-03 #>  [106,] 0.81818182 0.72727273 0.00000000  3.253616e-03 -2.930506e-03 #>  [107,] 0.90909091 0.72727273 0.00000000  5.129448e-03  7.434795e-03 #>  [108,] 1.00000000 0.72727273 0.00000000  8.784345e-04 -3.181687e-03 #>  [109,] 0.00000000 0.81818182 0.00000000 -5.158430e-03  7.671300e-03 #>  [110,] 0.09090909 0.81818182 0.00000000 -9.079172e-03 -3.100374e-03 #>  [111,] 0.18181818 0.81818182 0.00000000 -9.495773e-03  1.874599e-03 #>  [112,] 0.27272727 0.81818182 0.00000000 -2.981287e-03 -6.305350e-03 #>  [113,] 0.36363636 0.81818182 0.00000000 -5.766827e-04 -5.977264e-03 #>  [114,] 0.45454545 0.81818182 0.00000000 -2.737282e-04  6.969930e-03 #>  [115,] 0.54545455 0.81818182 0.00000000  9.855197e-03  4.474231e-03 #>  [116,] 0.63636364 0.81818182 0.00000000  9.181915e-03 -9.720221e-03 #>  [117,] 0.72727273 0.81818182 0.00000000 -6.828037e-03  6.304721e-03 #>  [118,] 0.81818182 0.81818182 0.00000000  6.949761e-03  7.616670e-03 #>  [119,] 0.90909091 0.81818182 0.00000000 -3.867806e-03  9.418501e-03 #>  [120,] 1.00000000 0.81818182 0.00000000 -6.358324e-03 -1.382759e-03 #>  [121,] 0.00000000 0.90909091 0.00000000 -9.592816e-04  2.487032e-03 #>  [122,] 0.09090909 0.90909091 0.00000000 -4.382039e-03  1.191316e-03 #>  [123,] 0.18181818 0.90909091 0.00000000 -2.738823e-03  3.790104e-03 #>  [124,] 0.27272727 0.90909091 0.00000000 -6.539967e-03 -7.046072e-03 #>  [125,] 0.36363636 0.90909091 0.00000000 -3.919413e-03  2.968252e-03 #>  [126,] 0.45454545 0.90909091 0.00000000  1.968791e-03  8.526738e-03 #>  [127,] 0.54545455 0.90909091 0.00000000 -9.928986e-03  5.840951e-03 #>  [128,] 0.63636364 0.90909091 0.00000000 -6.069910e-03 -5.008866e-04 #>  [129,] 0.72727273 0.90909091 0.00000000  5.574650e-04  5.359487e-03 #>  [130,] 0.81818182 0.90909091 0.00000000 -9.584943e-03 -5.588690e-03 #>  [131,] 0.90909091 0.90909091 0.00000000  7.928775e-03  7.922344e-03 #>  [132,] 1.00000000 0.90909091 0.00000000  3.289076e-03  7.912471e-03 #>  [133,] 0.00000000 1.00000000 0.00000000  7.835356e-03 -9.688689e-03 #>  [134,] 0.09090909 1.00000000 0.00000000  7.857580e-03  6.994751e-03 #>  [135,] 0.18181818 1.00000000 0.00000000  2.166801e-03  4.483784e-03 #>  [136,] 0.27272727 1.00000000 0.00000000 -9.440844e-03 -7.419533e-03 #>  [137,] 0.36363636 1.00000000 0.00000000 -1.331053e-03  8.562428e-03 #>  [138,] 0.45454545 1.00000000 0.00000000  3.542506e-03  7.359805e-04 #>  [139,] 0.54545455 1.00000000 0.00000000 -9.029733e-03 -1.835929e-03 #>  [140,] 0.63636364 1.00000000 0.00000000 -7.629746e-03 -1.137468e-03 #>  [141,] 0.72727273 1.00000000 0.00000000 -2.598925e-03 -6.119676e-03 #>  [142,] 0.81818182 1.00000000 0.00000000 -1.942562e-03 -5.398416e-03 #>  [143,] 0.90909091 1.00000000 0.00000000  4.160635e-03 -1.705022e-03 #>  [144,] 1.00000000 1.00000000 0.00000000  6.193213e-04  8.286691e-03 #>  [145,] 0.00000000 0.00000000 0.09090909  8.108969e-03  7.401032e-03 #>  [146,] 0.09090909 0.00000000 0.09090909  4.926899e-03 -6.326571e-03 #>  [147,] 0.18181818 0.00000000 0.09090909 -9.047458e-03  5.021566e-03 #>  [148,] 0.27272727 0.00000000 0.09090909  6.636046e-03 -3.357327e-03 #>  [149,] 0.36363636 0.00000000 0.09090909 -4.078853e-03 -4.405051e-03 #>  [150,] 0.45454545 0.00000000 0.09090909 -2.855479e-03  3.614726e-03 #>  [151,] 0.54545455 0.00000000 0.09090909  4.096120e-03 -6.592569e-03 #>  [152,] 0.63636364 0.00000000 0.09090909 -6.196706e-03  2.041754e-03 #>  [153,] 0.72727273 0.00000000 0.09090909 -1.437873e-03  1.902934e-03 #>  [154,] 0.81818182 0.00000000 0.09090909  8.706813e-03  1.321132e-04 #>  [155,] 0.90909091 0.00000000 0.09090909  8.822561e-03 -1.829064e-03 #>  [156,] 1.00000000 0.00000000 0.09090909 -2.983457e-03 -5.041891e-03 #>  [157,] 0.00000000 0.09090909 0.09090909 -1.268285e-03  1.985645e-03 #>  [158,] 0.09090909 0.09090909 0.09090909 -3.007725e-04 -2.141776e-04 #>  [159,] 0.18181818 0.09090909 0.09090909 -5.994636e-03 -9.493845e-03 #>  [160,] 0.27272727 0.09090909 0.09090909  2.082656e-03 -1.063340e-03 #>  [161,] 0.36363636 0.09090909 0.09090909  7.739782e-03 -8.757637e-03 #>  [162,] 0.45454545 0.09090909 0.09090909 -4.180495e-03 -7.187452e-03 #>  [163,] 0.54545455 0.09090909 0.09090909 -3.270615e-03  8.354244e-03 #>  [164,] 0.63636364 0.09090909 0.09090909  3.355443e-03 -5.036033e-04 #>  [165,] 0.72727273 0.09090909 0.09090909  3.781881e-03 -1.745789e-03 #>  [166,] 0.81818182 0.09090909 0.09090909  4.136482e-03 -1.568247e-03 #>  [167,] 0.90909091 0.09090909 0.09090909 -9.356684e-03 -8.849189e-03 #>  [168,] 1.00000000 0.09090909 0.09090909  2.918536e-03  3.190561e-03 #>  [169,] 0.00000000 0.18181818 0.09090909  9.711787e-03  2.718792e-03 #>  [170,] 0.09090909 0.18181818 0.09090909  4.063980e-04 -9.089916e-03 #>  [171,] 0.18181818 0.18181818 0.09090909 -7.128111e-03  1.588866e-03 #>  [172,] 0.27272727 0.18181818 0.09090909  6.245817e-04 -9.729343e-03 #>  [173,] 0.36363636 0.18181818 0.09090909 -8.222536e-03 -6.161319e-03 #>  [174,] 0.45454545 0.18181818 0.09090909 -8.815763e-03  2.303096e-03 #>  [175,] 0.54545455 0.18181818 0.09090909 -9.175797e-03 -9.395251e-03 #>  [176,] 0.63636364 0.18181818 0.09090909  2.554025e-04 -6.951740e-03 #>  [177,] 0.72727273 0.18181818 0.09090909  9.790020e-03 -3.833368e-03 #>  [178,] 0.81818182 0.18181818 0.09090909  4.720238e-04  3.844563e-03 #>  [179,] 0.90909091 0.18181818 0.09090909  7.039469e-03 -9.188794e-03 #>  [180,] 1.00000000 0.18181818 0.09090909  7.846537e-03  8.677845e-03 #>  [181,] 0.00000000 0.27272727 0.09090909  6.011828e-03  2.417435e-03 #>  [182,] 0.09090909 0.27272727 0.09090909 -4.817229e-04 -9.020466e-03 #>  [183,] 0.18181818 0.27272727 0.09090909  7.618709e-03 -2.060044e-03 #>  [184,] 0.27272727 0.27272727 0.09090909 -2.798478e-03  1.083264e-03 #>  [185,] 0.36363636 0.27272727 0.09090909  1.671557e-03 -1.485003e-04 #>  [186,] 0.45454545 0.27272727 0.09090909  6.270071e-03 -9.670170e-03 #>  [187,] 0.54545455 0.27272727 0.09090909  1.214684e-03  2.071132e-03 #>  [188,] 0.63636364 0.27272727 0.09090909 -6.829273e-03 -5.141818e-03 #>  [189,] 0.72727273 0.27272727 0.09090909  3.154370e-03  8.424885e-03 #>  [190,] 0.81818182 0.27272727 0.09090909  5.403425e-03  4.796349e-03 #>  [191,] 0.90909091 0.27272727 0.09090909  8.392022e-04 -5.465115e-03 #>  [192,] 1.00000000 0.27272727 0.09090909  6.113598e-03 -1.769467e-03 #>  [193,] 0.00000000 0.36363636 0.09090909  1.188562e-03 -2.940498e-03 #>  [194,] 0.09090909 0.36363636 0.09090909 -5.907446e-03  1.784569e-03 #>  [195,] 0.18181818 0.36363636 0.09090909  5.750537e-03 -5.372765e-03 #>  [196,] 0.27272727 0.36363636 0.09090909  6.752299e-03 -5.247131e-03 #>  [197,] 0.36363636 0.36363636 0.09090909  2.915612e-03  1.790831e-03 #>  [198,] 0.45454545 0.36363636 0.09090909  2.015163e-03  8.401166e-03 #>  [199,] 0.54545455 0.36363636 0.09090909  5.494286e-03 -8.197715e-03 #>  [200,] 0.63636364 0.36363636 0.09090909 -1.869532e-03  6.830728e-03 #>  [201,] 0.72727273 0.36363636 0.09090909  7.916574e-03 -8.798374e-03 #>  [202,] 0.81818182 0.36363636 0.09090909 -5.701014e-03  6.168883e-03 #>  [203,] 0.90909091 0.36363636 0.09090909  6.992426e-03 -6.448532e-03 #>  [204,] 1.00000000 0.36363636 0.09090909  9.238845e-03  7.378774e-03 #>  [205,] 0.00000000 0.45454545 0.09090909  4.270952e-03  9.528130e-03 #>  [206,] 0.09090909 0.45454545 0.09090909  7.323758e-03 -7.189135e-03 #>  [207,] 0.18181818 0.45454545 0.09090909 -8.202666e-03 -9.981435e-03 #>  [208,] 0.27272727 0.45454545 0.09090909 -1.699772e-03 -4.508213e-03 #>  [209,] 0.36363636 0.45454545 0.09090909 -7.515909e-03  6.858999e-03 #>  [210,] 0.45454545 0.45454545 0.09090909 -5.724410e-03 -1.414266e-03 #>  [211,] 0.54545455 0.45454545 0.09090909  2.896659e-03 -9.100313e-03 #>  [212,] 0.63636364 0.45454545 0.09090909  6.707193e-03  1.583823e-03 #>  [213,] 0.72727273 0.45454545 0.09090909  2.962285e-04 -5.611183e-03 #>  [214,] 0.81818182 0.45454545 0.09090909  2.173230e-03  7.376844e-03 #>  [215,] 0.90909091 0.45454545 0.09090909  8.943219e-03  5.508625e-03 #>  [216,] 1.00000000 0.45454545 0.09090909 -7.064499e-03  3.203962e-03 #>  [217,] 0.00000000 0.54545455 0.09090909  7.729732e-03 -7.874401e-03 #>  [218,] 0.09090909 0.54545455 0.09090909 -9.400823e-03 -8.210079e-03 #>  [219,] 0.18181818 0.54545455 0.09090909  5.081030e-03  7.088184e-03 #>  [220,] 0.27272727 0.54545455 0.09090909 -6.888654e-04 -4.524089e-03 #>  [221,] 0.36363636 0.54545455 0.09090909  7.313096e-03  1.212702e-03 #>  [222,] 0.45454545 0.54545455 0.09090909  2.614738e-03 -5.023617e-03 #>  [223,] 0.54545455 0.54545455 0.09090909  9.654657e-03  8.504504e-03 #>  [224,] 0.63636364 0.54545455 0.09090909 -2.394549e-03  1.893548e-03 #>  [225,] 0.72727273 0.54545455 0.09090909 -5.652636e-03 -3.137866e-03 #>  [226,] 0.81818182 0.54545455 0.09090909 -4.208706e-03  7.265653e-03 #>  [227,] 0.90909091 0.54545455 0.09090909 -6.223573e-03  7.035677e-03 #>  [228,] 1.00000000 0.54545455 0.09090909 -5.934781e-04  9.282638e-03 #>  [229,] 0.00000000 0.63636364 0.09090909  6.328080e-03 -4.070742e-03 #>  [230,] 0.09090909 0.63636364 0.09090909  2.942379e-03 -2.838524e-03 #>  [231,] 0.18181818 0.63636364 0.09090909  1.880550e-03 -7.807219e-03 #>  [232,] 0.27272727 0.63636364 0.09090909  4.154040e-04  2.041563e-03 #>  [233,] 0.36363636 0.63636364 0.09090909 -8.381003e-03 -7.015554e-03 #>  [234,] 0.45454545 0.63636364 0.09090909  7.051526e-03  1.011924e-04 #>  [235,] 0.54545455 0.63636364 0.09090909 -8.901123e-03 -7.717229e-03 #>  [236,] 0.63636364 0.63636364 0.09090909  1.781033e-04 -4.155003e-03 #>  [237,] 0.72727273 0.63636364 0.09090909 -9.405030e-03  1.240197e-03 #>  [238,] 0.81818182 0.63636364 0.09090909  3.994765e-03  7.154209e-03 #>  [239,] 0.90909091 0.63636364 0.09090909  9.246349e-03 -6.477809e-03 #>  [240,] 1.00000000 0.63636364 0.09090909  4.508596e-03  9.238242e-03 #>  [241,] 0.00000000 0.72727273 0.09090909 -7.342865e-03 -3.239539e-03 #>  [242,] 0.09090909 0.72727273 0.09090909 -2.441364e-04  7.959261e-03 #>  [243,] 0.18181818 0.72727273 0.09090909 -7.309402e-03 -8.261534e-03 #>  [244,] 0.27272727 0.72727273 0.09090909  5.816535e-03  6.837207e-03 #>  [245,] 0.36363636 0.72727273 0.09090909  1.669780e-03 -7.223822e-03 #>  [246,] 0.45454545 0.72727273 0.09090909  2.394494e-03 -7.079876e-03 #>  [247,] 0.54545455 0.72727273 0.09090909  4.386065e-03 -5.299770e-03 #>  [248,] 0.63636364 0.72727273 0.09090909  4.621631e-03  9.990540e-03 #>  [249,] 0.72727273 0.72727273 0.09090909  6.706919e-03 -2.385932e-03 #>  [250,] 0.81818182 0.72727273 0.09090909  3.363665e-03 -5.604268e-03 #>  [251,] 0.90909091 0.72727273 0.09090909  8.514686e-03 -9.347513e-03 #>  [252,] 1.00000000 0.72727273 0.09090909  7.179938e-04  2.826103e-03 #>  [253,] 0.00000000 0.81818182 0.09090909 -8.619956e-03  9.753117e-03 #>  [254,] 0.09090909 0.81818182 0.09090909  5.329777e-03 -2.804465e-03 #>  [255,] 0.18181818 0.81818182 0.09090909 -8.246618e-03  2.348607e-03 #>  [256,] 0.27272727 0.81818182 0.09090909  1.650889e-03 -3.742287e-03 #>  [257,] 0.36363636 0.81818182 0.09090909 -9.123670e-03 -4.861181e-04 #>  [258,] 0.45454545 0.81818182 0.09090909  6.033612e-03  3.183354e-03 #>  [259,] 0.54545455 0.81818182 0.09090909  7.919004e-03  5.810416e-03 #>  [260,] 0.63636364 0.81818182 0.09090909 -4.002323e-03  2.442746e-03 #>  [261,] 0.72727273 0.81818182 0.09090909  6.589674e-03  5.755078e-03 #>  [262,] 0.81818182 0.81818182 0.09090909 -1.649491e-03  2.089003e-04 #>  [263,] 0.90909091 0.81818182 0.09090909 -4.144082e-03 -5.722953e-03 #>  [264,] 1.00000000 0.81818182 0.09090909 -4.640255e-03 -6.435595e-03 #>  [265,] 0.00000000 0.90909091 0.09090909  6.801873e-03  6.368016e-03 #>  [266,] 0.09090909 0.90909091 0.09090909  2.723061e-03 -7.119975e-03 #>  [267,] 0.18181818 0.90909091 0.09090909  7.831064e-03  9.783222e-03 #>  [268,] 0.27272727 0.90909091 0.09090909 -3.518683e-05 -4.651772e-03 #>  [269,] 0.36363636 0.90909091 0.09090909 -5.147091e-03 -3.678789e-03 #>  [270,] 0.45454545 0.90909091 0.09090909 -8.397181e-03  7.470973e-03 #>  [271,] 0.54545455 0.90909091 0.09090909  3.255467e-03  8.212819e-03 #>  [272,] 0.63636364 0.90909091 0.09090909  8.160264e-03 -8.500934e-04 #>  [273,] 0.72727273 0.90909091 0.09090909 -9.641373e-03 -3.037938e-03 #>  [274,] 0.81818182 0.90909091 0.09090909  8.870514e-03  5.006162e-03 #>  [275,] 0.90909091 0.90909091 0.09090909  1.114798e-03 -6.788941e-03 #>  [276,] 1.00000000 0.90909091 0.09090909 -1.918215e-03 -7.269703e-03 #>  [277,] 0.00000000 1.00000000 0.09090909  7.922989e-03  3.816027e-03 #>  [278,] 0.09090909 1.00000000 0.09090909 -8.280516e-03 -2.643165e-03 #>  [279,] 0.18181818 1.00000000 0.09090909  4.578585e-03 -5.310513e-03 #>  [280,] 0.27272727 1.00000000 0.09090909 -5.961962e-04 -3.770991e-03 #>  [281,] 0.36363636 1.00000000 0.09090909  2.966836e-03  5.678370e-03 #>  [282,] 0.45454545 1.00000000 0.09090909  1.486925e-03 -8.465274e-03 #>  [283,] 0.54545455 1.00000000 0.09090909 -9.449302e-04 -1.310303e-03 #>  [284,] 0.63636364 1.00000000 0.09090909  7.962455e-03  1.457514e-04 #>  [285,] 0.72727273 1.00000000 0.09090909 -8.890429e-03 -4.391144e-03 #>  [286,] 0.81818182 1.00000000 0.09090909 -6.479378e-04  4.621966e-03 #>  [287,] 0.90909091 1.00000000 0.09090909 -3.552754e-03 -5.344307e-03 #>  [288,] 1.00000000 1.00000000 0.09090909  8.817329e-03  4.172949e-03 #>  [289,] 0.00000000 0.00000000 0.18181818 -8.524524e-04 -5.981939e-03 #>  [290,] 0.09090909 0.00000000 0.18181818 -1.057914e-03 -2.169053e-03 #>  [291,] 0.18181818 0.00000000 0.18181818 -5.218197e-03  5.792213e-03 #>  [292,] 0.27272727 0.00000000 0.18181818 -6.707252e-03 -3.117906e-03 #>  [293,] 0.36363636 0.00000000 0.18181818  1.656630e-03 -5.763319e-04 #>  [294,] 0.45454545 0.00000000 0.18181818 -1.227904e-03 -5.321304e-03 #>  [295,] 0.54545455 0.00000000 0.18181818 -1.695506e-03 -6.873124e-03 #>  [296,] 0.63636364 0.00000000 0.18181818 -3.298895e-03  6.423032e-03 #>  [297,] 0.72727273 0.00000000 0.18181818 -5.879211e-03  6.376810e-03 #>  [298,] 0.81818182 0.00000000 0.18181818  2.576869e-03  7.197685e-03 #>  [299,] 0.90909091 0.00000000 0.18181818  5.609736e-03  4.159575e-03 #>  [300,] 1.00000000 0.00000000 0.18181818  9.295869e-03 -7.460581e-03 #>  [301,] 0.00000000 0.09090909 0.18181818  8.207621e-03  5.158650e-03 #>  [302,] 0.09090909 0.09090909 0.18181818 -3.956894e-03  4.818454e-03 #>  [303,] 0.18181818 0.09090909 0.18181818 -1.557590e-06 -7.243756e-03 #>  [304,] 0.27272727 0.09090909 0.18181818  1.353224e-03  5.122360e-03 #>  [305,] 0.36363636 0.09090909 0.18181818  8.914637e-03  2.836643e-04 #>  [306,] 0.45454545 0.09090909 0.18181818 -3.438521e-03  8.360845e-03 #>  [307,] 0.54545455 0.09090909 0.18181818 -9.522291e-03 -4.689202e-03 #>  [308,] 0.63636364 0.09090909 0.18181818 -3.719846e-03 -7.533175e-03 #>  [309,] 0.72727273 0.09090909 0.18181818 -9.339066e-04 -6.437771e-03 #>  [310,] 0.81818182 0.09090909 0.18181818  6.449578e-03 -7.180817e-03 #>  [311,] 0.90909091 0.09090909 0.18181818  8.221834e-03  8.997632e-03 #>  [312,] 1.00000000 0.09090909 0.18181818  5.813946e-03  3.215573e-04 #>  [313,] 0.00000000 0.18181818 0.18181818  5.108580e-04  8.886136e-03 #>  [314,] 0.09090909 0.18181818 0.18181818  8.220825e-03  8.509876e-03 #>  [315,] 0.18181818 0.18181818 0.18181818  8.798283e-03  1.227084e-03 #>  [316,] 0.27272727 0.18181818 0.18181818 -3.058471e-03  9.934173e-03 #>  [317,] 0.36363636 0.18181818 0.18181818  8.010237e-03  9.013327e-03 #>  [318,] 0.45454545 0.18181818 0.18181818 -8.347890e-03 -1.499818e-03 #>  [319,] 0.54545455 0.18181818 0.18181818 -9.136518e-03 -7.271131e-03 #>  [320,] 0.63636364 0.18181818 0.18181818 -3.543867e-03 -6.457467e-03 #>  [321,] 0.72727273 0.18181818 0.18181818  7.672362e-03 -6.926805e-03 #>  [322,] 0.81818182 0.18181818 0.18181818 -9.785067e-03  6.308665e-05 #>  [323,] 0.90909091 0.18181818 0.18181818 -5.533227e-03  6.993213e-03 #>  [324,] 1.00000000 0.18181818 0.18181818  7.409589e-03  9.489415e-03 #>  [325,] 0.00000000 0.27272727 0.18181818 -8.209823e-03  6.208462e-03 #>  [326,] 0.09090909 0.27272727 0.18181818  7.694341e-03  9.204151e-03 #>  [327,] 0.18181818 0.27272727 0.18181818 -1.595210e-03 -7.294167e-03 #>  [328,] 0.27272727 0.27272727 0.18181818  9.819216e-04 -8.918757e-03 #>  [329,] 0.36363636 0.27272727 0.18181818  7.084661e-03 -5.941608e-03 #>  [330,] 0.45454545 0.27272727 0.18181818  9.706491e-03 -7.588614e-03 #>  [331,] 0.54545455 0.27272727 0.18181818 -8.955166e-03 -2.352536e-03 #>  [332,] 0.63636364 0.27272727 0.18181818 -3.926148e-03  6.695994e-03 #>  [333,] 0.72727273 0.27272727 0.18181818 -6.628564e-03  9.774534e-03 #>  [334,] 0.81818182 0.27272727 0.18181818  7.205664e-03  8.128366e-03 #>  [335,] 0.90909091 0.27272727 0.18181818 -3.560907e-03  1.455459e-03 #>  [336,] 1.00000000 0.27272727 0.18181818 -7.872095e-03 -3.965637e-03 #>  [337,] 0.00000000 0.36363636 0.18181818 -1.430035e-04 -7.590496e-03 #>  [338,] 0.09090909 0.36363636 0.18181818 -3.143636e-03 -4.019025e-03 #>  [339,] 0.18181818 0.36363636 0.18181818 -6.988278e-03  9.504320e-03 #>  [340,] 0.27272727 0.36363636 0.18181818 -5.572217e-03  1.977804e-03 #>  [341,] 0.36363636 0.36363636 0.18181818  1.802387e-03  6.094485e-03 #>  [342,] 0.45454545 0.36363636 0.18181818 -8.611000e-03  9.430529e-03 #>  [343,] 0.54545455 0.36363636 0.18181818  6.619269e-05  6.417780e-04 #>  [344,] 0.63636364 0.36363636 0.18181818  5.891203e-03  3.889896e-03 #>  [345,] 0.72727273 0.36363636 0.18181818 -9.769563e-04  2.553158e-03 #>  [346,] 0.81818182 0.36363636 0.18181818  3.272660e-03 -1.201941e-03 #>  [347,] 0.90909091 0.36363636 0.18181818 -3.406739e-03 -9.966546e-04 #>  [348,] 1.00000000 0.36363636 0.18181818 -2.938876e-03 -8.338701e-03 #>  [349,] 0.00000000 0.45454545 0.18181818 -2.193546e-03  2.728699e-03 #>  [350,] 0.09090909 0.45454545 0.18181818  9.126740e-03 -5.669418e-03 #>  [351,] 0.18181818 0.45454545 0.18181818  2.422130e-03 -5.070005e-03 #>  [352,] 0.27272727 0.45454545 0.18181818  6.520816e-03 -5.148544e-03 #>  [353,] 0.36363636 0.45454545 0.18181818  8.648882e-03  2.211728e-03 #>  [354,] 0.45454545 0.45454545 0.18181818 -5.959393e-03 -7.125061e-03 #>  [355,] 0.54545455 0.45454545 0.18181818 -4.403285e-03 -6.122433e-03 #>  [356,] 0.63636364 0.45454545 0.18181818  3.815081e-03 -5.960248e-03 #>  [357,] 0.72727273 0.45454545 0.18181818 -7.862240e-03 -1.887219e-03 #>  [358,] 0.81818182 0.45454545 0.18181818  6.886556e-03 -3.796452e-03 #>  [359,] 0.90909091 0.45454545 0.18181818  5.981186e-03 -6.577992e-03 #>  [360,] 1.00000000 0.45454545 0.18181818 -3.453448e-03  1.679912e-03 #>  [361,] 0.00000000 0.54545455 0.18181818  1.561474e-03  3.392555e-03 #>  [362,] 0.09090909 0.54545455 0.18181818  7.138312e-03  5.989825e-04 #>  [363,] 0.18181818 0.54545455 0.18181818 -2.218740e-04  2.364864e-03 #>  [364,] 0.27272727 0.54545455 0.18181818  2.294887e-03  5.625586e-05 #>  [365,] 0.36363636 0.54545455 0.18181818 -3.757019e-03  4.147494e-03 #>  [366,] 0.45454545 0.54545455 0.18181818 -8.585303e-03 -1.400067e-03 #>  [367,] 0.54545455 0.54545455 0.18181818  7.466529e-03  3.088009e-04 #>  [368,] 0.63636364 0.54545455 0.18181818  9.462552e-03 -4.074533e-03 #>  [369,] 0.72727273 0.54545455 0.18181818  3.876662e-03 -3.160244e-03 #>  [370,] 0.81818182 0.54545455 0.18181818  9.603216e-03  6.688124e-04 #>  [371,] 0.90909091 0.54545455 0.18181818  3.794477e-03  4.175267e-03 #>  [372,] 1.00000000 0.54545455 0.18181818  2.110202e-03 -3.019752e-03 #>  [373,] 0.00000000 0.63636364 0.18181818 -6.752409e-03 -7.827410e-03 #>  [374,] 0.09090909 0.63636364 0.18181818  2.419083e-03 -3.988171e-03 #>  [375,] 0.18181818 0.63636364 0.18181818 -3.118199e-03 -6.976310e-03 #>  [376,] 0.27272727 0.63636364 0.18181818 -3.437766e-03 -5.655984e-03 #>  [377,] 0.36363636 0.63636364 0.18181818 -6.285822e-03  3.983884e-03 #>  [378,] 0.45454545 0.63636364 0.18181818  3.965289e-03  4.981846e-03 #>  [379,] 0.54545455 0.63636364 0.18181818 -8.715935e-03  7.441888e-03 #>  [380,] 0.63636364 0.63636364 0.18181818 -6.370538e-03 -4.995761e-03 #>  [381,] 0.72727273 0.63636364 0.18181818 -8.142437e-03 -2.168628e-03 #>  [382,] 0.81818182 0.63636364 0.18181818 -9.736427e-03  6.953484e-03 #>  [383,] 0.90909091 0.63636364 0.18181818  3.173199e-03  6.174195e-03 #>  [384,] 1.00000000 0.63636364 0.18181818  1.539329e-03  4.698136e-03 #>  [385,] 0.00000000 0.72727273 0.18181818  4.168191e-03 -7.140774e-04 #>  [386,] 0.09090909 0.72727273 0.18181818 -8.472048e-04  7.103905e-03 #>  [387,] 0.18181818 0.72727273 0.18181818  4.872165e-03  6.274495e-03 #>  [388,] 0.27272727 0.72727273 0.18181818  9.813559e-03 -5.035729e-03 #>  [389,] 0.36363636 0.72727273 0.18181818  4.836363e-03  9.367846e-03 #>  [390,] 0.45454545 0.72727273 0.18181818 -2.950520e-04  3.771087e-03 #>  [391,] 0.54545455 0.72727273 0.18181818  5.880273e-04  7.072849e-03 #>  [392,] 0.63636364 0.72727273 0.18181818 -7.629433e-03 -5.102293e-03 #>  [393,] 0.72727273 0.72727273 0.18181818 -3.110948e-03 -6.105492e-03 #>  [394,] 0.81818182 0.72727273 0.18181818 -8.091182e-04  3.089852e-03 #>  [395,] 0.90909091 0.72727273 0.18181818  9.385392e-03  6.235126e-03 #>  [396,] 1.00000000 0.72727273 0.18181818 -5.455120e-03  2.225584e-03 #>  [397,] 0.00000000 0.81818182 0.18181818 -2.724690e-04  2.954347e-03 #>  [398,] 0.09090909 0.81818182 0.18181818 -1.209299e-03  7.967401e-03 #>  [399,] 0.18181818 0.81818182 0.18181818  4.336990e-03 -9.972825e-03 #>  [400,] 0.27272727 0.81818182 0.18181818  7.569473e-03  9.873513e-03 #>  [401,] 0.36363636 0.81818182 0.18181818  6.108837e-03 -2.947806e-03 #>  [402,] 0.45454545 0.81818182 0.18181818  2.005440e-03  3.531690e-03 #>  [403,] 0.54545455 0.81818182 0.18181818  6.678902e-03 -7.620012e-03 #>  [404,] 0.63636364 0.81818182 0.18181818 -8.250837e-03  9.200262e-03 #>  [405,] 0.72727273 0.81818182 0.18181818  8.284018e-03 -8.113193e-03 #>  [406,] 0.81818182 0.81818182 0.18181818  1.895322e-03  6.741182e-03 #>  [407,] 0.90909091 0.81818182 0.18181818 -1.560173e-05 -1.693069e-04 #>  [408,] 1.00000000 0.81818182 0.18181818 -8.586017e-03  8.703152e-03 #>  [409,] 0.00000000 0.90909091 0.18181818 -2.512679e-03  2.520890e-03 #>  [410,] 0.09090909 0.90909091 0.18181818  4.000892e-03  1.224158e-03 #>  [411,] 0.18181818 0.90909091 0.18181818 -7.986552e-03  7.355896e-03 #>  [412,] 0.27272727 0.90909091 0.18181818  9.765912e-03  5.876100e-04 #>  [413,] 0.36363636 0.90909091 0.18181818  8.714695e-03  7.891687e-03 #>  [414,] 0.45454545 0.90909091 0.18181818 -9.480748e-03 -7.966148e-03 #>  [415,] 0.54545455 0.90909091 0.18181818  5.738918e-03 -9.328905e-03 #>  [416,] 0.63636364 0.90909091 0.18181818 -7.974943e-03 -5.186014e-03 #>  [417,] 0.72727273 0.90909091 0.18181818 -1.857454e-04  1.784921e-03 #>  [418,] 0.81818182 0.90909091 0.18181818 -6.611112e-03 -9.042039e-03 #>  [419,] 0.90909091 0.90909091 0.18181818 -6.546319e-03  5.228402e-03 #>  [420,] 1.00000000 0.90909091 0.18181818 -8.374348e-04 -5.763263e-03 #>  [421,] 0.00000000 1.00000000 0.18181818 -3.239324e-03 -6.027177e-03 #>  [422,] 0.09090909 1.00000000 0.18181818  2.768035e-03  6.900009e-03 #>  [423,] 0.18181818 1.00000000 0.18181818  6.637078e-03 -1.418330e-05 #>  [424,] 0.27272727 1.00000000 0.18181818  1.270696e-03  3.938709e-03 #>  [425,] 0.36363636 1.00000000 0.18181818 -1.660996e-03  6.946094e-04 #>  [426,] 0.45454545 1.00000000 0.18181818 -4.522416e-03 -3.098740e-03 #>  [427,] 0.54545455 1.00000000 0.18181818  2.664879e-03  2.788456e-03 #>  [428,] 0.63636364 1.00000000 0.18181818  5.456123e-03  6.501551e-03 #>  [429,] 0.72727273 1.00000000 0.18181818  4.590351e-03  1.100001e-03 #>  [430,] 0.81818182 1.00000000 0.18181818 -3.743997e-03 -3.674996e-03 #>  [431,] 0.90909091 1.00000000 0.18181818  3.994023e-03  5.293159e-03 #>  [432,] 1.00000000 1.00000000 0.18181818  9.377536e-03  9.049029e-03 #>  [433,] 0.00000000 0.00000000 0.27272727  7.016633e-03 -1.043066e-03 #>  [434,] 0.09090909 0.00000000 0.27272727  5.467238e-03 -7.963370e-03 #>  [435,] 0.18181818 0.00000000 0.27272727 -8.728801e-03 -6.972101e-03 #>  [436,] 0.27272727 0.00000000 0.27272727  4.312770e-03 -2.360805e-03 #>  [437,] 0.36363636 0.00000000 0.27272727 -6.584477e-03  8.509609e-03 #>  [438,] 0.45454545 0.00000000 0.27272727  5.457063e-03 -1.018930e-03 #>  [439,] 0.54545455 0.00000000 0.27272727 -2.588518e-03  8.083255e-03 #>  [440,] 0.63636364 0.00000000 0.27272727 -9.178599e-03  6.419752e-03 #>  [441,] 0.72727273 0.00000000 0.27272727  5.171837e-03  6.010179e-03 #>  [442,] 0.81818182 0.00000000 0.27272727 -7.419600e-03  6.183237e-04 #>  [443,] 0.90909091 0.00000000 0.27272727 -6.090164e-03 -6.788979e-03 #>  [444,] 1.00000000 0.00000000 0.27272727  2.267100e-03  9.560200e-03 #>  [445,] 0.00000000 0.09090909 0.27272727  1.984612e-03  7.023190e-03 #>  [446,] 0.09090909 0.09090909 0.27272727 -1.067482e-04  8.661917e-03 #>  [447,] 0.18181818 0.09090909 0.27272727  1.610560e-03  2.607615e-03 #>  [448,] 0.27272727 0.09090909 0.27272727  5.516437e-03 -7.736170e-03 #>  [449,] 0.36363636 0.09090909 0.27272727  3.931515e-03 -6.525047e-04 #>  [450,] 0.45454545 0.09090909 0.27272727 -8.913206e-03 -4.131788e-03 #>  [451,] 0.54545455 0.09090909 0.27272727  2.457154e-03  4.336200e-03 #>  [452,] 0.63636364 0.09090909 0.27272727 -1.942663e-04 -3.398683e-03 #>  [453,] 0.72727273 0.09090909 0.27272727 -7.717550e-03 -9.186216e-03 #>  [454,] 0.81818182 0.09090909 0.27272727 -1.225282e-04  9.075429e-03 #>  [455,] 0.90909091 0.09090909 0.27272727  4.366933e-03 -6.600002e-03 #>  [456,] 1.00000000 0.09090909 0.27272727 -9.522435e-03 -5.295261e-03 #>  [457,] 0.00000000 0.18181818 0.27272727 -1.218503e-03  7.041290e-03 #>  [458,] 0.09090909 0.18181818 0.27272727 -5.854426e-03 -1.117401e-03 #>  [459,] 0.18181818 0.18181818 0.27272727  8.338032e-03 -5.775095e-03 #>  [460,] 0.27272727 0.18181818 0.27272727  3.370578e-03 -3.513232e-03 #>  [461,] 0.36363636 0.18181818 0.27272727 -9.283571e-03 -4.307944e-03 #>  [462,] 0.45454545 0.18181818 0.27272727 -8.590952e-03 -6.813874e-03 #>  [463,] 0.54545455 0.18181818 0.27272727 -1.467559e-03  6.776757e-03 #>  [464,] 0.63636364 0.18181818 0.27272727  9.367257e-03 -1.347813e-03 #>  [465,] 0.72727273 0.18181818 0.27272727 -1.305537e-03  7.963589e-04 #>  [466,] 0.81818182 0.18181818 0.27272727 -3.552216e-03 -3.982630e-03 #>  [467,] 0.90909091 0.18181818 0.27272727 -7.194472e-03 -2.583633e-03 #>  [468,] 1.00000000 0.18181818 0.27272727 -7.090086e-03 -4.253286e-03 #>  [469,] 0.00000000 0.27272727 0.27272727  3.454525e-04 -5.824249e-03 #>  [470,] 0.09090909 0.27272727 0.27272727  9.376004e-03  5.201193e-03 #>  [471,] 0.18181818 0.27272727 0.27272727 -1.381915e-03 -5.580643e-03 #>  [472,] 0.27272727 0.27272727 0.27272727 -2.750332e-03  7.926829e-03 #>  [473,] 0.36363636 0.27272727 0.27272727  2.539801e-03 -7.077768e-03 #>  [474,] 0.45454545 0.27272727 0.27272727  9.283331e-03  4.534831e-03 #>  [475,] 0.54545455 0.27272727 0.27272727  5.330401e-03 -9.588490e-03 #>  [476,] 0.63636364 0.27272727 0.27272727  1.953688e-03 -3.614910e-03 #>  [477,] 0.72727273 0.27272727 0.27272727 -7.037694e-03 -4.308546e-03 #>  [478,] 0.81818182 0.27272727 0.27272727  1.808155e-03  9.671868e-03 #>  [479,] 0.90909091 0.27272727 0.27272727 -7.979330e-03 -2.547543e-03 #>  [480,] 1.00000000 0.27272727 0.27272727 -5.868491e-03 -9.093017e-03 #>  [481,] 0.00000000 0.36363636 0.27272727  7.048487e-03 -1.488207e-03 #>  [482,] 0.09090909 0.36363636 0.27272727 -2.261545e-03  7.073176e-03 #>  [483,] 0.18181818 0.36363636 0.27272727 -7.683296e-03 -2.687993e-03 #>  [484,] 0.27272727 0.36363636 0.27272727  8.421441e-03  8.482243e-03 #>  [485,] 0.36363636 0.36363636 0.27272727 -5.859566e-03 -4.004545e-03 #>  [486,] 0.45454545 0.36363636 0.27272727 -3.126396e-03 -9.615251e-03 #>  [487,] 0.54545455 0.36363636 0.27272727  3.680376e-03  5.658463e-03 #>  [488,] 0.63636364 0.36363636 0.27272727 -8.736444e-03  1.595911e-03 #>  [489,] 0.72727273 0.36363636 0.27272727  4.437768e-03  5.084189e-03 #>  [490,] 0.81818182 0.36363636 0.27272727 -4.386315e-03 -8.850111e-03 #>  [491,] 0.90909091 0.36363636 0.27272727 -3.042839e-03  3.104946e-03 #>  [492,] 1.00000000 0.36363636 0.27272727  9.402143e-03 -4.977703e-03 #>  [493,] 0.00000000 0.45454545 0.27272727 -3.638941e-03 -6.293712e-03 #>  [494,] 0.09090909 0.45454545 0.27272727 -4.458165e-03 -1.110248e-03 #>  [495,] 0.18181818 0.45454545 0.27272727  3.495328e-03 -5.637133e-03 #>  [496,] 0.27272727 0.45454545 0.27272727 -3.295612e-03  7.260348e-03 #>  [497,] 0.36363636 0.45454545 0.27272727  1.014376e-03  1.106058e-03 #>  [498,] 0.45454545 0.45454545 0.27272727 -7.005248e-03 -6.500551e-03 #>  [499,] 0.54545455 0.45454545 0.27272727 -8.220008e-03 -7.248518e-03 #>  [500,] 0.63636364 0.45454545 0.27272727  3.045273e-03 -5.750048e-03 #>  [501,] 0.72727273 0.45454545 0.27272727 -4.456909e-03  1.796225e-03 #>  [502,] 0.81818182 0.45454545 0.27272727 -2.171738e-03 -2.403328e-03 #>  [503,] 0.90909091 0.45454545 0.27272727 -2.558565e-03  9.793515e-03 #>  [504,] 1.00000000 0.45454545 0.27272727 -5.100981e-03 -9.814799e-03 #>  [505,] 0.00000000 0.54545455 0.27272727 -2.748005e-03  9.464578e-03 #>  [506,] 0.09090909 0.54545455 0.27272727  8.984568e-03 -1.674855e-03 #>  [507,] 0.18181818 0.54545455 0.27272727  9.935060e-03 -5.080047e-03 #>  [508,] 0.27272727 0.54545455 0.27272727  6.624581e-03 -7.298243e-03 #>  [509,] 0.36363636 0.54545455 0.27272727  8.696553e-03 -6.965912e-03 #>  [510,] 0.45454545 0.54545455 0.27272727 -9.042585e-03 -2.875523e-03 #>  [511,] 0.54545455 0.54545455 0.27272727 -3.207880e-04 -4.456092e-03 #>  [512,] 0.63636364 0.54545455 0.27272727  7.193462e-03  7.490528e-03 #>  [513,] 0.72727273 0.54545455 0.27272727  9.141757e-03  2.948163e-03 #>  [514,] 0.81818182 0.54545455 0.27272727  7.414640e-03  4.173448e-03 #>  [515,] 0.90909091 0.54545455 0.27272727  1.700253e-03 -6.574949e-03 #>  [516,] 1.00000000 0.54545455 0.27272727  4.605478e-03  6.091709e-03 #>  [517,] 0.00000000 0.63636364 0.27272727  1.542785e-03 -3.017161e-03 #>  [518,] 0.09090909 0.63636364 0.27272727  7.336066e-03  8.206515e-03 #>  [519,] 0.18181818 0.63636364 0.27272727 -8.685012e-03  8.779415e-03 #>  [520,] 0.27272727 0.63636364 0.27272727  1.405625e-03 -8.271655e-03 #>  [521,] 0.36363636 0.63636364 0.27272727 -6.069309e-03  7.788996e-03 #>  [522,] 0.45454545 0.63636364 0.27272727 -3.425496e-03 -5.630531e-03 #>  [523,] 0.54545455 0.63636364 0.27272727 -5.212635e-03  8.057662e-03 #>  [524,] 0.63636364 0.63636364 0.27272727 -1.082586e-03  1.352196e-04 #>  [525,] 0.72727273 0.63636364 0.27272727 -7.432123e-03 -6.457247e-03 #>  [526,] 0.81818182 0.63636364 0.27272727  9.813491e-03 -1.280353e-03 #>  [527,] 0.90909091 0.63636364 0.27272727 -9.366870e-03 -2.791683e-03 #>  [528,] 1.00000000 0.63636364 0.27272727  8.553864e-04 -8.912255e-03 #>  [529,] 0.00000000 0.72727273 0.27272727 -7.672576e-03  5.902626e-03 #>  [530,] 0.09090909 0.72727273 0.27272727 -5.622009e-04 -8.967732e-03 #>  [531,] 0.18181818 0.72727273 0.27272727 -4.780916e-03  4.243443e-04 #>  [532,] 0.27272727 0.72727273 0.27272727  6.457249e-03 -3.458213e-03 #>  [533,] 0.36363636 0.72727273 0.27272727  1.563021e-03 -1.414672e-03 #>  [534,] 0.45454545 0.72727273 0.27272727  5.822859e-04 -7.085877e-03 #>  [535,] 0.54545455 0.72727273 0.27272727 -6.280343e-03 -6.855413e-03 #>  [536,] 0.63636364 0.72727273 0.27272727  3.691256e-03 -3.316732e-03 #>  [537,] 0.72727273 0.72727273 0.27272727  8.123152e-03  6.195590e-03 #>  [538,] 0.81818182 0.72727273 0.27272727  2.127103e-03  6.981416e-03 #>  [539,] 0.90909091 0.72727273 0.27272727 -6.387548e-03 -3.743768e-03 #>  [540,] 1.00000000 0.72727273 0.27272727 -1.320840e-03 -8.798301e-03 #>  [541,] 0.00000000 0.81818182 0.27272727 -3.457689e-03  6.814954e-03 #>  [542,] 0.09090909 0.81818182 0.27272727 -1.112155e-03 -9.209388e-03 #>  [543,] 0.18181818 0.81818182 0.27272727 -6.742925e-04 -6.347966e-03 #>  [544,] 0.27272727 0.81818182 0.27272727  2.142699e-03 -4.919108e-04 #>  [545,] 0.36363636 0.81818182 0.27272727 -7.990877e-03  2.100106e-03 #>  [546,] 0.45454545 0.81818182 0.27272727  2.697914e-03 -8.125098e-03 #>  [547,] 0.54545455 0.81818182 0.27272727  4.718896e-04 -4.148084e-03 #>  [548,] 0.63636364 0.81818182 0.27272727  9.576786e-03 -1.859890e-03 #>  [549,] 0.72727273 0.81818182 0.27272727 -7.107793e-03 -2.524121e-03 #>  [550,] 0.81818182 0.81818182 0.27272727  2.909321e-03  8.491014e-03 #>  [551,] 0.90909091 0.81818182 0.27272727 -6.912589e-03 -1.296339e-03 #>  [552,] 1.00000000 0.81818182 0.27272727  3.616015e-03 -9.711247e-03 #>  [553,] 0.00000000 0.90909091 0.27272727  7.423957e-03  3.345250e-03 #>  [554,] 0.09090909 0.90909091 0.27272727 -8.677023e-03 -6.947657e-03 #>  [555,] 0.18181818 0.90909091 0.27272727  5.931414e-03 -6.075399e-03 #>  [556,] 0.27272727 0.90909091 0.27272727 -9.330227e-03 -8.045257e-03 #>  [557,] 0.36363636 0.90909091 0.27272727  5.454470e-03 -3.209120e-03 #>  [558,] 0.45454545 0.90909091 0.27272727 -5.624665e-03  4.509750e-03 #>  [559,] 0.54545455 0.90909091 0.27272727  3.903812e-03  7.588735e-03 #>  [560,] 0.63636364 0.90909091 0.27272727 -4.471292e-03 -1.789263e-03 #>  [561,] 0.72727273 0.90909091 0.27272727  9.111209e-03  3.548348e-03 #>  [562,] 0.81818182 0.90909091 0.27272727 -4.663870e-03  3.687434e-03 #>  [563,] 0.90909091 0.90909091 0.27272727  2.080097e-03  7.072751e-03 #>  [564,] 1.00000000 0.90909091 0.27272727 -3.636833e-04 -8.480217e-03 #>  [565,] 0.00000000 1.00000000 0.27272727  6.593708e-03 -2.969779e-03 #>  [566,] 0.09090909 1.00000000 0.27272727  8.590577e-03 -5.142814e-03 #>  [567,] 0.18181818 1.00000000 0.27272727  9.093139e-03 -2.319686e-03 #>  [568,] 0.27272727 1.00000000 0.27272727  4.005168e-03 -3.046242e-03 #>  [569,] 0.36363636 1.00000000 0.27272727  6.959817e-03 -1.215849e-04 #>  [570,] 0.45454545 1.00000000 0.27272727 -3.013222e-03 -5.502246e-03 #>  [571,] 0.54545455 1.00000000 0.27272727  1.701498e-03 -5.509975e-04 #>  [572,] 0.63636364 1.00000000 0.27272727  9.574889e-03  4.823020e-03 #>  [573,] 0.72727273 1.00000000 0.27272727  8.935133e-03  3.634532e-03 #>  [574,] 0.81818182 1.00000000 0.27272727 -5.182502e-03  2.133963e-03 #>  [575,] 0.90909091 1.00000000 0.27272727  4.670647e-03 -7.509993e-03 #>  [576,] 1.00000000 1.00000000 0.27272727 -5.110993e-03 -1.874326e-03 #>  [577,] 0.00000000 0.00000000 0.36363636 -8.625897e-03  9.527834e-03 #>  [578,] 0.09090909 0.00000000 0.36363636 -1.010085e-03  4.823994e-03 #>  [579,] 0.18181818 0.00000000 0.36363636 -6.826212e-03  8.444473e-03 #>  [580,] 0.27272727 0.00000000 0.36363636  4.544353e-03  5.783610e-03 #>  [581,] 0.36363636 0.00000000 0.36363636 -7.590602e-03  9.863714e-03 #>  [582,] 0.45454545 0.00000000 0.36363636  9.739735e-03 -8.800361e-03 #>  [583,] 0.54545455 0.00000000 0.36363636 -8.454891e-03 -2.796997e-03 #>  [584,] 0.63636364 0.00000000 0.36363636 -4.958243e-03 -8.144164e-03 #>  [585,] 0.72727273 0.00000000 0.36363636 -7.501664e-03  9.796804e-03 #>  [586,] 0.81818182 0.00000000 0.36363636  5.739974e-03  8.050147e-03 #>  [587,] 0.90909091 0.00000000 0.36363636 -4.123332e-03  5.008986e-03 #>  [588,] 1.00000000 0.00000000 0.36363636 -1.274559e-03 -2.745333e-03 #>  [589,] 0.00000000 0.09090909 0.36363636 -4.074588e-03 -7.487527e-04 #>  [590,] 0.09090909 0.09090909 0.36363636 -8.785187e-03  6.290314e-03 #>  [591,] 0.18181818 0.09090909 0.36363636 -6.448484e-03  1.875411e-03 #>  [592,] 0.27272727 0.09090909 0.36363636  3.049116e-03 -7.616255e-03 #>  [593,] 0.36363636 0.09090909 0.36363636 -6.678403e-03 -1.484044e-03 #>  [594,] 0.45454545 0.09090909 0.36363636  8.374178e-03 -5.997266e-03 #>  [595,] 0.54545455 0.09090909 0.36363636  7.958387e-03 -3.795231e-03 #>  [596,] 0.63636364 0.09090909 0.36363636 -9.606409e-03  3.273934e-03 #>  [597,] 0.72727273 0.09090909 0.36363636 -5.916473e-03 -2.180620e-03 #>  [598,] 0.81818182 0.09090909 0.36363636  1.423934e-03 -5.284815e-03 #>  [599,] 0.90909091 0.09090909 0.36363636  5.850957e-03  2.145432e-03 #>  [600,] 1.00000000 0.09090909 0.36363636  3.835127e-03 -4.275886e-03 #>  [601,] 0.00000000 0.18181818 0.36363636 -7.322069e-03 -9.984847e-05 #>  [602,] 0.09090909 0.18181818 0.36363636 -4.060665e-03  3.134050e-03 #>  [603,] 0.18181818 0.18181818 0.36363636  9.942872e-03  3.627496e-03 #>  [604,] 0.27272727 0.18181818 0.36363636  4.483264e-03 -6.200307e-03 #>  [605,] 0.36363636 0.18181818 0.36363636 -1.135131e-03 -1.134217e-03 #>  [606,] 0.45454545 0.18181818 0.36363636 -7.307526e-03 -3.697266e-03 #>  [607,] 0.54545455 0.18181818 0.36363636  5.399370e-03 -4.483846e-04 #>  [608,] 0.63636364 0.18181818 0.36363636 -1.365545e-03  5.413413e-03 #>  [609,] 0.72727273 0.18181818 0.36363636  7.328477e-03  3.214554e-03 #>  [610,] 0.81818182 0.18181818 0.36363636  2.438558e-03  5.633106e-03 #>  [611,] 0.90909091 0.18181818 0.36363636  7.876921e-03 -6.157046e-04 #>  [612,] 1.00000000 0.18181818 0.36363636 -7.423006e-03 -8.019351e-03 #>  [613,] 0.00000000 0.27272727 0.36363636 -4.140386e-04 -5.274652e-03 #>  [614,] 0.09090909 0.27272727 0.36363636 -6.133174e-03  4.486959e-03 #>  [615,] 0.18181818 0.27272727 0.36363636  5.759539e-03  2.208273e-03 #>  [616,] 0.27272727 0.27272727 0.36363636  7.602895e-03 -6.631576e-03 #>  [617,] 0.36363636 0.27272727 0.36363636  2.744777e-04 -6.115883e-04 #>  [618,] 0.45454545 0.27272727 0.36363636  4.093667e-03 -9.431102e-03 #>  [619,] 0.54545455 0.27272727 0.36363636 -2.033429e-03 -7.350655e-03 #>  [620,] 0.63636364 0.27272727 0.36363636 -4.348229e-03 -4.780193e-03 #>  [621,] 0.72727273 0.27272727 0.36363636 -7.286475e-04  3.556994e-03 #>  [622,] 0.81818182 0.27272727 0.36363636 -6.780892e-03  5.901891e-03 #>  [623,] 0.90909091 0.27272727 0.36363636 -9.948380e-03  5.253964e-03 #>  [624,] 1.00000000 0.27272727 0.36363636  1.124085e-03 -4.916221e-03 #>  [625,] 0.00000000 0.36363636 0.36363636 -8.562097e-03 -3.258681e-03 #>  [626,] 0.09090909 0.36363636 0.36363636 -4.696187e-03 -7.098401e-03 #>  [627,] 0.18181818 0.36363636 0.36363636 -2.040973e-03 -8.522580e-03 #>  [628,] 0.27272727 0.36363636 0.36363636 -9.237047e-03  1.120634e-03 #>  [629,] 0.36363636 0.36363636 0.36363636 -8.311236e-03  5.730727e-03 #>  [630,] 0.45454545 0.36363636 0.36363636 -6.939986e-03  5.029738e-03 #>  [631,] 0.54545455 0.36363636 0.36363636  6.086103e-03 -5.805258e-03 #>  [632,] 0.63636364 0.36363636 0.36363636 -2.903572e-03  6.528236e-03 #>  [633,] 0.72727273 0.36363636 0.36363636  7.413255e-03 -9.019206e-03 #>  [634,] 0.81818182 0.36363636 0.36363636 -2.581570e-03  2.647599e-03 #>  [635,] 0.90909091 0.36363636 0.36363636 -1.861700e-04  3.662292e-03 #>  [636,] 1.00000000 0.36363636 0.36363636  3.420923e-03  6.789977e-03 #>  [637,] 0.00000000 0.45454545 0.36363636 -4.863375e-03  3.578930e-04 #>  [638,] 0.09090909 0.45454545 0.36363636 -7.005838e-03 -7.116940e-03 #>  [639,] 0.18181818 0.45454545 0.36363636 -6.799188e-03 -4.734183e-03 #>  [640,] 0.27272727 0.45454545 0.36363636  2.402263e-03 -4.385040e-03 #>  [641,] 0.36363636 0.45454545 0.36363636  4.987005e-03 -8.261131e-03 #>  [642,] 0.45454545 0.45454545 0.36363636 -2.672359e-03  6.679649e-03 #>  [643,] 0.54545455 0.45454545 0.36363636 -6.653201e-03 -1.958743e-03 #>  [644,] 0.63636364 0.45454545 0.36363636  5.780829e-03 -3.865501e-04 #>  [645,] 0.72727273 0.45454545 0.36363636 -9.994460e-03 -7.633143e-03 #>  [646,] 0.81818182 0.45454545 0.36363636 -2.287462e-04 -4.841372e-03 #>  [647,] 0.90909091 0.45454545 0.36363636  8.976209e-03  1.608955e-03 #>  [648,] 1.00000000 0.45454545 0.36363636 -6.888140e-04  6.086611e-03 #>  [649,] 0.00000000 0.54545455 0.36363636  1.087481e-03  4.648006e-03 #>  [650,] 0.09090909 0.54545455 0.36363636 -1.684504e-03  3.459254e-03 #>  [651,] 0.18181818 0.54545455 0.36363636  1.337768e-03 -7.966390e-03 #>  [652,] 0.27272727 0.54545455 0.36363636  7.481952e-03 -6.125187e-03 #>  [653,] 0.36363636 0.54545455 0.36363636 -2.383637e-03 -9.904550e-03 #>  [654,] 0.45454545 0.54545455 0.36363636  4.099044e-03 -9.924874e-03 #>  [655,] 0.54545455 0.54545455 0.36363636  1.589492e-03  9.693026e-03 #>  [656,] 0.63636364 0.54545455 0.36363636 -5.530158e-03 -2.184554e-03 #>  [657,] 0.72727273 0.54545455 0.36363636 -8.497148e-03  7.800226e-03 #>  [658,] 0.81818182 0.54545455 0.36363636 -4.725754e-03  4.441855e-03 #>  [659,] 0.90909091 0.54545455 0.36363636  7.308920e-03 -2.243011e-03 #>  [660,] 1.00000000 0.54545455 0.36363636  5.099562e-03 -1.500433e-03 #>  [661,] 0.00000000 0.63636364 0.36363636 -6.610650e-03 -1.555727e-03 #>  [662,] 0.09090909 0.63636364 0.36363636  4.439011e-03  9.567180e-05 #>  [663,] 0.18181818 0.63636364 0.36363636  9.379099e-03  4.782568e-03 #>  [664,] 0.27272727 0.63636364 0.36363636 -7.638418e-03  7.266797e-03 #>  [665,] 0.36363636 0.63636364 0.36363636  9.651141e-03 -8.512765e-03 #>  [666,] 0.45454545 0.63636364 0.36363636 -3.068152e-03 -3.652870e-03 #>  [667,] 0.54545455 0.63636364 0.36363636 -4.444668e-03  2.926959e-03 #>  [668,] 0.63636364 0.63636364 0.36363636 -7.451944e-03 -8.741439e-03 #>  [669,] 0.72727273 0.63636364 0.36363636 -5.594272e-03 -9.420265e-03 #>  [670,] 0.81818182 0.63636364 0.36363636  2.461173e-03 -6.030995e-03 #>  [671,] 0.90909091 0.63636364 0.36363636  8.011769e-03 -2.193397e-03 #>  [672,] 1.00000000 0.63636364 0.36363636  1.829056e-03 -7.845728e-03 #>  [673,] 0.00000000 0.72727273 0.36363636  5.342111e-03 -2.194811e-03 #>  [674,] 0.09090909 0.72727273 0.36363636 -7.079659e-03  3.732281e-03 #>  [675,] 0.18181818 0.72727273 0.36363636  3.839302e-04 -8.861865e-03 #>  [676,] 0.27272727 0.72727273 0.36363636  2.158425e-03  9.019521e-03 #>  [677,] 0.36363636 0.72727273 0.36363636 -1.424477e-03 -9.211258e-03 #>  [678,] 0.45454545 0.72727273 0.36363636 -7.105239e-03 -7.582374e-03 #>  [679,] 0.54545455 0.72727273 0.36363636  3.944155e-03  9.852598e-03 #>  [680,] 0.63636364 0.72727273 0.36363636  6.111718e-03  8.842606e-04 #>  [681,] 0.72727273 0.72727273 0.36363636 -9.925980e-03  7.036657e-03 #>  [682,] 0.81818182 0.72727273 0.36363636 -3.977615e-03 -7.757589e-04 #>  [683,] 0.90909091 0.72727273 0.36363636  8.636981e-03  4.936248e-03 #>  [684,] 1.00000000 0.72727273 0.36363636  1.146556e-03 -3.508072e-03 #>  [685,] 0.00000000 0.81818182 0.36363636 -4.760210e-04 -3.388143e-03 #>  [686,] 0.09090909 0.81818182 0.36363636  1.567260e-03  1.340604e-03 #>  [687,] 0.18181818 0.81818182 0.36363636  1.089645e-04 -1.695188e-03 #>  [688,] 0.27272727 0.81818182 0.36363636 -9.017017e-04  1.072636e-03 #>  [689,] 0.36363636 0.81818182 0.36363636  6.721942e-03  5.448782e-03 #>  [690,] 0.45454545 0.81818182 0.36363636 -6.202783e-03  2.422092e-03 #>  [691,] 0.54545455 0.81818182 0.36363636 -5.641435e-03 -9.313393e-03 #>  [692,] 0.63636364 0.81818182 0.36363636 -5.610209e-03 -1.697638e-03 #>  [693,] 0.72727273 0.81818182 0.36363636 -6.853335e-03 -8.876125e-03 #>  [694,] 0.81818182 0.81818182 0.36363636  1.133524e-03  4.030182e-03 #>  [695,] 0.90909091 0.81818182 0.36363636 -1.348422e-03  2.856150e-04 #>  [696,] 1.00000000 0.81818182 0.36363636 -4.314459e-03  5.069127e-03 #>  [697,] 0.00000000 0.90909091 0.36363636  5.042928e-03  4.638373e-03 #>  [698,] 0.09090909 0.90909091 0.36363636  6.265094e-03  2.686627e-03 #>  [699,] 0.18181818 0.90909091 0.36363636  4.305918e-03  5.192292e-03 #>  [700,] 0.27272727 0.90909091 0.36363636  6.804730e-03  9.295328e-03 #>  [701,] 0.36363636 0.90909091 0.36363636  6.735637e-03  7.320258e-03 #>  [702,] 0.45454545 0.90909091 0.36363636 -7.126554e-03 -1.819680e-03 #>  [703,] 0.54545455 0.90909091 0.36363636  8.739711e-03  8.442251e-04 #>  [704,] 0.63636364 0.90909091 0.36363636  3.406213e-03  5.944801e-03 #>  [705,] 0.72727273 0.90909091 0.36363636  9.419662e-03 -3.731630e-03 #>  [706,] 0.81818182 0.90909091 0.36363636 -7.030662e-04  5.462632e-03 #>  [707,] 0.90909091 0.90909091 0.36363636 -5.511569e-05 -9.717584e-03 #>  [708,] 1.00000000 0.90909091 0.36363636  3.245785e-03 -4.794876e-03 #>  [709,] 0.00000000 1.00000000 0.36363636 -7.998384e-03  5.390345e-03 #>  [710,] 0.09090909 1.00000000 0.36363636 -3.530715e-03 -2.592225e-03 #>  [711,] 0.18181818 1.00000000 0.36363636  6.936516e-03  6.216682e-03 #>  [712,] 0.27272727 1.00000000 0.36363636 -7.770307e-03 -5.431136e-03 #>  [713,] 0.36363636 1.00000000 0.36363636 -9.382807e-05  1.777264e-04 #>  [714,] 0.45454545 1.00000000 0.36363636 -7.484760e-03 -5.766601e-03 #>  [715,] 0.54545455 1.00000000 0.36363636  2.896721e-03  5.266207e-03 #>  [716,] 0.63636364 1.00000000 0.36363636  2.321535e-03  9.523283e-03 #>  [717,] 0.72727273 1.00000000 0.36363636  2.856194e-03  7.936878e-04 #>  [718,] 0.81818182 1.00000000 0.36363636 -6.653139e-03  4.345632e-03 #>  [719,] 0.90909091 1.00000000 0.36363636  1.060328e-03 -1.698042e-03 #>  [720,] 1.00000000 1.00000000 0.36363636 -9.335116e-05  1.917629e-03 #>  [721,] 0.00000000 0.00000000 0.45454545  2.812755e-03 -6.785608e-04 #>  [722,] 0.09090909 0.00000000 0.45454545 -4.474200e-03 -3.846578e-03 #>  [723,] 0.18181818 0.00000000 0.45454545 -2.119926e-03 -6.658372e-03 #>  [724,] 0.27272727 0.00000000 0.45454545 -9.850966e-03  7.818241e-03 #>  [725,] 0.36363636 0.00000000 0.45454545  4.594199e-03 -1.384210e-03 #>  [726,] 0.45454545 0.00000000 0.45454545 -3.229181e-03 -9.730293e-03 #>  [727,] 0.54545455 0.00000000 0.45454545 -4.752616e-04 -5.473092e-04 #>  [728,] 0.63636364 0.00000000 0.45454545  6.688702e-03  2.374465e-03 #>  [729,] 0.72727273 0.00000000 0.45454545 -6.182801e-04  5.180924e-05 #>  [730,] 0.81818182 0.00000000 0.45454545 -3.195089e-03 -9.708902e-03 #>  [731,] 0.90909091 0.00000000 0.45454545  5.840398e-03 -9.375875e-03 #>  [732,] 1.00000000 0.00000000 0.45454545  4.305718e-03 -3.057390e-03 #>  [733,] 0.00000000 0.09090909 0.45454545  2.306466e-03  7.046249e-03 #>  [734,] 0.09090909 0.09090909 0.45454545  4.094133e-03 -6.209414e-03 #>  [735,] 0.18181818 0.09090909 0.45454545 -7.330910e-03 -8.939810e-03 #>  [736,] 0.27272727 0.09090909 0.45454545 -9.090753e-03  9.435201e-03 #>  [737,] 0.36363636 0.09090909 0.45454545  5.425913e-03 -1.776452e-03 #>  [738,] 0.45454545 0.09090909 0.45454545  4.000385e-03  2.959643e-03 #>  [739,] 0.54545455 0.09090909 0.45454545  1.938587e-03 -3.627606e-03 #>  [740,] 0.63636364 0.09090909 0.45454545 -9.778689e-03  5.783116e-03 #>  [741,] 0.72727273 0.09090909 0.45454545  8.057651e-04  4.423359e-03 #>  [742,] 0.81818182 0.09090909 0.45454545  1.637377e-03 -4.265797e-05 #>  [743,] 0.90909091 0.09090909 0.45454545  4.297362e-03  9.819964e-03 #>  [744,] 1.00000000 0.09090909 0.45454545 -7.320791e-04 -8.060392e-03 #>  [745,] 0.00000000 0.18181818 0.45454545  1.616756e-03 -1.732688e-03 #>  [746,] 0.09090909 0.18181818 0.45454545 -1.883002e-03 -5.412299e-03 #>  [747,] 0.18181818 0.18181818 0.45454545  2.242917e-03  5.691982e-03 #>  [748,] 0.27272727 0.18181818 0.45454545  4.635385e-03  2.757345e-03 #>  [749,] 0.36363636 0.18181818 0.45454545 -6.643488e-03  9.701733e-03 #>  [750,] 0.45454545 0.18181818 0.45454545 -9.437082e-03 -6.759811e-03 #>  [751,] 0.54545455 0.18181818 0.45454545 -2.509639e-03  9.875725e-03 #>  [752,] 0.63636364 0.18181818 0.45454545  6.404361e-03 -6.207280e-03 #>  [753,] 0.72727273 0.18181818 0.45454545 -6.275678e-03 -3.388325e-03 #>  [754,] 0.81818182 0.18181818 0.45454545 -2.042926e-03 -6.210949e-03 #>  [755,] 0.90909091 0.18181818 0.45454545  8.082722e-03  3.810008e-03 #>  [756,] 1.00000000 0.18181818 0.45454545  2.617769e-03 -1.107365e-03 #>  [757,] 0.00000000 0.27272727 0.45454545  7.270290e-05  7.353035e-04 #>  [758,] 0.09090909 0.27272727 0.45454545 -3.674960e-03  2.074688e-03 #>  [759,] 0.18181818 0.27272727 0.45454545  6.414385e-03 -8.066434e-03 #>  [760,] 0.27272727 0.27272727 0.45454545  7.797005e-03 -6.983893e-03 #>  [761,] 0.36363636 0.27272727 0.45454545 -5.841156e-04  6.900441e-03 #>  [762,] 0.45454545 0.27272727 0.45454545 -6.493529e-03 -4.045681e-03 #>  [763,] 0.54545455 0.27272727 0.45454545 -6.116527e-03  4.065843e-03 #>  [764,] 0.63636364 0.27272727 0.45454545 -6.328286e-03 -7.816245e-03 #>  [765,] 0.72727273 0.27272727 0.45454545  3.980553e-03  3.516955e-03 #>  [766,] 0.81818182 0.27272727 0.45454545 -8.366297e-03 -3.421856e-03 #>  [767,] 0.90909091 0.27272727 0.45454545  2.446630e-03 -6.237977e-03 #>  [768,] 1.00000000 0.27272727 0.45454545  5.861840e-03  8.792184e-04 #>  [769,] 0.00000000 0.36363636 0.45454545 -6.134298e-03 -8.632181e-03 #>  [770,] 0.09090909 0.36363636 0.45454545  4.380584e-03  4.759256e-04 #>  [771,] 0.18181818 0.36363636 0.45454545  3.903315e-03  5.182443e-03 #>  [772,] 0.27272727 0.36363636 0.45454545  7.829667e-03 -7.527881e-03 #>  [773,] 0.36363636 0.36363636 0.45454545  5.571051e-03 -6.705870e-03 #>  [774,] 0.45454545 0.36363636 0.45454545 -7.989554e-03  4.062468e-03 #>  [775,] 0.54545455 0.36363636 0.45454545  7.865417e-03 -3.442442e-03 #>  [776,] 0.63636364 0.36363636 0.45454545 -9.632355e-03 -6.986757e-03 #>  [777,] 0.72727273 0.36363636 0.45454545  8.229853e-03 -7.465762e-03 #>  [778,] 0.81818182 0.36363636 0.45454545 -2.373078e-03  6.892935e-03 #>  [779,] 0.90909091 0.36363636 0.45454545  2.844180e-03 -8.848787e-03 #>  [780,] 1.00000000 0.36363636 0.45454545 -9.554388e-03 -2.985054e-03 #>  [781,] 0.00000000 0.45454545 0.45454545  1.979969e-03 -9.255546e-03 #>  [782,] 0.09090909 0.45454545 0.45454545  2.533766e-03 -6.564532e-03 #>  [783,] 0.18181818 0.45454545 0.45454545 -5.729585e-03 -8.157117e-03 #>  [784,] 0.27272727 0.45454545 0.45454545  6.304524e-03  5.821534e-03 #>  [785,] 0.36363636 0.45454545 0.45454545 -1.388101e-03  9.917563e-04 #>  [786,] 0.45454545 0.45454545 0.45454545 -2.784150e-03 -3.338642e-03 #>  [787,] 0.54545455 0.45454545 0.45454545 -1.956273e-03  8.438962e-03 #>  [788,] 0.63636364 0.45454545 0.45454545  3.107354e-03  9.373891e-03 #>  [789,] 0.72727273 0.45454545 0.45454545 -2.497542e-03 -9.984497e-03 #>  [790,] 0.81818182 0.45454545 0.45454545 -8.884548e-03  4.536402e-03 #>  [791,] 0.90909091 0.45454545 0.45454545  3.359346e-03  6.623637e-03 #>  [792,] 1.00000000 0.45454545 0.45454545 -4.691035e-03  2.523823e-03 #>  [793,] 0.00000000 0.54545455 0.45454545 -3.300598e-03  1.826273e-03 #>  [794,] 0.09090909 0.54545455 0.45454545  1.164499e-03  8.408809e-03 #>  [795,] 0.18181818 0.54545455 0.45454545 -9.668667e-03  5.941347e-04 #>  [796,] 0.27272727 0.54545455 0.45454545  9.269286e-03 -5.611296e-04 #>  [797,] 0.36363636 0.54545455 0.45454545 -2.252676e-03  5.151417e-03 #>  [798,] 0.45454545 0.54545455 0.45454545  8.068387e-03  5.869702e-03 #>  [799,] 0.54545455 0.54545455 0.45454545 -3.533772e-04 -6.818597e-03 #>  [800,] 0.63636364 0.54545455 0.45454545  7.038829e-03 -5.286811e-04 #>  [801,] 0.72727273 0.54545455 0.45454545 -5.361016e-03  9.901796e-03 #>  [802,] 0.81818182 0.54545455 0.45454545  4.156605e-03  1.136414e-03 #>  [803,] 0.90909091 0.54545455 0.45454545  6.274673e-04 -8.559889e-03 #>  [804,] 1.00000000 0.54545455 0.45454545 -2.462489e-03  1.595062e-03 #>  [805,] 0.00000000 0.63636364 0.45454545  6.044650e-05  8.070688e-03 #>  [806,] 0.09090909 0.63636364 0.45454545 -8.217284e-03  9.539746e-03 #>  [807,] 0.18181818 0.63636364 0.45454545 -2.433696e-03 -8.752313e-03 #>  [808,] 0.27272727 0.63636364 0.45454545  4.765723e-03 -3.843552e-03 #>  [809,] 0.36363636 0.63636364 0.45454545 -5.196624e-03 -6.805931e-03 #>  [810,] 0.45454545 0.63636364 0.45454545  5.483252e-03 -4.120154e-03 #>  [811,] 0.54545455 0.63636364 0.45454545  5.718112e-03 -2.681525e-03 #>  [812,] 0.63636364 0.63636364 0.45454545 -3.522891e-03  4.423747e-03 #>  [813,] 0.72727273 0.63636364 0.45454545 -7.915422e-03  8.653830e-03 #>  [814,] 0.81818182 0.63636364 0.45454545  4.181552e-03  2.172966e-05 #>  [815,] 0.90909091 0.63636364 0.45454545 -3.643454e-03  6.815382e-03 #>  [816,] 1.00000000 0.63636364 0.45454545  7.946926e-04  8.553917e-03 #>  [817,] 0.00000000 0.72727273 0.45454545  2.132298e-03 -3.738742e-03 #>  [818,] 0.09090909 0.72727273 0.45454545  2.084351e-03 -3.679917e-03 #>  [819,] 0.18181818 0.72727273 0.45454545 -2.961390e-03  6.039775e-03 #>  [820,] 0.27272727 0.72727273 0.45454545  5.183648e-04 -1.430800e-04 #>  [821,] 0.36363636 0.72727273 0.45454545 -6.221450e-03 -1.506605e-03 #>  [822,] 0.45454545 0.72727273 0.45454545  5.160934e-03  6.701706e-04 #>  [823,] 0.54545455 0.72727273 0.45454545 -4.168659e-03  4.385865e-03 #>  [824,] 0.63636364 0.72727273 0.45454545 -4.758209e-03 -4.425421e-03 #>  [825,] 0.72727273 0.72727273 0.45454545  5.085459e-03 -5.404709e-03 #>  [826,] 0.81818182 0.72727273 0.45454545 -6.157644e-03  5.045936e-03 #>  [827,] 0.90909091 0.72727273 0.45454545 -7.144031e-03 -6.291753e-03 #>  [828,] 1.00000000 0.72727273 0.45454545  9.690715e-03  7.623285e-03 #>  [829,] 0.00000000 0.81818182 0.45454545 -3.484545e-03 -8.475463e-04 #>  [830,] 0.09090909 0.81818182 0.45454545  1.627127e-03 -1.344479e-03 #>  [831,] 0.18181818 0.81818182 0.45454545  7.493678e-03 -2.738393e-03 #>  [832,] 0.27272727 0.81818182 0.45454545 -2.305905e-03 -2.049118e-03 #>  [833,] 0.36363636 0.81818182 0.45454545 -4.827331e-03  3.383489e-03 #>  [834,] 0.45454545 0.81818182 0.45454545 -3.159341e-03  2.948834e-03 #>  [835,] 0.54545455 0.81818182 0.45454545  3.644622e-03 -4.942061e-03 #>  [836,] 0.63636364 0.81818182 0.45454545 -7.288422e-03  3.297705e-03 #>  [837,] 0.72727273 0.81818182 0.45454545 -1.696335e-03 -9.646466e-04 #>  [838,] 0.81818182 0.81818182 0.45454545 -7.735834e-03 -5.311312e-03 #>  [839,] 0.90909091 0.81818182 0.45454545 -6.034434e-03 -9.621041e-03 #>  [840,] 1.00000000 0.81818182 0.45454545  5.144250e-03 -7.142136e-03 #>  [841,] 0.00000000 0.90909091 0.45454545 -1.542690e-03  5.180406e-03 #>  [842,] 0.09090909 0.90909091 0.45454545  5.970079e-03  6.791739e-03 #>  [843,] 0.18181818 0.90909091 0.45454545 -6.389904e-03 -4.262303e-04 #>  [844,] 0.27272727 0.90909091 0.45454545  1.926978e-03  9.201902e-04 #>  [845,] 0.36363636 0.90909091 0.45454545 -4.636024e-03 -3.216624e-03 #>  [846,] 0.45454545 0.90909091 0.45454545 -6.054179e-03 -4.593309e-03 #>  [847,] 0.54545455 0.90909091 0.45454545 -5.199451e-03 -5.159154e-03 #>  [848,] 0.63636364 0.90909091 0.45454545 -7.206452e-03  1.016960e-03 #>  [849,] 0.72727273 0.90909091 0.45454545  1.364051e-03  1.166292e-03 #>  [850,] 0.81818182 0.90909091 0.45454545  2.755325e-03  5.937686e-03 #>  [851,] 0.90909091 0.90909091 0.45454545  2.780815e-04 -1.739298e-03 #>  [852,] 1.00000000 0.90909091 0.45454545 -6.106617e-03  7.659339e-03 #>  [853,] 0.00000000 1.00000000 0.45454545  2.050425e-03 -4.695060e-03 #>  [854,] 0.09090909 1.00000000 0.45454545 -3.630548e-03  2.149230e-03 #>  [855,] 0.18181818 1.00000000 0.45454545  6.378407e-04  5.595832e-03 #>  [856,] 0.27272727 1.00000000 0.45454545 -6.624362e-03 -9.491574e-08 #>  [857,] 0.36363636 1.00000000 0.45454545  4.498885e-03  2.808349e-03 #>  [858,] 0.45454545 1.00000000 0.45454545  4.149719e-03  9.344779e-03 #>  [859,] 0.54545455 1.00000000 0.45454545  6.253354e-03 -6.189031e-03 #>  [860,] 0.63636364 1.00000000 0.45454545 -8.000476e-04  3.626057e-03 #>  [861,] 0.72727273 1.00000000 0.45454545  1.510535e-03  1.594029e-03 #>  [862,] 0.81818182 1.00000000 0.45454545  1.504449e-04 -1.547455e-03 #>  [863,] 0.90909091 1.00000000 0.45454545  6.176359e-03 -6.834389e-03 #>  [864,] 1.00000000 1.00000000 0.45454545 -4.235586e-03 -6.411442e-03 #>  [865,] 0.00000000 0.00000000 0.54545455 -2.160774e-03  8.946394e-03 #>  [866,] 0.09090909 0.00000000 0.54545455 -7.585491e-03 -4.762777e-03 #>  [867,] 0.18181818 0.00000000 0.54545455 -8.341189e-03  9.259235e-03 #>  [868,] 0.27272727 0.00000000 0.54545455 -6.855263e-03  8.375024e-03 #>  [869,] 0.36363636 0.00000000 0.54545455  6.403809e-03 -9.117877e-04 #>  [870,] 0.45454545 0.00000000 0.54545455  1.757696e-03 -5.592713e-03 #>  [871,] 0.54545455 0.00000000 0.54545455 -6.262582e-03  5.380008e-03 #>  [872,] 0.63636364 0.00000000 0.54545455 -4.929661e-03  5.667473e-03 #>  [873,] 0.72727273 0.00000000 0.54545455  7.267627e-03 -6.063868e-03 #>  [874,] 0.81818182 0.00000000 0.54545455  5.918576e-03 -5.603815e-03 #>  [875,] 0.90909091 0.00000000 0.54545455  7.086915e-03  3.617571e-03 #>  [876,] 1.00000000 0.00000000 0.54545455  1.740508e-03  1.531713e-03 #>  [877,] 0.00000000 0.09090909 0.54545455 -5.182422e-03  2.203932e-03 #>  [878,] 0.09090909 0.09090909 0.54545455  1.210948e-03 -1.981464e-03 #>  [879,] 0.18181818 0.09090909 0.54545455 -2.522952e-05  5.922054e-03 #>  [880,] 0.27272727 0.09090909 0.54545455  7.716597e-03 -5.921533e-03 #>  [881,] 0.36363636 0.09090909 0.54545455  6.185391e-03 -8.830187e-03 #>  [882,] 0.45454545 0.09090909 0.54545455 -5.191164e-03 -2.095294e-03 #>  [883,] 0.54545455 0.09090909 0.54545455  7.448352e-03 -6.433197e-03 #>  [884,] 0.63636364 0.09090909 0.54545455 -6.912193e-03  8.189924e-03 #>  [885,] 0.72727273 0.09090909 0.54545455  6.200906e-03 -7.145878e-03 #>  [886,] 0.81818182 0.09090909 0.54545455 -9.325107e-03 -3.396023e-03 #>  [887,] 0.90909091 0.09090909 0.54545455  7.819915e-03  9.516453e-03 #>  [888,] 1.00000000 0.09090909 0.54545455 -9.009528e-03  7.515602e-03 #>  [889,] 0.00000000 0.18181818 0.54545455  2.715042e-03  8.430268e-04 #>  [890,] 0.09090909 0.18181818 0.54545455  1.973778e-03  6.684394e-04 #>  [891,] 0.18181818 0.18181818 0.54545455 -6.133051e-03 -1.548959e-03 #>  [892,] 0.27272727 0.18181818 0.54545455  2.670896e-04  5.694942e-03 #>  [893,] 0.36363636 0.18181818 0.54545455  9.314638e-03 -4.952864e-03 #>  [894,] 0.45454545 0.18181818 0.54545455 -7.789681e-03 -1.136867e-03 #>  [895,] 0.54545455 0.18181818 0.54545455  2.932371e-03 -7.174317e-03 #>  [896,] 0.63636364 0.18181818 0.54545455  6.598947e-03  3.683367e-03 #>  [897,] 0.72727273 0.18181818 0.54545455 -9.691025e-03  6.174356e-03 #>  [898,] 0.81818182 0.18181818 0.54545455 -7.136460e-03  4.051156e-03 #>  [899,] 0.90909091 0.18181818 0.54545455  7.684945e-04  8.155864e-03 #>  [900,] 1.00000000 0.18181818 0.54545455 -3.692478e-03 -1.716419e-03 #>  [901,] 0.00000000 0.27272727 0.54545455 -6.722140e-04 -6.695272e-03 #>  [902,] 0.09090909 0.27272727 0.54545455 -5.019875e-03 -5.611488e-03 #>  [903,] 0.18181818 0.27272727 0.54545455 -7.459241e-03  4.825824e-03 #>  [904,] 0.27272727 0.27272727 0.54545455 -4.934753e-03  4.770942e-03 #>  [905,] 0.36363636 0.27272727 0.54545455 -9.562904e-03  2.988966e-03 #>  [906,] 0.45454545 0.27272727 0.54545455 -6.809803e-03  1.582941e-03 #>  [907,] 0.54545455 0.27272727 0.54545455 -3.957030e-03 -5.614492e-04 #>  [908,] 0.63636364 0.27272727 0.54545455 -7.261439e-03  5.356675e-03 #>  [909,] 0.72727273 0.27272727 0.54545455 -8.331894e-03 -8.608645e-03 #>  [910,] 0.81818182 0.27272727 0.54545455 -9.354184e-03 -2.097204e-03 #>  [911,] 0.90909091 0.27272727 0.54545455  9.736626e-03 -8.699633e-03 #>  [912,] 1.00000000 0.27272727 0.54545455  4.655935e-03 -2.486758e-03 #>  [913,] 0.00000000 0.36363636 0.54545455  2.480891e-03 -3.977814e-03 #>  [914,] 0.09090909 0.36363636 0.54545455 -2.999870e-03  1.951536e-03 #>  [915,] 0.18181818 0.36363636 0.54545455 -8.857741e-03 -2.173045e-03 #>  [916,] 0.27272727 0.36363636 0.54545455 -1.429551e-03  7.778177e-03 #>  [917,] 0.36363636 0.36363636 0.54545455  4.928212e-03 -3.877531e-03 #>  [918,] 0.45454545 0.36363636 0.54545455 -3.095627e-03 -1.575311e-03 #>  [919,] 0.54545455 0.36363636 0.54545455 -7.300714e-03  9.996680e-03 #>  [920,] 0.63636364 0.36363636 0.54545455  9.917578e-03  8.022430e-03 #>  [921,] 0.72727273 0.36363636 0.54545455  7.584051e-03 -3.310021e-03 #>  [922,] 0.81818182 0.36363636 0.54545455  2.509274e-03  8.980910e-03 #>  [923,] 0.90909091 0.36363636 0.54545455  1.604248e-03 -4.488780e-03 #>  [924,] 1.00000000 0.36363636 0.54545455 -9.269185e-03  6.100311e-03 #>  [925,] 0.00000000 0.45454545 0.54545455 -1.656964e-03  8.691321e-03 #>  [926,] 0.09090909 0.45454545 0.54545455 -3.679556e-03  5.971033e-03 #>  [927,] 0.18181818 0.45454545 0.54545455 -7.535487e-03  3.283319e-03 #>  [928,] 0.27272727 0.45454545 0.54545455 -5.500085e-03  6.643934e-03 #>  [929,] 0.36363636 0.45454545 0.54545455  5.556160e-03 -3.546533e-03 #>  [930,] 0.45454545 0.45454545 0.54545455  6.456303e-03 -1.648786e-03 #>  [931,] 0.54545455 0.45454545 0.54545455  6.478940e-03 -5.696998e-03 #>  [932,] 0.63636364 0.45454545 0.54545455  5.110783e-03 -6.990033e-03 #>  [933,] 0.72727273 0.45454545 0.54545455 -7.979182e-03 -1.452055e-03 #>  [934,] 0.81818182 0.45454545 0.54545455 -7.309045e-03  8.559220e-03 #>  [935,] 0.90909091 0.45454545 0.54545455 -9.671394e-03 -2.169441e-03 #>  [936,] 1.00000000 0.45454545 0.54545455  2.319205e-03 -2.832533e-03 #>  [937,] 0.00000000 0.54545455 0.54545455 -2.746760e-03 -4.496584e-03 #>  [938,] 0.09090909 0.54545455 0.54545455  5.791763e-03 -8.474091e-03 #>  [939,] 0.18181818 0.54545455 0.54545455 -3.716842e-03  6.881677e-03 #>  [940,] 0.27272727 0.54545455 0.54545455 -2.247771e-03 -3.767461e-03 #>  [941,] 0.36363636 0.54545455 0.54545455  4.331708e-03  6.830024e-03 #>  [942,] 0.45454545 0.54545455 0.54545455 -7.238776e-04 -5.300972e-03 #>  [943,] 0.54545455 0.54545455 0.54545455  7.630534e-03  6.882494e-03 #>  [944,] 0.63636364 0.54545455 0.54545455 -7.501551e-03 -2.179096e-03 #>  [945,] 0.72727273 0.54545455 0.54545455 -2.599460e-03  5.424188e-04 #>  [946,] 0.81818182 0.54545455 0.54545455  9.246510e-03  6.458686e-03 #>  [947,] 0.90909091 0.54545455 0.54545455  8.170792e-04  6.276268e-03 #>  [948,] 1.00000000 0.54545455 0.54545455 -3.610479e-03 -8.687241e-04 #>  [949,] 0.00000000 0.63636364 0.54545455 -8.779203e-03 -5.283609e-03 #>  [950,] 0.09090909 0.63636364 0.54545455  4.441212e-06 -7.216102e-03 #>  [951,] 0.18181818 0.63636364 0.54545455  2.941071e-03 -1.900956e-03 #>  [952,] 0.27272727 0.63636364 0.54545455 -2.926682e-03 -5.661962e-03 #>  [953,] 0.36363636 0.63636364 0.54545455 -8.345250e-03  5.627463e-03 #>  [954,] 0.45454545 0.63636364 0.54545455  9.367653e-03  8.490125e-03 #>  [955,] 0.54545455 0.63636364 0.54545455  2.780543e-03  2.506885e-03 #>  [956,] 0.63636364 0.63636364 0.54545455  2.812601e-03  4.467889e-03 #>  [957,] 0.72727273 0.63636364 0.54545455  6.088995e-03  3.382657e-06 #>  [958,] 0.81818182 0.63636364 0.54545455  5.469301e-03 -9.036812e-03 #>  [959,] 0.90909091 0.63636364 0.54545455 -6.272883e-03  3.651639e-03 #>  [960,] 1.00000000 0.63636364 0.54545455 -4.140425e-03  2.457280e-03 #>  [961,] 0.00000000 0.72727273 0.54545455 -5.132373e-03 -4.660702e-03 #>  [962,] 0.09090909 0.72727273 0.54545455  3.558491e-03 -6.460729e-03 #>  [963,] 0.18181818 0.72727273 0.54545455 -9.871616e-03  9.303945e-03 #>  [964,] 0.27272727 0.72727273 0.54545455  8.306679e-03 -1.411844e-03 #>  [965,] 0.36363636 0.72727273 0.54545455 -3.546894e-03  3.035494e-03 #>  [966,] 0.45454545 0.72727273 0.54545455 -6.676059e-03  1.045051e-03 #>  [967,] 0.54545455 0.72727273 0.54545455 -3.502860e-03  5.413547e-03 #>  [968,] 0.63636364 0.72727273 0.54545455  5.612941e-03 -7.530032e-03 #>  [969,] 0.72727273 0.72727273 0.54545455 -8.792236e-03  4.102871e-03 #>  [970,] 0.81818182 0.72727273 0.54545455  5.732642e-04 -7.447068e-03 #>  [971,] 0.90909091 0.72727273 0.54545455 -9.509922e-03 -8.350874e-03 #>  [972,] 1.00000000 0.72727273 0.54545455 -6.585446e-03 -5.958564e-03 #>  [973,] 0.00000000 0.81818182 0.54545455 -2.424339e-03  8.773960e-04 #>  [974,] 0.09090909 0.81818182 0.54545455 -1.196074e-03 -7.306861e-03 #>  [975,] 0.18181818 0.81818182 0.54545455  2.180392e-03 -8.407979e-03 #>  [976,] 0.27272727 0.81818182 0.54545455 -7.655089e-03 -8.561111e-03 #>  [977,] 0.36363636 0.81818182 0.54545455  7.979003e-04 -1.073283e-03 #>  [978,] 0.45454545 0.81818182 0.54545455  3.589218e-05  5.342912e-03 #>  [979,] 0.54545455 0.81818182 0.54545455  1.071758e-03  9.369412e-05 #>  [980,] 0.63636364 0.81818182 0.54545455 -9.323711e-03 -7.667982e-03 #>  [981,] 0.72727273 0.81818182 0.54545455  6.676470e-03 -5.902607e-03 #>  [982,] 0.81818182 0.81818182 0.54545455 -5.857323e-03  2.098684e-03 #>  [983,] 0.90909091 0.81818182 0.54545455 -6.165030e-03 -5.094083e-03 #>  [984,] 1.00000000 0.81818182 0.54545455 -1.514861e-03  1.966778e-03 #>  [985,] 0.00000000 0.90909091 0.54545455  1.497797e-03  9.681516e-03 #>  [986,] 0.09090909 0.90909091 0.54545455 -8.916289e-04  9.169235e-03 #>  [987,] 0.18181818 0.90909091 0.54545455 -9.346094e-03 -8.011184e-03 #>  [988,] 0.27272727 0.90909091 0.54545455  5.181565e-03 -7.223544e-03 #>  [989,] 0.36363636 0.90909091 0.54545455  1.074721e-03  9.061745e-03 #>  [990,] 0.45454545 0.90909091 0.54545455  2.772588e-03 -5.834328e-03 #>  [991,] 0.54545455 0.90909091 0.54545455 -8.969186e-04 -5.087748e-03 #>  [992,] 0.63636364 0.90909091 0.54545455  2.364968e-03 -8.932150e-03 #>  [993,] 0.72727273 0.90909091 0.54545455  6.686976e-03 -6.848330e-03 #>  [994,] 0.81818182 0.90909091 0.54545455  5.471906e-03  7.544406e-03 #>  [995,] 0.90909091 0.90909091 0.54545455 -8.339848e-03 -3.794079e-03 #>  [996,] 1.00000000 0.90909091 0.54545455 -3.312070e-03 -6.003436e-05 #>  [997,] 0.00000000 1.00000000 0.54545455 -5.933170e-03 -4.841425e-03 #>  [998,] 0.09090909 1.00000000 0.54545455  3.178134e-03  5.640236e-03 #>  [999,] 0.18181818 1.00000000 0.54545455 -8.740130e-03 -8.054132e-04 #> [1000,] 0.27272727 1.00000000 0.54545455  7.193897e-03 -2.749520e-03 #> [1001,] 0.36363636 1.00000000 0.54545455  6.766004e-03 -6.534870e-03 #> [1002,] 0.45454545 1.00000000 0.54545455 -8.445437e-03  3.824968e-03 #> [1003,] 0.54545455 1.00000000 0.54545455 -5.246584e-03  3.323475e-03 #> [1004,] 0.63636364 1.00000000 0.54545455 -5.462559e-03 -5.056567e-04 #> [1005,] 0.72727273 1.00000000 0.54545455  5.291099e-04  2.161910e-03 #> [1006,] 0.81818182 1.00000000 0.54545455  3.563882e-03 -7.174347e-03 #> [1007,] 0.90909091 1.00000000 0.54545455 -8.428988e-04  4.698049e-03 #> [1008,] 1.00000000 1.00000000 0.54545455  2.456768e-03 -7.239109e-03 #> [1009,] 0.00000000 0.00000000 0.63636364 -5.679460e-03 -6.933823e-03 #> [1010,] 0.09090909 0.00000000 0.63636364  6.123853e-03  3.853856e-03 #> [1011,] 0.18181818 0.00000000 0.63636364  6.208620e-04  4.208138e-03 #> [1012,] 0.27272727 0.00000000 0.63636364 -7.649099e-03 -9.309243e-03 #> [1013,] 0.36363636 0.00000000 0.63636364  9.949582e-03  5.523626e-03 #> [1014,] 0.45454545 0.00000000 0.63636364 -7.077090e-03 -9.122999e-03 #> [1015,] 0.54545455 0.00000000 0.63636364  8.011152e-03 -2.396651e-03 #> [1016,] 0.63636364 0.00000000 0.63636364  6.249883e-03 -9.610576e-03 #> [1017,] 0.72727273 0.00000000 0.63636364 -2.370954e-03  5.063901e-04 #> [1018,] 0.81818182 0.00000000 0.63636364  5.095336e-03 -2.146310e-03 #> [1019,] 0.90909091 0.00000000 0.63636364  9.230215e-04 -2.544533e-03 #> [1020,] 1.00000000 0.00000000 0.63636364  8.992536e-03  7.070651e-03 #> [1021,] 0.00000000 0.09090909 0.63636364 -7.469049e-03  9.597915e-03 #> [1022,] 0.09090909 0.09090909 0.63636364  2.278308e-03 -2.598738e-03 #> [1023,] 0.18181818 0.09090909 0.63636364 -5.153603e-03 -2.505984e-04 #> [1024,] 0.27272727 0.09090909 0.63636364 -3.288010e-03 -9.081056e-03 #> [1025,] 0.36363636 0.09090909 0.63636364  7.553054e-03  8.041057e-03 #> [1026,] 0.45454545 0.09090909 0.63636364  3.027438e-03  8.428373e-03 #> [1027,] 0.54545455 0.09090909 0.63636364 -3.683876e-03  4.423171e-03 #> [1028,] 0.63636364 0.09090909 0.63636364  2.063012e-03  3.606414e-03 #> [1029,] 0.72727273 0.09090909 0.63636364 -6.191843e-03 -1.564317e-03 #> [1030,] 0.81818182 0.09090909 0.63636364 -9.107600e-03  5.255658e-03 #> [1031,] 0.90909091 0.09090909 0.63636364 -5.937974e-03 -4.924506e-03 #> [1032,] 1.00000000 0.09090909 0.63636364  1.804341e-03 -7.929901e-03 #> [1033,] 0.00000000 0.18181818 0.63636364 -6.058352e-03  3.491448e-03 #> [1034,] 0.09090909 0.18181818 0.63636364  1.593772e-03 -8.335604e-03 #> [1035,] 0.18181818 0.18181818 0.63636364  4.019293e-03 -5.527144e-03 #> [1036,] 0.27272727 0.18181818 0.63636364 -7.987927e-03 -4.056303e-03 #> [1037,] 0.36363636 0.18181818 0.63636364 -1.841765e-03 -1.120387e-03 #> [1038,] 0.45454545 0.18181818 0.63636364 -2.449014e-03 -6.631511e-03 #> [1039,] 0.54545455 0.18181818 0.63636364 -3.490609e-03  6.625003e-03 #> [1040,] 0.63636364 0.18181818 0.63636364  1.085203e-03 -1.782825e-03 #> [1041,] 0.72727273 0.18181818 0.63636364  4.095397e-03 -5.836647e-03 #> [1042,] 0.81818182 0.18181818 0.63636364  9.242691e-03 -7.551912e-03 #> [1043,] 0.90909091 0.18181818 0.63636364  4.164880e-03  6.078923e-03 #> [1044,] 1.00000000 0.18181818 0.63636364 -6.687890e-03 -7.567954e-03 #> [1045,] 0.00000000 0.27272727 0.63636364  7.972554e-03  6.973775e-03 #> [1046,] 0.09090909 0.27272727 0.63636364 -7.989996e-03 -6.942310e-03 #> [1047,] 0.18181818 0.27272727 0.63636364  1.845233e-03 -6.115045e-03 #> [1048,] 0.27272727 0.27272727 0.63636364 -2.454105e-03  2.043756e-03 #> [1049,] 0.36363636 0.27272727 0.63636364  5.842695e-03 -3.078686e-03 #> [1050,] 0.45454545 0.27272727 0.63636364 -9.650541e-03  5.550492e-03 #> [1051,] 0.54545455 0.27272727 0.63636364 -3.638041e-03 -5.585674e-03 #> [1052,] 0.63636364 0.27272727 0.63636364 -2.709253e-03 -6.495107e-03 #> [1053,] 0.72727273 0.27272727 0.63636364  1.613735e-03  7.688896e-03 #> [1054,] 0.81818182 0.27272727 0.63636364 -4.913100e-03 -4.259085e-03 #> [1055,] 0.90909091 0.27272727 0.63636364 -2.037663e-04  4.498118e-03 #> [1056,] 1.00000000 0.27272727 0.63636364  6.581605e-03 -2.698795e-04 #> [1057,] 0.00000000 0.36363636 0.63636364  8.609766e-03 -8.737682e-03 #> [1058,] 0.09090909 0.36363636 0.63636364 -9.228681e-03  6.699232e-03 #> [1059,] 0.18181818 0.36363636 0.63636364 -6.002169e-03  2.692008e-03 #> [1060,] 0.27272727 0.36363636 0.63636364  7.846017e-03 -4.993842e-03 #> [1061,] 0.36363636 0.36363636 0.63636364  5.904751e-04 -7.432424e-03 #> [1062,] 0.45454545 0.36363636 0.63636364  3.406902e-03  1.582810e-03 #> [1063,] 0.54545455 0.36363636 0.63636364 -1.968497e-03 -6.887501e-03 #> [1064,] 0.63636364 0.36363636 0.63636364 -5.591546e-03  2.275710e-03 #> [1065,] 0.72727273 0.36363636 0.63636364  1.098217e-03 -8.694122e-03 #> [1066,] 0.81818182 0.36363636 0.63636364  2.879814e-03 -2.487645e-03 #> [1067,] 0.90909091 0.36363636 0.63636364  9.826416e-04  1.401502e-03 #> [1068,] 1.00000000 0.36363636 0.63636364 -6.894140e-03 -2.350776e-03 #> [1069,] 0.00000000 0.45454545 0.63636364  3.210708e-03  8.722871e-03 #> [1070,] 0.09090909 0.45454545 0.63636364  5.323151e-03  4.771774e-03 #> [1071,] 0.18181818 0.45454545 0.63636364  6.203651e-03  4.862389e-03 #> [1072,] 0.27272727 0.45454545 0.63636364 -4.133305e-04 -6.849299e-03 #> [1073,] 0.36363636 0.45454545 0.63636364  2.441081e-03  9.653308e-03 #> [1074,] 0.45454545 0.45454545 0.63636364 -6.486332e-03 -9.568795e-03 #> [1075,] 0.54545455 0.45454545 0.63636364  8.100506e-03  6.380514e-03 #> [1076,] 0.63636364 0.45454545 0.63636364 -6.009256e-03 -7.842578e-03 #> [1077,] 0.72727273 0.45454545 0.63636364  7.299349e-03 -5.966330e-03 #> [1078,] 0.81818182 0.45454545 0.63636364  8.266172e-03  5.075057e-03 #> [1079,] 0.90909091 0.45454545 0.63636364 -1.828255e-03  2.503121e-03 #> [1080,] 1.00000000 0.45454545 0.63636364 -5.176701e-03 -8.222022e-03 #> [1081,] 0.00000000 0.54545455 0.63636364  4.709359e-03 -2.193358e-03 #> [1082,] 0.09090909 0.54545455 0.63636364  2.882576e-03 -5.268463e-04 #> [1083,] 0.18181818 0.54545455 0.63636364 -7.222095e-03  8.557473e-03 #> [1084,] 0.27272727 0.54545455 0.63636364 -5.670438e-03  8.670129e-03 #> [1085,] 0.36363636 0.54545455 0.63636364  4.911605e-03 -1.049553e-03 #> [1086,] 0.45454545 0.54545455 0.63636364  9.520372e-04  6.743444e-03 #> [1087,] 0.54545455 0.54545455 0.63636364  5.295563e-03  4.435791e-03 #> [1088,] 0.63636364 0.54545455 0.63636364  5.981066e-03  5.351111e-03 #> [1089,] 0.72727273 0.54545455 0.63636364 -4.282656e-03 -3.302430e-03 #> [1090,] 0.81818182 0.54545455 0.63636364 -3.227966e-03 -8.995426e-03 #> [1091,] 0.90909091 0.54545455 0.63636364 -3.439028e-03 -5.999936e-03 #> [1092,] 1.00000000 0.54545455 0.63636364 -6.665368e-03 -3.748173e-03 #> [1093,] 0.00000000 0.63636364 0.63636364 -4.599094e-03 -9.912410e-03 #> [1094,] 0.09090909 0.63636364 0.63636364 -4.065353e-03 -6.398143e-03 #> [1095,] 0.18181818 0.63636364 0.63636364  1.153238e-03  8.324554e-03 #> [1096,] 0.27272727 0.63636364 0.63636364  9.389041e-05 -1.314523e-03 #> [1097,] 0.36363636 0.63636364 0.63636364 -5.343993e-03  4.926338e-03 #> [1098,] 0.45454545 0.63636364 0.63636364 -2.038014e-03 -7.203437e-03 #> [1099,] 0.54545455 0.63636364 0.63636364 -1.553215e-03 -8.628783e-03 #> [1100,] 0.63636364 0.63636364 0.63636364 -4.885772e-03 -7.011286e-03 #> [1101,] 0.72727273 0.63636364 0.63636364  5.093082e-03  9.851001e-03 #> [1102,] 0.81818182 0.63636364 0.63636364 -1.716915e-03  8.088829e-03 #> [1103,] 0.90909091 0.63636364 0.63636364  6.313428e-03 -9.887328e-03 #> [1104,] 1.00000000 0.63636364 0.63636364  7.637259e-04 -1.982933e-03 #> [1105,] 0.00000000 0.72727273 0.63636364  7.874624e-03  4.460559e-03 #> [1106,] 0.09090909 0.72727273 0.63636364  9.664407e-03 -2.810230e-03 #> [1107,] 0.18181818 0.72727273 0.63636364  5.567368e-03 -6.005874e-03 #> [1108,] 0.27272727 0.72727273 0.63636364  1.125480e-03 -2.672830e-03 #> [1109,] 0.36363636 0.72727273 0.63636364 -5.449416e-03 -5.636637e-03 #> [1110,] 0.45454545 0.72727273 0.63636364  9.949024e-03  9.610449e-03 #> [1111,] 0.54545455 0.72727273 0.63636364 -9.108169e-03 -1.956712e-03 #> [1112,] 0.63636364 0.72727273 0.63636364 -5.500631e-04 -9.019854e-03 #> [1113,] 0.72727273 0.72727273 0.63636364  2.560955e-03 -2.232276e-03 #> [1114,] 0.81818182 0.72727273 0.63636364  5.135016e-03 -1.188487e-03 #> [1115,] 0.90909091 0.72727273 0.63636364  8.566981e-03  2.210603e-03 #> [1116,] 1.00000000 0.72727273 0.63636364 -1.459045e-03  6.644593e-03 #> [1117,] 0.00000000 0.81818182 0.63636364 -4.054167e-03 -9.796615e-03 #> [1118,] 0.09090909 0.81818182 0.63636364  5.189953e-03  5.920426e-04 #> [1119,] 0.18181818 0.81818182 0.63636364 -2.881395e-03 -4.293749e-03 #> [1120,] 0.27272727 0.81818182 0.63636364 -1.725313e-03 -4.291714e-03 #> [1121,] 0.36363636 0.81818182 0.63636364 -1.888673e-03 -9.532580e-03 #> [1122,] 0.45454545 0.81818182 0.63636364  3.474956e-03 -1.015886e-03 #> [1123,] 0.54545455 0.81818182 0.63636364 -2.704162e-03  1.477893e-03 #> [1124,] 0.63636364 0.81818182 0.63636364  8.882973e-03 -6.951677e-03 #> [1125,] 0.72727273 0.81818182 0.63636364  9.830489e-03 -2.544336e-03 #> [1126,] 0.81818182 0.81818182 0.63636364 -5.776817e-03 -5.051605e-03 #> [1127,] 0.90909091 0.81818182 0.63636364 -1.682265e-03 -5.313767e-03 #> [1128,] 1.00000000 0.81818182 0.63636364  4.481665e-03  5.558949e-03 #> [1129,] 0.00000000 0.90909091 0.63636364 -2.754664e-03  3.889766e-03 #> [1130,] 0.09090909 0.90909091 0.63636364  7.925556e-03  7.146422e-03 #> [1131,] 0.18181818 0.90909091 0.63636364  8.102848e-03  9.927554e-04 #> [1132,] 0.27272727 0.90909091 0.63636364 -3.501052e-03  9.499848e-03 #> [1133,] 0.36363636 0.90909091 0.63636364 -8.875628e-03 -6.362198e-03 #> [1134,] 0.45454545 0.90909091 0.63636364 -7.440347e-03  9.340175e-03 #> [1135,] 0.54545455 0.90909091 0.63636364  9.473294e-03 -7.955023e-03 #> [1136,] 0.63636364 0.90909091 0.63636364  8.661261e-04  7.262878e-03 #> [1137,] 0.72727273 0.90909091 0.63636364  5.318891e-03 -5.884501e-03 #> [1138,] 0.81818182 0.90909091 0.63636364 -6.859919e-03  8.047587e-03 #> [1139,] 0.90909091 0.90909091 0.63636364 -4.205700e-03 -2.587632e-03 #> [1140,] 1.00000000 0.90909091 0.63636364 -7.003605e-03 -6.330828e-03 #> [1141,] 0.00000000 1.00000000 0.63636364  8.690578e-03  5.154430e-03 #> [1142,] 0.09090909 1.00000000 0.63636364 -5.982430e-03 -9.986435e-03 #> [1143,] 0.18181818 1.00000000 0.63636364 -3.605632e-03  7.909300e-03 #> [1144,] 0.27272727 1.00000000 0.63636364 -3.356585e-03 -8.038584e-03 #> [1145,] 0.36363636 1.00000000 0.63636364 -1.468592e-03  9.353454e-03 #> [1146,] 0.45454545 1.00000000 0.63636364 -1.626430e-03  5.640296e-03 #> [1147,] 0.54545455 1.00000000 0.63636364  5.959976e-03  8.573752e-03 #> [1148,] 0.63636364 1.00000000 0.63636364  6.097427e-03 -5.480521e-04 #> [1149,] 0.72727273 1.00000000 0.63636364  4.325081e-03  1.227197e-03 #> [1150,] 0.81818182 1.00000000 0.63636364 -1.750226e-03 -8.996171e-03 #> [1151,] 0.90909091 1.00000000 0.63636364 -1.961969e-03  8.725351e-03 #> [1152,] 1.00000000 1.00000000 0.63636364  1.797897e-03  3.237845e-04 #> [1153,] 0.00000000 0.00000000 0.72727273 -7.378649e-03 -5.642611e-03 #> [1154,] 0.09090909 0.00000000 0.72727273 -6.010640e-03 -5.546021e-03 #> [1155,] 0.18181818 0.00000000 0.72727273 -6.561512e-03 -9.739054e-03 #> [1156,] 0.27272727 0.00000000 0.72727273 -5.692038e-03  7.801541e-03 #> [1157,] 0.36363636 0.00000000 0.72727273 -3.748866e-03 -1.542346e-03 #> [1158,] 0.45454545 0.00000000 0.72727273  7.937044e-04  7.520765e-03 #> [1159,] 0.54545455 0.00000000 0.72727273 -1.614979e-03 -6.692496e-03 #> [1160,] 0.63636364 0.00000000 0.72727273  9.506299e-03 -4.094536e-03 #> [1161,] 0.72727273 0.00000000 0.72727273  2.095012e-03 -4.261007e-03 #> [1162,] 0.81818182 0.00000000 0.72727273 -3.036809e-03  7.995414e-03 #> [1163,] 0.90909091 0.00000000 0.72727273 -7.967169e-03 -4.575948e-03 #> [1164,] 1.00000000 0.00000000 0.72727273  3.970845e-03  3.376171e-03 #> [1165,] 0.00000000 0.09090909 0.72727273 -5.343737e-03 -7.825082e-03 #> [1166,] 0.09090909 0.09090909 0.72727273 -1.466914e-03 -1.810628e-03 #> [1167,] 0.18181818 0.09090909 0.72727273 -6.767273e-03 -6.438165e-03 #> [1168,] 0.27272727 0.09090909 0.72727273  6.327750e-04 -5.727628e-03 #> [1169,] 0.36363636 0.09090909 0.72727273  9.158184e-03 -1.438394e-03 #> [1170,] 0.45454545 0.09090909 0.72727273 -9.988590e-05 -2.304231e-03 #> [1171,] 0.54545455 0.09090909 0.72727273 -7.602382e-03  4.957293e-03 #> [1172,] 0.63636364 0.09090909 0.72727273  1.176520e-03 -7.850539e-04 #> [1173,] 0.72727273 0.09090909 0.72727273 -7.601160e-03  8.948926e-03 #> [1174,] 0.81818182 0.09090909 0.72727273 -4.371282e-03  4.661898e-03 #> [1175,] 0.90909091 0.09090909 0.72727273  1.342550e-03 -9.175052e-03 #> [1176,] 1.00000000 0.09090909 0.72727273  8.265559e-03  4.215072e-03 #> [1177,] 0.00000000 0.18181818 0.72727273  3.767175e-03 -4.680190e-03 #> [1178,] 0.09090909 0.18181818 0.72727273 -2.350751e-03 -7.001819e-03 #> [1179,] 0.18181818 0.18181818 0.72727273  2.906000e-03 -1.682923e-05 #> [1180,] 0.27272727 0.18181818 0.72727273 -6.334103e-03  9.630167e-03 #> [1181,] 0.36363636 0.18181818 0.72727273 -4.797207e-03  7.592997e-03 #> [1182,] 0.45454545 0.18181818 0.72727273 -9.376204e-03 -9.732388e-03 #> [1183,] 0.54545455 0.18181818 0.72727273 -3.826972e-03  7.362247e-03 #> [1184,] 0.63636364 0.18181818 0.72727273 -8.706396e-03  7.413668e-03 #> [1185,] 0.72727273 0.18181818 0.72727273 -6.131475e-03  8.034219e-03 #> [1186,] 0.81818182 0.18181818 0.72727273 -8.258248e-03 -5.519707e-03 #> [1187,] 0.90909091 0.18181818 0.72727273 -2.608822e-03 -6.779485e-03 #> [1188,] 1.00000000 0.18181818 0.72727273 -7.009200e-03 -2.472500e-03 #> [1189,] 0.00000000 0.27272727 0.72727273 -3.519733e-03 -2.301362e-03 #> [1190,] 0.09090909 0.27272727 0.72727273  7.799721e-03 -5.521345e-03 #> [1191,] 0.18181818 0.27272727 0.72727273 -7.309771e-03 -1.744089e-03 #> [1192,] 0.27272727 0.27272727 0.72727273  2.297258e-03  7.393006e-03 #> [1193,] 0.36363636 0.27272727 0.72727273  6.233925e-03  7.465454e-03 #> [1194,] 0.45454545 0.27272727 0.72727273  4.235120e-03 -1.221756e-03 #> [1195,] 0.54545455 0.27272727 0.72727273 -1.557121e-03  9.391437e-03 #> [1196,] 0.63636364 0.27272727 0.72727273  7.669945e-03  4.469934e-03 #> [1197,] 0.72727273 0.27272727 0.72727273 -8.134401e-03  8.180697e-03 #> [1198,] 0.81818182 0.27272727 0.72727273 -3.307764e-03  9.461969e-04 #> [1199,] 0.90909091 0.27272727 0.72727273 -6.652709e-03  2.611312e-03 #> [1200,] 1.00000000 0.27272727 0.72727273 -8.828958e-03 -2.437608e-03 #> [1201,] 0.00000000 0.36363636 0.72727273  5.016971e-03  6.709803e-03 #> [1202,] 0.09090909 0.36363636 0.72727273 -2.106427e-03  4.910851e-03 #> [1203,] 0.18181818 0.36363636 0.72727273  1.170669e-03 -1.947733e-03 #> [1204,] 0.27272727 0.36363636 0.72727273 -1.891507e-03  7.871180e-03 #> [1205,] 0.36363636 0.36363636 0.72727273  2.488952e-03 -9.231184e-03 #> [1206,] 0.45454545 0.36363636 0.72727273  8.631651e-03 -5.251342e-03 #> [1207,] 0.54545455 0.36363636 0.72727273  6.057004e-03  9.943021e-03 #> [1208,] 0.63636364 0.36363636 0.72727273  9.362585e-03  7.167629e-03 #> [1209,] 0.72727273 0.36363636 0.72727273  2.601817e-03  4.800746e-03 #> [1210,] 0.81818182 0.36363636 0.72727273 -6.727663e-03 -6.164581e-03 #> [1211,] 0.90909091 0.36363636 0.72727273 -6.138445e-03  1.763791e-04 #> [1212,] 1.00000000 0.36363636 0.72727273 -7.376619e-03 -1.479463e-03 #> [1213,] 0.00000000 0.45454545 0.72727273  8.703501e-03 -2.407860e-03 #> [1214,] 0.09090909 0.45454545 0.72727273  1.884848e-03 -9.496014e-03 #> [1215,] 0.18181818 0.45454545 0.72727273 -3.809827e-03 -7.842813e-03 #> [1216,] 0.27272727 0.45454545 0.72727273  8.832089e-03 -8.279093e-03 #> [1217,] 0.36363636 0.45454545 0.72727273  6.056457e-03 -1.102264e-03 #> [1218,] 0.45454545 0.45454545 0.72727273  6.593861e-03  8.060405e-03 #> [1219,] 0.54545455 0.45454545 0.72727273  5.539847e-03  1.343103e-03 #> [1220,] 0.63636364 0.45454545 0.72727273  1.169435e-03  1.462430e-03 #> [1221,] 0.72727273 0.45454545 0.72727273 -4.092214e-03  5.099099e-03 #> [1222,] 0.81818182 0.45454545 0.72727273 -1.804225e-03  8.292799e-03 #> [1223,] 0.90909091 0.45454545 0.72727273 -1.336189e-03 -6.086755e-03 #> [1224,] 1.00000000 0.45454545 0.72727273 -5.407073e-03  4.692665e-03 #> [1225,] 0.00000000 0.54545455 0.72727273  4.492127e-03  5.902913e-03 #> [1226,] 0.09090909 0.54545455 0.72727273 -3.940176e-03  8.935759e-03 #> [1227,] 0.18181818 0.54545455 0.72727273  6.211777e-03 -2.999679e-03 #> [1228,] 0.27272727 0.54545455 0.72727273  8.871412e-03  4.470630e-03 #> [1229,] 0.36363636 0.54545455 0.72727273  2.533648e-03 -4.413815e-03 #> [1230,] 0.45454545 0.54545455 0.72727273  5.980436e-03 -1.869098e-03 #> [1231,] 0.54545455 0.54545455 0.72727273  2.521713e-03  8.312556e-03 #> [1232,] 0.63636364 0.54545455 0.72727273  6.159184e-03  4.490029e-03 #> [1233,] 0.72727273 0.54545455 0.72727273  4.425592e-03 -8.888310e-03 #> [1234,] 0.81818182 0.54545455 0.72727273  5.983877e-03 -8.437163e-03 #> [1235,] 0.90909091 0.54545455 0.72727273 -9.980777e-03 -7.134555e-03 #> [1236,] 1.00000000 0.54545455 0.72727273  2.412325e-03  6.526173e-03 #> [1237,] 0.00000000 0.63636364 0.72727273  8.776890e-03  3.741679e-03 #> [1238,] 0.09090909 0.63636364 0.72727273  9.725240e-03  4.574617e-03 #> [1239,] 0.18181818 0.63636364 0.72727273 -9.788813e-03  1.652429e-03 #> [1240,] 0.27272727 0.63636364 0.72727273 -7.361660e-03  1.165430e-03 #> [1241,] 0.36363636 0.63636364 0.72727273 -6.460582e-03  6.763895e-03 #> [1242,] 0.45454545 0.63636364 0.72727273  3.811912e-03 -5.838136e-03 #> [1243,] 0.54545455 0.63636364 0.72727273  1.742100e-03  2.830378e-03 #> [1244,] 0.63636364 0.63636364 0.72727273 -3.062295e-04  6.821451e-03 #> [1245,] 0.72727273 0.63636364 0.72727273 -6.376008e-03 -3.555307e-03 #> [1246,] 0.81818182 0.63636364 0.72727273  1.227599e-03 -9.904231e-03 #> [1247,] 0.90909091 0.63636364 0.72727273 -7.952140e-03  7.695390e-03 #> [1248,] 1.00000000 0.63636364 0.72727273  8.674821e-03 -1.800916e-03 #> [1249,] 0.00000000 0.72727273 0.72727273 -3.658227e-03 -3.142194e-03 #> [1250,] 0.09090909 0.72727273 0.72727273  8.741537e-03  9.906701e-03 #> [1251,] 0.18181818 0.72727273 0.72727273 -7.295923e-03  3.652746e-03 #> [1252,] 0.27272727 0.72727273 0.72727273 -9.364066e-04  4.691778e-03 #> [1253,] 0.36363636 0.72727273 0.72727273 -1.149673e-03  4.403198e-03 #> [1254,] 0.45454545 0.72727273 0.72727273  9.169614e-03  4.521843e-04 #> [1255,] 0.54545455 0.72727273 0.72727273  1.387795e-03  4.960905e-04 #> [1256,] 0.63636364 0.72727273 0.72727273  5.532932e-03 -8.421276e-03 #> [1257,] 0.72727273 0.72727273 0.72727273  5.612508e-03  6.393078e-03 #> [1258,] 0.81818182 0.72727273 0.72727273  1.543792e-03 -2.610447e-03 #> [1259,] 0.90909091 0.72727273 0.72727273  4.302336e-03 -6.315059e-03 #> [1260,] 1.00000000 0.72727273 0.72727273  4.575639e-03  4.943553e-03 #> [1261,] 0.00000000 0.81818182 0.72727273  8.594248e-03  5.048026e-03 #> [1262,] 0.09090909 0.81818182 0.72727273 -2.405773e-03  4.222259e-03 #> [1263,] 0.18181818 0.81818182 0.72727273 -8.051473e-03 -9.679707e-03 #> [1264,] 0.27272727 0.81818182 0.72727273  3.169208e-03  6.977713e-03 #> [1265,] 0.36363636 0.81818182 0.72727273  2.510966e-03 -1.796161e-03 #> [1266,] 0.45454545 0.81818182 0.72727273  5.395094e-03 -3.398507e-03 #> [1267,] 0.54545455 0.81818182 0.72727273 -1.002610e-03  8.212735e-03 #> [1268,] 0.63636364 0.81818182 0.72727273  2.488100e-03 -8.117219e-03 #> [1269,] 0.72727273 0.81818182 0.72727273  5.308950e-03 -7.288742e-03 #> [1270,] 0.81818182 0.81818182 0.72727273  9.819862e-03 -1.084128e-03 #> [1271,] 0.90909091 0.81818182 0.72727273 -3.493703e-03  7.381829e-03 #> [1272,] 1.00000000 0.81818182 0.72727273 -1.716510e-03  9.868997e-03 #> [1273,] 0.00000000 0.90909091 0.72727273  8.885136e-03 -6.637178e-03 #> [1274,] 0.09090909 0.90909091 0.72727273 -9.444711e-03  5.635873e-03 #> [1275,] 0.18181818 0.90909091 0.72727273  2.532034e-04 -7.656046e-04 #> [1276,] 0.27272727 0.90909091 0.72727273  2.191502e-03 -2.990712e-03 #> [1277,] 0.36363636 0.90909091 0.72727273  7.539376e-03  2.958834e-03 #> [1278,] 0.45454545 0.90909091 0.72727273 -3.093330e-05 -4.664983e-03 #> [1279,] 0.54545455 0.90909091 0.72727273 -9.492919e-03 -1.342955e-03 #> [1280,] 0.63636364 0.90909091 0.72727273  5.749534e-04 -9.085206e-03 #> [1281,] 0.72727273 0.90909091 0.72727273  9.281191e-03 -1.085604e-03 #> [1282,] 0.81818182 0.90909091 0.72727273  6.530221e-03 -4.110757e-03 #> [1283,] 0.90909091 0.90909091 0.72727273  8.118610e-04  1.433146e-03 #> [1284,] 1.00000000 0.90909091 0.72727273 -8.358253e-03  8.893210e-03 #> [1285,] 0.00000000 1.00000000 0.72727273 -6.341760e-03 -2.669651e-03 #> [1286,] 0.09090909 1.00000000 0.72727273 -5.605038e-03  9.450529e-03 #> [1287,] 0.18181818 1.00000000 0.72727273 -7.059205e-03 -5.194560e-03 #> [1288,] 0.27272727 1.00000000 0.72727273  9.779418e-03 -5.024322e-03 #> [1289,] 0.36363636 1.00000000 0.72727273 -3.406602e-03  8.067820e-03 #> [1290,] 0.45454545 1.00000000 0.72727273  6.034355e-03 -6.926877e-03 #> [1291,] 0.54545455 1.00000000 0.72727273 -9.966744e-03 -7.239912e-03 #> [1292,] 0.63636364 1.00000000 0.72727273 -5.387867e-03  2.152378e-03 #> [1293,] 0.72727273 1.00000000 0.72727273  9.040765e-03  3.500717e-03 #> [1294,] 0.81818182 1.00000000 0.72727273 -4.030798e-03 -9.892731e-03 #> [1295,] 0.90909091 1.00000000 0.72727273 -1.033646e-03  2.574005e-03 #> [1296,] 1.00000000 1.00000000 0.72727273 -6.996138e-04  9.232913e-03 #> [1297,] 0.00000000 0.00000000 0.81818182  3.711150e-03 -8.132106e-03 #> [1298,] 0.09090909 0.00000000 0.81818182 -6.022369e-03  9.797137e-04 #> [1299,] 0.18181818 0.00000000 0.81818182 -7.546340e-03  5.972197e-03 #> [1300,] 0.27272727 0.00000000 0.81818182  2.767358e-05 -5.002238e-03 #> [1301,] 0.36363636 0.00000000 0.81818182 -5.094173e-03 -3.220372e-03 #> [1302,] 0.45454545 0.00000000 0.81818182  1.838799e-03  2.077823e-03 #> [1303,] 0.54545455 0.00000000 0.81818182 -2.975424e-03  8.131042e-03 #> [1304,] 0.63636364 0.00000000 0.81818182 -1.286852e-03 -5.250243e-03 #> [1305,] 0.72727273 0.00000000 0.81818182 -9.552260e-03 -2.603316e-03 #> [1306,] 0.81818182 0.00000000 0.81818182  4.356726e-03  7.925021e-03 #> [1307,] 0.90909091 0.00000000 0.81818182 -7.878374e-03  6.001485e-03 #> [1308,] 1.00000000 0.00000000 0.81818182 -4.580223e-03 -6.245786e-03 #> [1309,] 0.00000000 0.09090909 0.81818182  2.348537e-03  3.693627e-03 #> [1310,] 0.09090909 0.09090909 0.81818182  5.734208e-03 -3.983714e-03 #> [1311,] 0.18181818 0.09090909 0.81818182 -3.288365e-03  2.220451e-03 #> [1312,] 0.27272727 0.09090909 0.81818182 -6.745594e-04  7.416890e-03 #> [1313,] 0.36363636 0.09090909 0.81818182  6.434264e-03  2.798441e-03 #> [1314,] 0.45454545 0.09090909 0.81818182 -3.946649e-03  2.137850e-04 #> [1315,] 0.54545455 0.09090909 0.81818182  7.991247e-03 -4.224862e-03 #> [1316,] 0.63636364 0.09090909 0.81818182  7.313042e-03 -5.987964e-03 #> [1317,] 0.72727273 0.09090909 0.81818182  2.961114e-03  3.814898e-03 #> [1318,] 0.81818182 0.09090909 0.81818182 -4.559474e-03 -1.878892e-03 #> [1319,] 0.90909091 0.09090909 0.81818182 -3.490159e-03 -8.133004e-03 #> [1320,] 1.00000000 0.09090909 0.81818182 -5.241428e-03 -8.760937e-03 #> [1321,] 0.00000000 0.18181818 0.81818182  2.960406e-03  9.511186e-03 #> [1322,] 0.09090909 0.18181818 0.81818182  9.943193e-03 -8.167174e-03 #> [1323,] 0.18181818 0.18181818 0.81818182  6.497945e-04 -6.933846e-03 #> [1324,] 0.27272727 0.18181818 0.81818182  1.847991e-03  7.702918e-03 #> [1325,] 0.36363636 0.18181818 0.81818182  6.606532e-03 -7.304276e-05 #> [1326,] 0.45454545 0.18181818 0.81818182 -9.129980e-03 -2.335128e-03 #> [1327,] 0.54545455 0.18181818 0.81818182 -1.039967e-03 -2.359331e-03 #> [1328,] 0.63636364 0.18181818 0.81818182 -3.196892e-03 -1.474089e-03 #> [1329,] 0.72727273 0.18181818 0.81818182  8.704292e-04 -8.207845e-03 #> [1330,] 0.81818182 0.18181818 0.81818182  1.848044e-03 -4.594109e-03 #> [1331,] 0.90909091 0.18181818 0.81818182 -2.019604e-03 -2.076196e-03 #> [1332,] 1.00000000 0.18181818 0.81818182  6.439381e-03  5.758029e-03 #> [1333,] 0.00000000 0.27272727 0.81818182  7.298152e-03  3.904737e-03 #> [1334,] 0.09090909 0.27272727 0.81818182  7.465734e-03 -6.600212e-03 #> [1335,] 0.18181818 0.27272727 0.81818182  5.206709e-03  8.819828e-03 #> [1336,] 0.27272727 0.27272727 0.81818182  4.146669e-03 -2.368381e-03 #> [1337,] 0.36363636 0.27272727 0.81818182  5.824101e-03  2.041592e-03 #> [1338,] 0.45454545 0.27272727 0.81818182  2.922476e-03  4.049618e-03 #> [1339,] 0.54545455 0.27272727 0.81818182  7.871441e-04 -6.317354e-03 #> [1340,] 0.63636364 0.27272727 0.81818182  2.380363e-03  2.855136e-03 #> [1341,] 0.72727273 0.27272727 0.81818182 -7.995544e-03  7.239135e-03 #> [1342,] 0.81818182 0.27272727 0.81818182  2.157440e-03 -1.376379e-03 #> [1343,] 0.90909091 0.27272727 0.81818182 -7.276944e-03 -7.357633e-03 #> [1344,] 1.00000000 0.27272727 0.81818182  1.889234e-03 -1.078044e-03 #> [1345,] 0.00000000 0.36363636 0.81818182  1.698262e-03  3.737019e-03 #> [1346,] 0.09090909 0.36363636 0.81818182 -7.407872e-04 -9.599002e-03 #> [1347,] 0.18181818 0.36363636 0.81818182 -3.964988e-03  9.233764e-03 #> [1348,] 0.27272727 0.36363636 0.81818182  2.516073e-03  3.528160e-03 #> [1349,] 0.36363636 0.36363636 0.81818182 -6.873296e-03  4.660269e-03 #> [1350,] 0.45454545 0.36363636 0.81818182  5.457225e-03  9.986943e-03 #> [1351,] 0.54545455 0.36363636 0.81818182 -9.057328e-03  5.432162e-03 #> [1352,] 0.63636364 0.36363636 0.81818182 -7.708098e-03  3.252116e-03 #> [1353,] 0.72727273 0.36363636 0.81818182 -1.843141e-03 -3.114367e-03 #> [1354,] 0.81818182 0.36363636 0.81818182 -7.697987e-04 -3.185960e-03 #> [1355,] 0.90909091 0.36363636 0.81818182  9.419092e-03  1.752347e-03 #> [1356,] 1.00000000 0.36363636 0.81818182 -6.918439e-03  3.999790e-03 #> [1357,] 0.00000000 0.45454545 0.81818182 -6.996251e-03 -7.586506e-03 #> [1358,] 0.09090909 0.45454545 0.81818182  3.543568e-04  7.042730e-03 #> [1359,] 0.18181818 0.45454545 0.81818182  9.885271e-03  4.643355e-03 #> [1360,] 0.27272727 0.45454545 0.81818182  4.428915e-03 -6.800426e-03 #> [1361,] 0.36363636 0.45454545 0.81818182 -1.200175e-03  7.438805e-04 #> [1362,] 0.45454545 0.45454545 0.81818182 -3.413457e-03 -3.535752e-03 #> [1363,] 0.54545455 0.45454545 0.81818182 -3.662399e-03 -9.897538e-03 #> [1364,] 0.63636364 0.45454545 0.81818182  2.080860e-04  8.518238e-03 #> [1365,] 0.72727273 0.45454545 0.81818182  6.819514e-03 -4.844239e-03 #> [1366,] 0.81818182 0.45454545 0.81818182  2.495329e-03 -6.955319e-03 #> [1367,] 0.90909091 0.45454545 0.81818182 -7.237285e-03  3.966143e-03 #> [1368,] 1.00000000 0.45454545 0.81818182 -4.613392e-03 -1.190167e-03 #> [1369,] 0.00000000 0.54545455 0.81818182  5.628136e-04  2.198852e-03 #> [1370,] 0.09090909 0.54545455 0.81818182  7.147159e-03  6.155563e-03 #> [1371,] 0.18181818 0.54545455 0.81818182 -7.700610e-03 -4.030268e-03 #> [1372,] 0.27272727 0.54545455 0.81818182  5.112209e-04 -2.113091e-03 #> [1373,] 0.36363636 0.54545455 0.81818182  8.254240e-03  4.674349e-03 #> [1374,] 0.45454545 0.54545455 0.81818182 -5.568475e-03  7.700604e-03 #> [1375,] 0.54545455 0.54545455 0.81818182  9.674506e-03 -5.837137e-03 #> [1376,] 0.63636364 0.54545455 0.81818182 -9.969649e-03 -8.632299e-03 #> [1377,] 0.72727273 0.54545455 0.81818182 -9.154028e-03  4.197530e-03 #> [1378,] 0.81818182 0.54545455 0.81818182 -2.700155e-03 -7.704557e-03 #> [1379,] 0.90909091 0.54545455 0.81818182  7.063760e-03  7.340597e-03 #> [1380,] 1.00000000 0.54545455 0.81818182  4.498244e-04  1.286525e-03 #> [1381,] 0.00000000 0.63636364 0.81818182 -6.557229e-03 -1.809730e-03 #> [1382,] 0.09090909 0.63636364 0.81818182 -8.362456e-03 -2.526005e-03 #> [1383,] 0.18181818 0.63636364 0.81818182  6.234516e-03 -4.277979e-03 #> [1384,] 0.27272727 0.63636364 0.81818182  1.900196e-04 -2.112769e-03 #> [1385,] 0.36363636 0.63636364 0.81818182  6.068509e-03 -8.676901e-04 #> [1386,] 0.45454545 0.63636364 0.81818182 -5.269402e-03  5.321844e-03 #> [1387,] 0.54545455 0.63636364 0.81818182  9.848068e-03 -5.691150e-03 #> [1388,] 0.63636364 0.63636364 0.81818182  1.532401e-03  1.527863e-03 #> [1389,] 0.72727273 0.63636364 0.81818182 -7.928376e-03  7.411797e-03 #> [1390,] 0.81818182 0.63636364 0.81818182  6.429089e-04 -9.991569e-03 #> [1391,] 0.90909091 0.63636364 0.81818182  2.359625e-04 -6.539265e-03 #> [1392,] 1.00000000 0.63636364 0.81818182 -1.126198e-03 -7.191309e-03 #> [1393,] 0.00000000 0.72727273 0.81818182 -3.380502e-03 -5.598984e-03 #> [1394,] 0.09090909 0.72727273 0.81818182  6.812706e-04 -4.936011e-03 #> [1395,] 0.18181818 0.72727273 0.81818182 -2.522203e-03 -4.310602e-03 #> [1396,] 0.27272727 0.72727273 0.81818182  9.366905e-03 -9.152082e-03 #> [1397,] 0.36363636 0.72727273 0.81818182 -2.107722e-03 -4.693343e-05 #> [1398,] 0.45454545 0.72727273 0.81818182  7.204986e-03  1.815764e-03 #> [1399,] 0.54545455 0.72727273 0.81818182 -9.616248e-03 -6.746089e-03 #> [1400,] 0.63636364 0.72727273 0.81818182  3.538007e-03  7.273903e-03 #> [1401,] 0.72727273 0.72727273 0.81818182 -1.253413e-03  6.280648e-03 #> [1402,] 0.81818182 0.72727273 0.81818182  6.055633e-03  5.464349e-05 #> [1403,] 0.90909091 0.72727273 0.81818182 -4.484261e-03 -3.172272e-03 #> [1404,] 1.00000000 0.72727273 0.81818182 -6.890093e-03 -6.284900e-04 #> [1405,] 0.00000000 0.81818182 0.81818182  4.431220e-04  5.406904e-04 #> [1406,] 0.09090909 0.81818182 0.81818182  1.340656e-03  8.075327e-03 #> [1407,] 0.18181818 0.81818182 0.81818182 -3.659493e-04  6.203361e-03 #> [1408,] 0.27272727 0.81818182 0.81818182  4.847293e-03 -1.167184e-03 #> [1409,] 0.36363636 0.81818182 0.81818182  2.642847e-04  1.083315e-03 #> [1410,] 0.45454545 0.81818182 0.81818182 -9.173491e-03  8.421738e-03 #> [1411,] 0.54545455 0.81818182 0.81818182  5.022220e-03 -3.341236e-03 #> [1412,] 0.63636364 0.81818182 0.81818182  4.703723e-03 -6.796599e-03 #> [1413,] 0.72727273 0.81818182 0.81818182  1.806565e-03 -1.719386e-03 #> [1414,] 0.81818182 0.81818182 0.81818182  6.894911e-03  3.971925e-03 #> [1415,] 0.90909091 0.81818182 0.81818182  3.964711e-03 -8.455387e-03 #> [1416,] 1.00000000 0.81818182 0.81818182 -8.325768e-03  1.258098e-03 #> [1417,] 0.00000000 0.90909091 0.81818182 -9.172152e-03 -4.387435e-03 #> [1418,] 0.09090909 0.90909091 0.81818182  2.236595e-03 -5.224597e-03 #> [1419,] 0.18181818 0.90909091 0.81818182  1.396521e-03  1.254295e-03 #> [1420,] 0.27272727 0.90909091 0.81818182 -6.320958e-03 -8.197737e-03 #> [1421,] 0.36363636 0.90909091 0.81818182  9.691307e-03  4.644672e-03 #> [1422,] 0.45454545 0.90909091 0.81818182 -8.248578e-03 -5.054125e-03 #> [1423,] 0.54545455 0.90909091 0.81818182 -3.559844e-03 -9.753291e-04 #> [1424,] 0.63636364 0.90909091 0.81818182 -4.555803e-03  9.177223e-03 #> [1425,] 0.72727273 0.90909091 0.81818182  1.726536e-03  2.022339e-04 #> [1426,] 0.81818182 0.90909091 0.81818182 -3.408171e-03  9.675262e-03 #> [1427,] 0.90909091 0.90909091 0.81818182 -6.361020e-03 -4.880403e-03 #> [1428,] 1.00000000 0.90909091 0.81818182 -7.218211e-03  8.643401e-03 #> [1429,] 0.00000000 1.00000000 0.81818182  5.075434e-03 -7.161480e-03 #> [1430,] 0.09090909 1.00000000 0.81818182  4.745242e-03 -1.722841e-03 #> [1431,] 0.18181818 1.00000000 0.81818182 -4.619285e-03  7.139127e-03 #> [1432,] 0.27272727 1.00000000 0.81818182  9.858802e-04  8.461933e-03 #> [1433,] 0.36363636 1.00000000 0.81818182 -3.500079e-03 -8.448225e-03 #> [1434,] 0.45454545 1.00000000 0.81818182  6.569819e-03  6.165146e-03 #> [1435,] 0.54545455 1.00000000 0.81818182 -5.073480e-03  7.017576e-04 #> [1436,] 0.63636364 1.00000000 0.81818182  6.773404e-03 -8.272586e-03 #> [1437,] 0.72727273 1.00000000 0.81818182 -1.615919e-03 -2.194722e-03 #> [1438,] 0.81818182 1.00000000 0.81818182  7.326822e-03  4.565457e-03 #> [1439,] 0.90909091 1.00000000 0.81818182  3.515752e-03  9.455969e-03 #> [1440,] 1.00000000 1.00000000 0.81818182 -9.787471e-03 -6.499787e-03 #> [1441,] 0.00000000 0.00000000 0.90909091  6.963958e-03  4.157909e-03 #> [1442,] 0.09090909 0.00000000 0.90909091 -3.799109e-03 -6.691043e-05 #> [1443,] 0.18181818 0.00000000 0.90909091  6.087183e-03  8.732155e-03 #> [1444,] 0.27272727 0.00000000 0.90909091  8.050034e-03  6.738467e-03 #> [1445,] 0.36363636 0.00000000 0.90909091  7.937278e-03  8.497600e-03 #> [1446,] 0.45454545 0.00000000 0.90909091 -9.262805e-03 -5.077185e-03 #> [1447,] 0.54545455 0.00000000 0.90909091 -5.389176e-03  4.064276e-03 #> [1448,] 0.63636364 0.00000000 0.90909091 -7.017143e-07 -9.080833e-03 #> [1449,] 0.72727273 0.00000000 0.90909091 -9.123548e-03 -8.435951e-03 #> [1450,] 0.81818182 0.00000000 0.90909091  8.786383e-03  3.669384e-03 #> [1451,] 0.90909091 0.00000000 0.90909091  4.780791e-03 -1.460394e-04 #> [1452,] 1.00000000 0.00000000 0.90909091  4.121390e-03  7.740878e-03 #> [1453,] 0.00000000 0.09090909 0.90909091 -6.018491e-04 -6.782688e-03 #> [1454,] 0.09090909 0.09090909 0.90909091  9.664178e-03 -7.744124e-03 #> [1455,] 0.18181818 0.09090909 0.90909091 -7.216117e-03  3.057573e-03 #> [1456,] 0.27272727 0.09090909 0.90909091  4.356682e-03 -3.328891e-03 #> [1457,] 0.36363636 0.09090909 0.90909091  2.114648e-03  6.245065e-03 #> [1458,] 0.45454545 0.09090909 0.90909091  2.886309e-03  5.582981e-03 #> [1459,] 0.54545455 0.09090909 0.90909091  8.588587e-03 -6.358475e-03 #> [1460,] 0.63636364 0.09090909 0.90909091  8.017953e-04  1.671496e-03 #> [1461,] 0.72727273 0.09090909 0.90909091  1.940812e-04 -8.315074e-05 #> [1462,] 0.81818182 0.09090909 0.90909091 -6.803796e-04 -9.586689e-03 #> [1463,] 0.90909091 0.09090909 0.90909091  8.543839e-03  1.708236e-03 #> [1464,] 1.00000000 0.09090909 0.90909091  6.817561e-03 -6.933767e-03 #> [1465,] 0.00000000 0.18181818 0.90909091  4.909709e-03  6.568163e-03 #> [1466,] 0.09090909 0.18181818 0.90909091 -2.728289e-03 -3.729591e-03 #> [1467,] 0.18181818 0.18181818 0.90909091 -4.603367e-03  3.653611e-03 #> [1468,] 0.27272727 0.18181818 0.90909091  8.465711e-03 -7.455555e-03 #> [1469,] 0.36363636 0.18181818 0.90909091  2.264948e-03  3.642478e-03 #> [1470,] 0.45454545 0.18181818 0.90909091 -6.582033e-03  7.051023e-03 #> [1471,] 0.54545455 0.18181818 0.90909091 -5.010397e-03  3.084559e-03 #> [1472,] 0.63636364 0.18181818 0.90909091 -8.631277e-03  7.418372e-03 #> [1473,] 0.72727273 0.18181818 0.90909091 -2.476767e-03 -3.885816e-03 #> [1474,] 0.81818182 0.18181818 0.90909091 -8.872239e-03 -9.052988e-03 #> [1475,] 0.90909091 0.18181818 0.90909091  5.742967e-03  1.171065e-03 #> [1476,] 1.00000000 0.18181818 0.90909091 -7.316084e-03  6.121204e-03 #> [1477,] 0.00000000 0.27272727 0.90909091 -6.790286e-03 -8.053516e-04 #> [1478,] 0.09090909 0.27272727 0.90909091  7.615381e-03  6.873151e-03 #> [1479,] 0.18181818 0.27272727 0.90909091  2.536693e-03 -3.380935e-03 #> [1480,] 0.27272727 0.27272727 0.90909091  4.343184e-03  4.292287e-03 #> [1481,] 0.36363636 0.27272727 0.90909091 -3.263335e-04  7.117775e-03 #> [1482,] 0.45454545 0.27272727 0.90909091 -5.092227e-04 -3.235019e-03 #> [1483,] 0.54545455 0.27272727 0.90909091  6.993534e-04 -8.434475e-03 #> [1484,] 0.63636364 0.27272727 0.90909091  2.149336e-03  9.075633e-03 #> [1485,] 0.72727273 0.27272727 0.90909091  1.707733e-03  3.386284e-03 #> [1486,] 0.81818182 0.27272727 0.90909091 -6.041493e-04  2.604754e-03 #> [1487,] 0.90909091 0.27272727 0.90909091 -3.294383e-04  9.423522e-03 #> [1488,] 1.00000000 0.27272727 0.90909091 -4.210976e-03  9.029279e-03 #> [1489,] 0.00000000 0.36363636 0.90909091  8.121877e-04 -5.675025e-03 #> [1490,] 0.09090909 0.36363636 0.90909091 -1.013193e-04 -5.531067e-03 #> [1491,] 0.18181818 0.36363636 0.90909091  9.467953e-03 -5.554959e-03 #> [1492,] 0.27272727 0.36363636 0.90909091  4.197084e-03 -8.574406e-03 #> [1493,] 0.36363636 0.36363636 0.90909091  1.234410e-03  6.048026e-03 #> [1494,] 0.45454545 0.36363636 0.90909091  8.354125e-03 -4.664950e-03 #> [1495,] 0.54545455 0.36363636 0.90909091 -4.106823e-03  6.994516e-03 #> [1496,] 0.63636364 0.36363636 0.90909091 -1.536810e-03  9.553046e-03 #> [1497,] 0.72727273 0.36363636 0.90909091 -6.826446e-03 -9.437168e-03 #> [1498,] 0.81818182 0.36363636 0.90909091  6.910594e-03 -9.840884e-03 #> [1499,] 0.90909091 0.36363636 0.90909091 -1.675578e-03 -7.223343e-03 #> [1500,] 1.00000000 0.36363636 0.90909091  6.870443e-03 -6.585625e-03 #> [1501,] 0.00000000 0.45454545 0.90909091  7.153935e-03  9.493829e-04 #> [1502,] 0.09090909 0.45454545 0.90909091 -6.602421e-03  1.472770e-03 #> [1503,] 0.18181818 0.45454545 0.90909091  9.121939e-03 -9.237973e-03 #> [1504,] 0.27272727 0.45454545 0.90909091 -3.553436e-03 -8.769389e-03 #> [1505,] 0.36363636 0.45454545 0.90909091 -4.368421e-03  6.877924e-03 #> [1506,] 0.45454545 0.45454545 0.90909091 -9.322917e-03  5.508725e-03 #> [1507,] 0.54545455 0.45454545 0.90909091  7.888276e-03  1.358991e-03 #> [1508,] 0.63636364 0.45454545 0.90909091 -8.074483e-03  9.537819e-03 #> [1509,] 0.72727273 0.45454545 0.90909091 -2.805448e-03 -6.802944e-03 #> [1510,] 0.81818182 0.45454545 0.90909091  4.602134e-04 -2.706119e-03 #> [1511,] 0.90909091 0.45454545 0.90909091  9.396853e-03  9.154213e-03 #> [1512,] 1.00000000 0.45454545 0.90909091  1.994465e-05  5.705282e-03 #> [1513,] 0.00000000 0.54545455 0.90909091  8.459150e-04 -3.416402e-03 #> [1514,] 0.09090909 0.54545455 0.90909091 -7.214541e-03 -7.935799e-03 #> [1515,] 0.18181818 0.54545455 0.90909091  8.562512e-03 -9.032156e-03 #> [1516,] 0.27272727 0.54545455 0.90909091 -4.611970e-03  3.130913e-03 #> [1517,] 0.36363636 0.54545455 0.90909091 -2.410437e-03  6.545346e-03 #> [1518,] 0.45454545 0.54545455 0.90909091  9.514899e-03  6.149754e-03 #> [1519,] 0.54545455 0.54545455 0.90909091 -5.498528e-03 -5.912361e-03 #> [1520,] 0.63636364 0.54545455 0.90909091  4.256676e-03  8.116685e-03 #> [1521,] 0.72727273 0.54545455 0.90909091 -2.876783e-03  5.903693e-04 #> [1522,] 0.81818182 0.54545455 0.90909091  6.641392e-03  2.102944e-03 #> [1523,] 0.90909091 0.54545455 0.90909091 -8.416727e-03  3.580263e-03 #> [1524,] 1.00000000 0.54545455 0.90909091 -1.658199e-03 -9.696363e-03 #> [1525,] 0.00000000 0.63636364 0.90909091  1.853159e-03 -1.221464e-03 #> [1526,] 0.09090909 0.63636364 0.90909091 -2.962525e-03  2.941976e-03 #> [1527,] 0.18181818 0.63636364 0.90909091 -5.160128e-03 -6.645896e-03 #> [1528,] 0.27272727 0.63636364 0.90909091 -7.759029e-03  3.698189e-03 #> [1529,] 0.36363636 0.63636364 0.90909091  4.687022e-03 -1.531186e-03 #> [1530,] 0.45454545 0.63636364 0.90909091  3.074441e-03 -4.673221e-03 #> [1531,] 0.54545455 0.63636364 0.90909091 -4.391261e-03 -8.977425e-03 #> [1532,] 0.63636364 0.63636364 0.90909091  7.182466e-03  2.398682e-03 #> [1533,] 0.72727273 0.63636364 0.90909091 -1.519299e-03  7.094348e-03 #> [1534,] 0.81818182 0.63636364 0.90909091  8.414710e-03  1.717556e-03 #> [1535,] 0.90909091 0.63636364 0.90909091 -7.237367e-03  1.608702e-03 #> [1536,] 1.00000000 0.63636364 0.90909091 -7.846215e-03 -7.138374e-03 #> [1537,] 0.00000000 0.72727273 0.90909091  9.516892e-03  3.625037e-03 #> [1538,] 0.09090909 0.72727273 0.90909091 -8.493266e-03  7.619735e-03 #> [1539,] 0.18181818 0.72727273 0.90909091 -2.536827e-03 -2.097246e-04 #> [1540,] 0.27272727 0.72727273 0.90909091 -1.336218e-03  7.082995e-04 #> [1541,] 0.36363636 0.72727273 0.90909091  9.550551e-03  3.219666e-03 #> [1542,] 0.45454545 0.72727273 0.90909091  5.384643e-03  5.647317e-03 #> [1543,] 0.54545455 0.72727273 0.90909091  2.505657e-03  2.475394e-03 #> [1544,] 0.63636364 0.72727273 0.90909091 -7.407829e-03 -1.506159e-03 #> [1545,] 0.72727273 0.72727273 0.90909091  8.257987e-03  4.340539e-03 #> [1546,] 0.81818182 0.72727273 0.90909091 -9.272857e-03  3.390517e-04 #> [1547,] 0.90909091 0.72727273 0.90909091  2.323410e-03  7.792222e-03 #> [1548,] 1.00000000 0.72727273 0.90909091  4.807092e-03  2.446057e-03 #> [1549,] 0.00000000 0.81818182 0.90909091 -3.121459e-03 -9.638099e-03 #> [1550,] 0.09090909 0.81818182 0.90909091  6.836491e-03 -8.517100e-03 #> [1551,] 0.18181818 0.81818182 0.90909091  8.582034e-03 -3.896243e-04 #> [1552,] 0.27272727 0.81818182 0.90909091 -5.456433e-03  9.711020e-03 #> [1553,] 0.36363636 0.81818182 0.90909091  1.006058e-03  4.549718e-03 #> [1554,] 0.45454545 0.81818182 0.90909091 -6.229916e-03  4.840787e-03 #> [1555,] 0.54545455 0.81818182 0.90909091 -3.935043e-03  7.187790e-03 #> [1556,] 0.63636364 0.81818182 0.90909091  7.243771e-03  8.759269e-03 #> [1557,] 0.72727273 0.81818182 0.90909091  7.145831e-03  5.488589e-03 #> [1558,] 0.81818182 0.81818182 0.90909091 -3.956755e-03  7.723502e-03 #> [1559,] 0.90909091 0.81818182 0.90909091  9.873205e-03 -6.224165e-04 #> [1560,] 1.00000000 0.81818182 0.90909091 -6.023681e-03 -1.378921e-04 #> [1561,] 0.00000000 0.90909091 0.90909091  8.318189e-03 -8.712762e-03 #> [1562,] 0.09090909 0.90909091 0.90909091 -1.865499e-03  2.040290e-03 #> [1563,] 0.18181818 0.90909091 0.90909091 -5.751233e-03  3.649690e-03 #> [1564,] 0.27272727 0.90909091 0.90909091  5.979286e-03 -3.896671e-03 #> [1565,] 0.36363636 0.90909091 0.90909091  2.069249e-03 -6.089300e-03 #> [1566,] 0.45454545 0.90909091 0.90909091 -6.009145e-03  6.971440e-03 #> [1567,] 0.54545455 0.90909091 0.90909091 -1.100519e-03  5.805497e-03 #> [1568,] 0.63636364 0.90909091 0.90909091  1.426936e-03 -6.378653e-03 #> [1569,] 0.72727273 0.90909091 0.90909091  4.121044e-03 -7.773128e-03 #> [1570,] 0.81818182 0.90909091 0.90909091  5.192928e-03 -9.165330e-03 #> [1571,] 0.90909091 0.90909091 0.90909091  8.923654e-03  9.494693e-03 #> [1572,] 1.00000000 0.90909091 0.90909091 -6.271186e-03 -1.001227e-03 #> [1573,] 0.00000000 1.00000000 0.90909091  8.849870e-03 -9.027126e-03 #> [1574,] 0.09090909 1.00000000 0.90909091 -6.102311e-03  3.749895e-04 #> [1575,] 0.18181818 1.00000000 0.90909091 -8.641117e-03 -3.238970e-03 #> [1576,] 0.27272727 1.00000000 0.90909091  5.127207e-03  3.136041e-03 #> [1577,] 0.36363636 1.00000000 0.90909091 -2.910449e-03 -6.405364e-03 #> [1578,] 0.45454545 1.00000000 0.90909091 -1.468321e-03 -2.007383e-03 #> [1579,] 0.54545455 1.00000000 0.90909091  1.621426e-03 -5.521627e-03 #> [1580,] 0.63636364 1.00000000 0.90909091 -9.767504e-03 -8.103673e-03 #> [1581,] 0.72727273 1.00000000 0.90909091  6.489851e-03 -9.242058e-03 #> [1582,] 0.81818182 1.00000000 0.90909091  8.450713e-03  6.388329e-03 #> [1583,] 0.90909091 1.00000000 0.90909091  1.526904e-03 -1.596184e-03 #> [1584,] 1.00000000 1.00000000 0.90909091  7.391169e-03 -3.000603e-03 #> [1585,] 0.00000000 0.00000000 1.00000000 -9.650080e-03 -1.315667e-03 #> [1586,] 0.09090909 0.00000000 1.00000000 -1.121134e-03 -7.050151e-03 #> [1587,] 0.18181818 0.00000000 1.00000000  6.209883e-03 -5.394176e-03 #> [1588,] 0.27272727 0.00000000 1.00000000 -2.316740e-04 -2.878730e-03 #> [1589,] 0.36363636 0.00000000 1.00000000 -5.278183e-03 -8.361936e-03 #> [1590,] 0.45454545 0.00000000 1.00000000  9.922784e-03 -9.565065e-05 #> [1591,] 0.54545455 0.00000000 1.00000000  2.265988e-03  8.586198e-03 #> [1592,] 0.63636364 0.00000000 1.00000000 -9.996373e-03 -2.642845e-03 #> [1593,] 0.72727273 0.00000000 1.00000000  4.381386e-03 -1.190072e-03 #> [1594,] 0.81818182 0.00000000 1.00000000  1.332375e-03  3.047238e-03 #> [1595,] 0.90909091 0.00000000 1.00000000 -9.467138e-04  1.633621e-03 #> [1596,] 1.00000000 0.00000000 1.00000000  2.390211e-03  8.127381e-03 #> [1597,] 0.00000000 0.09090909 1.00000000 -8.354720e-03 -7.263742e-03 #> [1598,] 0.09090909 0.09090909 1.00000000  3.776494e-04 -6.395851e-04 #> [1599,] 0.18181818 0.09090909 1.00000000  2.167303e-03 -8.892891e-03 #> [1600,] 0.27272727 0.09090909 1.00000000  2.827313e-03 -7.179258e-03 #> [1601,] 0.36363636 0.09090909 1.00000000 -4.017565e-03  9.418638e-05 #> [1602,] 0.45454545 0.09090909 1.00000000  1.717359e-03 -9.642429e-03 #> [1603,] 0.54545455 0.09090909 1.00000000 -7.700488e-04  7.402646e-03 #> [1604,] 0.63636364 0.09090909 1.00000000 -2.162743e-03 -9.348992e-03 #> [1605,] 0.72727273 0.09090909 1.00000000  8.467267e-03  6.311459e-03 #> [1606,] 0.81818182 0.09090909 1.00000000 -6.269238e-03  9.832948e-03 #> [1607,] 0.90909091 0.09090909 1.00000000  5.484186e-03 -6.106349e-03 #> [1608,] 1.00000000 0.09090909 1.00000000 -3.857158e-04  4.050026e-03 #> [1609,] 0.00000000 0.18181818 1.00000000  3.885431e-03  6.472143e-03 #> [1610,] 0.09090909 0.18181818 1.00000000  1.395323e-03 -5.032486e-04 #> [1611,] 0.18181818 0.18181818 1.00000000 -9.383293e-04 -5.371650e-03 #> [1612,] 0.27272727 0.18181818 1.00000000  2.739277e-04  6.551090e-03 #> [1613,] 0.36363636 0.18181818 1.00000000  3.312697e-03  4.537895e-03 #> [1614,] 0.45454545 0.18181818 1.00000000  4.602126e-03 -9.792808e-03 #> [1615,] 0.54545455 0.18181818 1.00000000 -6.534767e-03  6.942756e-03 #> [1616,] 0.63636364 0.18181818 1.00000000  9.836750e-03  4.912616e-03 #> [1617,] 0.72727273 0.18181818 1.00000000 -4.788673e-03 -7.846766e-03 #> [1618,] 0.81818182 0.18181818 1.00000000 -4.908673e-03 -6.576523e-03 #> [1619,] 0.90909091 0.18181818 1.00000000  2.742279e-04 -9.615459e-03 #> [1620,] 1.00000000 0.18181818 1.00000000 -3.633902e-03 -5.790549e-03 #> [1621,] 0.00000000 0.27272727 1.00000000  7.321245e-03 -2.841121e-03 #> [1622,] 0.09090909 0.27272727 1.00000000  8.371391e-03 -5.161462e-03 #> [1623,] 0.18181818 0.27272727 1.00000000 -1.415425e-03  5.902577e-03 #> [1624,] 0.27272727 0.27272727 1.00000000  8.789942e-03 -7.268430e-04 #> [1625,] 0.36363636 0.27272727 1.00000000 -4.863729e-04  2.812949e-03 #> [1626,] 0.45454545 0.27272727 1.00000000 -4.985296e-03 -8.536155e-03 #> [1627,] 0.54545455 0.27272727 1.00000000  3.235161e-03 -7.987891e-03 #> [1628,] 0.63636364 0.27272727 1.00000000 -7.678540e-03 -9.495576e-03 #> [1629,] 0.72727273 0.27272727 1.00000000 -8.591559e-03 -6.666149e-03 #> [1630,] 0.81818182 0.27272727 1.00000000  1.650963e-03  3.721139e-04 #> [1631,] 0.90909091 0.27272727 1.00000000 -6.738251e-03  5.381046e-03 #> [1632,] 1.00000000 0.27272727 1.00000000 -2.340061e-03 -6.371175e-03 #> [1633,] 0.00000000 0.36363636 1.00000000  1.805454e-03 -2.711230e-03 #> [1634,] 0.09090909 0.36363636 1.00000000  8.006432e-03  8.581809e-03 #> [1635,] 0.18181818 0.36363636 1.00000000 -4.524422e-03  6.952668e-03 #> [1636,] 0.27272727 0.36363636 1.00000000  7.831378e-03  6.862422e-03 #> [1637,] 0.36363636 0.36363636 1.00000000  7.123437e-04 -1.190740e-03 #> [1638,] 0.45454545 0.36363636 1.00000000 -9.776174e-03 -5.245784e-03 #> [1639,] 0.54545455 0.36363636 1.00000000 -1.153850e-03 -9.683041e-03 #> [1640,] 0.63636364 0.36363636 1.00000000  4.144969e-03  8.813779e-04 #> [1641,] 0.72727273 0.36363636 1.00000000 -2.559736e-03 -5.906918e-03 #> [1642,] 0.81818182 0.36363636 1.00000000 -1.978190e-03  4.874504e-03 #> [1643,] 0.90909091 0.36363636 1.00000000 -9.718563e-03  3.529413e-03 #> [1644,] 1.00000000 0.36363636 1.00000000 -9.552699e-03 -9.223756e-03 #> [1645,] 0.00000000 0.45454545 1.00000000 -2.588446e-03  4.770006e-03 #> [1646,] 0.09090909 0.45454545 1.00000000  8.785451e-03  3.554330e-03 #> [1647,] 0.18181818 0.45454545 1.00000000 -8.742270e-04  3.549039e-03 #> [1648,] 0.27272727 0.45454545 1.00000000 -5.519870e-03  3.819309e-03 #> [1649,] 0.36363636 0.45454545 1.00000000  2.673937e-03  1.228983e-03 #> [1650,] 0.45454545 0.45454545 1.00000000  1.553477e-04  3.114863e-03 #> [1651,] 0.54545455 0.45454545 1.00000000 -1.525012e-03  7.768649e-04 #> [1652,] 0.63636364 0.45454545 1.00000000  5.920228e-03 -3.984718e-03 #> [1653,] 0.72727273 0.45454545 1.00000000 -4.066850e-03 -2.471203e-03 #> [1654,] 0.81818182 0.45454545 1.00000000 -6.112211e-04 -9.961790e-03 #> [1655,] 0.90909091 0.45454545 1.00000000  7.389602e-03 -7.536355e-03 #> [1656,] 1.00000000 0.45454545 1.00000000  9.459607e-03  6.270595e-03 #> [1657,] 0.00000000 0.54545455 1.00000000  4.778933e-03 -3.647429e-03 #> [1658,] 0.09090909 0.54545455 1.00000000  8.464301e-03 -9.656778e-03 #> [1659,] 0.18181818 0.54545455 1.00000000  3.108059e-03  6.851704e-03 #> [1660,] 0.27272727 0.54545455 1.00000000 -8.755221e-03  8.883432e-03 #> [1661,] 0.36363636 0.54545455 1.00000000  2.658222e-03  4.022021e-03 #> [1662,] 0.45454545 0.54545455 1.00000000 -7.490042e-03  8.568083e-03 #> [1663,] 0.54545455 0.54545455 1.00000000 -4.839806e-03  6.388472e-03 #> [1664,] 0.63636364 0.54545455 1.00000000 -3.588473e-03  5.727106e-03 #> [1665,] 0.72727273 0.54545455 1.00000000 -6.031284e-03 -7.573235e-03 #> [1666,] 0.81818182 0.54545455 1.00000000 -6.066485e-03  5.604037e-03 #> [1667,] 0.90909091 0.54545455 1.00000000  7.659470e-03  9.222476e-04 #> [1668,] 1.00000000 0.54545455 1.00000000  8.061828e-03  5.585762e-03 #> [1669,] 0.00000000 0.63636364 1.00000000 -9.542001e-05  9.048058e-03 #> [1670,] 0.09090909 0.63636364 1.00000000  6.115861e-03  5.415781e-03 #> [1671,] 0.18181818 0.63636364 1.00000000 -2.490837e-03  9.431222e-03 #> [1672,] 0.27272727 0.63636364 1.00000000  2.159350e-03 -9.270586e-03 #> [1673,] 0.36363636 0.63636364 1.00000000 -7.007172e-03 -4.392549e-03 #> [1674,] 0.45454545 0.63636364 1.00000000  1.786129e-03 -2.031795e-03 #> [1675,] 0.54545455 0.63636364 1.00000000 -5.633704e-03 -2.532160e-03 #> [1676,] 0.63636364 0.63636364 1.00000000 -6.999086e-03  1.540894e-03 #> [1677,] 0.72727273 0.63636364 1.00000000  3.073789e-03  9.641391e-03 #> [1678,] 0.81818182 0.63636364 1.00000000 -7.021514e-03  2.890099e-03 #> [1679,] 0.90909091 0.63636364 1.00000000 -7.219887e-03  2.370071e-03 #> [1680,] 1.00000000 0.63636364 1.00000000  8.944738e-03  2.222000e-03 #> [1681,] 0.00000000 0.72727273 1.00000000  3.028422e-03 -1.716602e-03 #> [1682,] 0.09090909 0.72727273 1.00000000  8.611360e-03 -9.302232e-03 #> [1683,] 0.18181818 0.72727273 1.00000000 -6.644904e-03 -3.164520e-03 #> [1684,] 0.27272727 0.72727273 1.00000000  3.966187e-03 -5.434705e-03 #> [1685,] 0.36363636 0.72727273 1.00000000 -5.827177e-05  1.950704e-03 #> [1686,] 0.45454545 0.72727273 1.00000000 -7.012164e-03 -4.977480e-03 #> [1687,] 0.54545455 0.72727273 1.00000000 -8.017851e-03 -5.699055e-03 #> [1688,] 0.63636364 0.72727273 1.00000000 -9.433394e-03 -6.419370e-04 #> [1689,] 0.72727273 0.72727273 1.00000000 -4.609464e-03  3.252536e-03 #> [1690,] 0.81818182 0.72727273 1.00000000  1.680107e-03 -4.136446e-03 #> [1691,] 0.90909091 0.72727273 1.00000000 -5.618263e-03 -8.054432e-03 #> [1692,] 1.00000000 0.72727273 1.00000000  3.687705e-03  4.728204e-04 #> [1693,] 0.00000000 0.81818182 1.00000000 -9.598427e-03  2.514954e-03 #> [1694,] 0.09090909 0.81818182 1.00000000  2.927561e-04  7.217527e-03 #> [1695,] 0.18181818 0.81818182 1.00000000  7.567063e-03  7.234434e-03 #> [1696,] 0.27272727 0.81818182 1.00000000  7.583580e-03 -8.881234e-03 #> [1697,] 0.36363636 0.81818182 1.00000000 -7.061845e-03 -9.816529e-04 #> [1698,] 0.45454545 0.81818182 1.00000000  3.638253e-03 -7.025783e-03 #> [1699,] 0.54545455 0.81818182 1.00000000  8.985773e-03 -8.796683e-03 #> [1700,] 0.63636364 0.81818182 1.00000000  3.229258e-03  4.211548e-03 #> [1701,] 0.72727273 0.81818182 1.00000000 -5.352286e-03 -5.614648e-03 #> [1702,] 0.81818182 0.81818182 1.00000000 -1.367464e-03 -7.112256e-03 #> [1703,] 0.90909091 0.81818182 1.00000000 -5.943816e-03  2.514386e-03 #> [1704,] 1.00000000 0.81818182 1.00000000 -6.333049e-03  7.588544e-03 #> [1705,] 0.00000000 0.90909091 1.00000000  5.785595e-03 -1.430148e-03 #> [1706,] 0.09090909 0.90909091 1.00000000 -9.143946e-03 -1.424176e-03 #> [1707,] 0.18181818 0.90909091 1.00000000 -6.773970e-03 -2.851568e-03 #> [1708,] 0.27272727 0.90909091 1.00000000  5.336403e-03  4.660635e-04 #> [1709,] 0.36363636 0.90909091 1.00000000  6.189561e-03 -5.379747e-03 #> [1710,] 0.45454545 0.90909091 1.00000000 -3.177414e-03 -9.879009e-03 #> [1711,] 0.54545455 0.90909091 1.00000000  4.495126e-03 -8.932714e-03 #> [1712,] 0.63636364 0.90909091 1.00000000  6.735163e-03 -3.812734e-03 #> [1713,] 0.72727273 0.90909091 1.00000000  7.714475e-03 -4.208253e-03 #> [1714,] 0.81818182 0.90909091 1.00000000 -5.619379e-03  5.415266e-03 #> [1715,] 0.90909091 0.90909091 1.00000000  7.852156e-03 -6.690603e-03 #> [1716,] 1.00000000 0.90909091 1.00000000  6.117178e-03 -9.125134e-03 #> [1717,] 0.00000000 1.00000000 1.00000000  1.663059e-03  3.985364e-03 #> [1718,] 0.09090909 1.00000000 1.00000000  4.257741e-03 -4.246410e-03 #> [1719,] 0.18181818 1.00000000 1.00000000 -7.329109e-03 -1.683152e-03 #> [1720,] 0.27272727 1.00000000 1.00000000  7.940941e-03  7.856294e-03 #> [1721,] 0.36363636 1.00000000 1.00000000  4.118760e-03 -6.761688e-03 #> [1722,] 0.45454545 1.00000000 1.00000000 -2.661670e-03 -3.259275e-03 #> [1723,] 0.54545455 1.00000000 1.00000000  8.429370e-03 -2.319957e-04 #> [1724,] 0.63636364 1.00000000 1.00000000 -8.587625e-03 -5.050616e-03 #> [1725,] 0.72727273 1.00000000 1.00000000 -7.120599e-03 -3.096261e-03 #> [1726,] 0.81818182 1.00000000 1.00000000 -3.177452e-03 -4.403736e-03 #> [1727,] 0.90909091 1.00000000 1.00000000  5.770568e-03 -1.340407e-03 #> [1728,] 1.00000000 1.00000000 1.00000000  5.802948e-03 -9.427380e-03 #>  #> $sample_size #> [1] 1728 #>"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvilinear_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a curvilinear 2D manifold — curvilinear_2d","title":"Generate points on a curvilinear 2D manifold — curvilinear_2d","text":"function generates points curvilinear 2D manifold based nonlinear equation.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvilinear_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a curvilinear 2D manifold — curvilinear_2d","text":"","code":"curvilinear_2d(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvilinear_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a curvilinear 2D manifold — curvilinear_2d","text":"sample_size number points generate. num_noise_dims number noise dimensions add generated points. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvilinear_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a curvilinear 2D manifold — curvilinear_2d","text":"matrix containing generated points curvilinear 2D manifold.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvilinear_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a curvilinear 2D manifold — curvilinear_2d","text":"","code":"curvilinear_points <- curvilinear_2d(sample_size = 100, num_noise_dims = 2,                                      min_noise = -1, max_noise = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","title":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","text":"function generates curvy branching cluster data three clusters different shapes.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","text":"","code":"curvy_branching_cluster(   sample_size,   cluster_size_vec = NULL,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","text":"sample_size total number data points generated. cluster_size_vec vector specifying number points cluster. provided, sample_size divided equally among clusters. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Curvy Branching Cluster Data — curvy_branching_cluster","text":"","code":"# Generate curvy branching cluster data with custom parameters data <- curvy_branching_cluster(sample_size = 300, cluster_size_vec = c(100, 150, 50), num_noise_dims = 6, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","title":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","text":"function generates data four clusters, two follow curvilinear pattern two distributed randomly.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","text":"","code":"curvy_branching_cluster_with_bkg_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_cluster_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Curvy Branching Cluster Data with Background Noise — curvy_branching_cluster_with_bkg_noise","text":"","code":"# Generate curvy branching cluster data with background noise with custom parameters data <- curvy_branching_cluster_with_bkg_noise(sample_size = 400, num_noise_dims = 10, min_noise = -0.5, max_noise = 0.5)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","title":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","text":"function generates data curvy branching clusters along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","text":"","code":"curvy_branching_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_branching_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Curvy Branching Clusters with Noise — curvy_branching_with_noise","text":"","code":"# Generate curvy branching clusters with noise with custom parameters data <- curvy_branching_with_noise(sample_size = 200, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_cell_cycle_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","title":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","text":"function generates curvy cell cycle dataset added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_cell_cycle_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","text":"","code":"curvy_cell_cycle_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_cell_cycle_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_cell_cycle_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","text":"matrix containing curvy cell cycle data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_cell_cycle_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Curvy Cell Cycle Data with Noise — curvy_cell_cycle_with_noise","text":"","code":"curvy_cell_cycle_data <- curvy_cell_cycle_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_tree_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","title":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","text":"function generates dataset representing curvy tree structure, added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_tree_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","text":"","code":"curvy_tree_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_tree_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_tree_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","text":"matrix containing curvy tree data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/curvy_tree_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Curvy Tree Data with Noise — curvy_tree_with_noise","text":"","code":"tree_data <- curvy_tree_with_noise(sample_size = 300, num_noise_dims = 8,                                    min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_3d_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a Dini's surface. — dini_surface_3d_row","title":"Generate points on a Dini's surface. — dini_surface_3d_row","text":"function generates points Dini's surface.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_3d_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a Dini's surface. — dini_surface_3d_row","text":"","code":"dini_surface_3d_row(a = 1, b = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_3d_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a Dini's surface. — dini_surface_3d_row","text":"Outer radius surface. b Space loops.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_3d_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a Dini's surface. — dini_surface_3d_row","text":"matrix containing generated points surface.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_3d_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a Dini's surface. — dini_surface_3d_row","text":"","code":"dini_surface_3d_row(a = 1, b = 1) #>               x          y        z #> [1,] -0.4528026 0.07436319 8.735729"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","title":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","text":"function generates points sampled Dini surface along optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","text":"","code":"dini_surface_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","text":"sample_size Total number data points generate. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/dini_surface_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points sampled from the Dini surface with optional noise. — dini_surface_with_noise","text":"","code":"dini_surface_with_noise(sample_size = 100, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #>                [,1]        [,2]        [,3]          [,4]          [,5] #>   [1,]  0.699092962 -0.65511203  5.52200160 -0.0162277209  0.0060418914 #>   [2,] -0.374434107  0.91808272  8.24197273  0.0484597159 -0.0191798187 #>   [3,]  0.284601309  0.50737717  0.73606615 -0.0459075569  0.0050158339 #>   [4,] -0.342721855 -0.42163785  9.93307435 -0.0334925848  0.0389458635 #>   [5,] -0.793895839 -0.16749763  3.26473933  0.0377066206 -0.0143328433 #>   [6,]  0.257649608  0.28818288  0.15958364 -0.0395732186 -0.0402970245 #>   [7,] -0.240195496  0.96504863  8.09753330  0.0337654296 -0.0216920764 #>   [8,]  0.573188948  0.72570361  7.16531677  0.0218800192 -0.0335653397 #>   [9,] -0.109793317  0.97563431  7.96838098 -0.0388236875 -0.0224314824 #>  [10,] -0.846449722  0.35284705  9.05324265 -0.0199245394 -0.0214177442 #>  [11,]  0.874189549  0.12307149  0.09987056  0.0412999706 -0.0124897638 #>  [12,] -0.990201701  0.10584151  9.31854666 -0.0067402777 -0.0479673292 #>  [13,] -0.651263166  0.57808605  2.36908064  0.0006591435  0.0094347040 #>  [14,]  0.237777619  0.04682834 -0.93087973 -0.0398559760  0.0412415796 #>  [15,] -0.185972931 -0.10666646  8.70087148 -0.0198713040  0.0087055276 #>  [16,]  0.064883143 -0.07731992  9.70477613 -0.0141472039 -0.0092912858 #>  [17,] -0.100763165 -0.71571161  4.41357271  0.0352118721  0.0096569608 #>  [18,]  0.051605453  0.05656992  4.85030678 -0.0079735630 -0.0032210261 #>  [19,] -0.972407882  0.21130345  2.92794391 -0.0272157980  0.0109461431 #>  [20,]  0.044675975 -0.09287627  9.47570564  0.0465477508  0.0049074243 #>  [21,]  0.026058834 -0.72529191 10.87538600  0.0281944202  0.0441229291 #>  [22,] -0.317135291 -0.07178834  8.80400866  0.0079305935  0.0046589536 #>  [23,] -0.356668717  0.47163331  8.19113792  0.0332555604 -0.0223319527 #>  [24,]  0.744597364  0.65007916  0.71890777 -0.0172750928  0.0057234509 #>  [25,] -0.016187285 -0.31831298 10.08245847  0.0227653674  0.0245447804 #>  [26,] -0.440732527 -0.82680298  4.23802172  0.0063066037  0.0020481335 #>  [27,]  0.001930333  0.32416982  0.71859420  0.0139974989 -0.0447922603 #>  [28,]  0.278671024 -0.16858562  4.89730581 -0.0178559134 -0.0302934072 #>  [29,]  0.095674337 -0.70259139  4.67542660 -0.0006271232  0.0415414709 #>  [30,] -0.550589899 -0.82984035  4.12634010  0.0100844382 -0.0057582209 #>  [31,]  0.724662242  0.68794714  0.75943425  0.0107934259  0.0170204326 #>  [32,] -0.844896490  0.51623546  2.59219175 -0.0089848436 -0.0341853175 #>  [33,] -0.238598519 -0.20588472  2.98051269  0.0471387753  0.0140931498 #>  [34,] -0.069890699 -0.06031583  1.77579628  0.0110489386 -0.0086917707 #>  [35,] -0.669495583 -0.44691172  3.64073412  0.0244097535  0.0001630595 #>  [36,] -0.702972227  0.30243905  8.89771460 -0.0419164541 -0.0093407636 #>  [37,] -0.589923098  0.17831851  2.57069678  0.0323652630  0.0404280977 #>  [38,]  0.889218026 -0.31690674 12.21119508  0.0169541707 -0.0093717973 #>  [39,] -0.652541208 -0.70045794 10.25405567  0.0285713033  0.0424148160 #>  [40,] -0.756748858  0.06891379  9.20861796 -0.0476668029  0.0063516749 #>  [41,]  0.079503494  0.28879850  6.66400655  0.0117054416  0.0126243548 #>  [42,] -0.583015858  0.78103585  2.21588277  0.0282385771 -0.0183351835 #>  [43,] -0.103940983  0.43013108  7.53241120  0.0237279037 -0.0445817056 #>  [44,] -0.002445968 -0.15540866  9.41905835  0.0061557579 -0.0422443861 #>  [45,] -0.285270863  0.60380303  8.07955104  0.0282824257  0.0146294602 #>  [46,] -0.757160494 -0.65202006 10.13568216 -0.0181531919  0.0074056810 #>  [47,]  0.329004284 -0.08902195  5.21994886  0.0320352582 -0.0314484064 #>  [48,] -0.028480790  0.70059691  1.43117823 -0.0024434826  0.0337394231 #>  [49,]  0.084103028 -0.98449656 11.07956158 -0.0462410185  0.0498855758 #>  [50,]  0.745031839 -0.26651772  5.83984774  0.0249521357 -0.0193995566 #>  [51,]  0.147321232  0.93700942  1.40357118  0.0325814311  0.0202686697 #>  [52,]  0.461427007 -0.61172235 11.52186623 -0.0285212245  0.0132212917 #>  [53,]  0.153748084  0.45119844  7.03294269 -0.0451294365 -0.0398065699 #>  [54,] -0.437557985 -0.14917710  9.23366961  0.0203104993 -0.0225772933 #>  [55,] -0.408625640  0.89431386  8.28463159  0.0239448926 -0.0396199872 #>  [56,]  0.946335848 -0.08754474 12.48478701 -0.0196615033  0.0460981871 #>  [57,] -0.480213247  0.86955579  2.07587980  0.0245240715 -0.0319413923 #>  [58,]  0.947587554  0.28377846  0.28990658  0.0170367325 -0.0451131897 #>  [59,] -0.008460198  0.91179440  7.83753545  0.0193450200  0.0097942993 #>  [60,]  0.281277560 -0.95865905 11.28094513 -0.0439215184  0.0116099892 #>  [61,]  0.068396612 -0.13988858  9.89137142 -0.0409448875  0.0496068916 #>  [62,]  0.550550617 -0.64937416  5.35754833  0.0400419420 -0.0014850126 #>  [63,] -0.252963865 -0.94935914  4.45418507 -0.0370169153 -0.0052995480 #>  [64,] -0.080699625  0.02695708  0.66011739 -0.0176829793 -0.0481359621 #>  [65,] -0.183892780 -0.19704598  9.22211918  0.0186770425  0.0178595704 #>  [66,]  0.883632052  0.42352906  0.44966835 -0.0321597103 -0.0409791842 #>  [67,] -0.301979112 -0.95164881  4.40517685  0.0087555014 -0.0067884965 #>  [68,]  0.497305309 -0.05657797 12.00304469  0.0182474675 -0.0159242862 #>  [69,]  0.292207822 -0.66393162 11.25372703 -0.0049072516 -0.0269608588 #>  [70,] -0.920282193 -0.38333442  3.53643670  0.0331201559 -0.0299704217 #>  [71,] -0.458017227  0.49169950  2.10956677  0.0164907773 -0.0348179629 #>  [72,] -0.062652321 -0.07737214  2.02908458  0.0100751778 -0.0338285447 #>  [73,] -0.586891360  0.49714557  2.32126755  0.0261379774 -0.0419435456 #>  [74,] -0.921438405  0.37731172  2.75267301  0.0421313571 -0.0461354145 #>  [75,] -0.785765768 -0.18197158  3.28088383  0.0452762598  0.0168495948 #>  [76,]  0.459414265  0.06622420  5.91025277 -0.0208375141 -0.0001259127 #>  [77,]  0.294732107  0.95519677  7.55468690  0.0154112210  0.0156917039 #>  [78,] -0.409489320 -0.26477768  9.52605675  0.0491431011  0.0095616273 #>  [79,] -0.712383673 -0.59879075 10.14155462  0.0331097768  0.0099626242 #>  [80,] -0.272269823 -0.31922841  3.39949810  0.0032137258  0.0103170313 #>  [81,]  0.616064492 -0.65781710  5.43437268 -0.0241745994 -0.0041123882 #>  [82,]  0.568862423  0.39552462  0.41874747 -0.0108795706 -0.0461574898 #>  [83,] -0.426760102 -0.07092872  2.72727555 -0.0033740966  0.0284061805 #>  [84,]  0.779403480 -0.14930854 12.27907704  0.0047070357  0.0314620565 #>  [85,] -0.422903923  0.59782616  2.03649994  0.0089358447  0.0183065254 #>  [86,]  0.274814052  0.52454289  0.77904671 -0.0472702682 -0.0411002299 #>  [87,] -0.034075885  0.88885597  1.57262330  0.0126192685 -0.0477070170 #>  [88,] -0.479250683 -0.39484553  9.84248861 -0.0387640618 -0.0026511545 #>  [89,] -0.104943849 -0.24900736  9.57661742 -0.0300083662  0.0040045442 #>  [90,]  0.821032715  0.52787623  0.56787309 -0.0129118889  0.0109562132 #>  [91,]  0.105181481  0.33546232  6.78024288  0.0322294819  0.0153415834 #>  [92,]  0.102298018 -0.01715647  4.15518468 -0.0168839773  0.0174701914 #>  [93,]  0.330106101  0.56668589  7.09714326 -0.0162145063  0.0385697496 #>  [94,] -0.511198018  0.65435170  2.16241104  0.0001356485 -0.0460913025 #>  [95,]  0.469771167  0.28551312  0.17589639 -0.0229241776  0.0423819362 #>  [96,] -0.340508934  0.73612388  1.91904580 -0.0169863004  0.0356609766 #>  [97,] -0.639919866  0.35976883  2.48115025 -0.0409264283  0.0377503688 #>  [98,]  0.705833531 -0.65938331 11.82101011 -0.0099313898  0.0040915332 #>  [99,] -0.914458598  0.27848112  2.83708067 -0.0190295386 -0.0420256294 #> [100,]  0.914092379 -0.01768551 12.52238624 -0.0226834745  0.0407121711 #>                 [,6]          [,7] #>   [1,] -0.0247835588 -0.0179297998 #>   [2,] -0.0291449046 -0.0186733560 #>   [3,] -0.0419486718  0.0484900970 #>   [4,] -0.0259754745  0.0071866210 #>   [5,]  0.0417307753 -0.0122555044 #>   [6,]  0.0245025961  0.0185985072 #>   [7,] -0.0462076291  0.0099559400 #>   [8,]  0.0461586950 -0.0121719220 #>   [9,]  0.0031082865 -0.0412589109 #>  [10,]  0.0399917101  0.0307866731 #>  [11,] -0.0342379403  0.0473428499 #>  [12,] -0.0460008409 -0.0290710928 #>  [13,]  0.0233293395  0.0358799386 #>  [14,] -0.0074213206 -0.0438829132 #>  [15,] -0.0117619061  0.0097305555 #>  [16,]  0.0334684087 -0.0394715721 #>  [17,] -0.0293025211  0.0381387482 #>  [18,] -0.0015684485 -0.0477320825 #>  [19,] -0.0290819821 -0.0432082476 #>  [20,]  0.0322903698  0.0472968488 #>  [21,]  0.0170338519 -0.0017855093 #>  [22,] -0.0089122050  0.0340600477 #>  [23,] -0.0044701922 -0.0199805643 #>  [24,]  0.0228978785  0.0415052952 #>  [25,]  0.0015217240 -0.0278199562 #>  [26,] -0.0087552177  0.0467150789 #>  [27,]  0.0315082168 -0.0322540076 #>  [28,] -0.0382459324 -0.0416060831 #>  [29,]  0.0135661706  0.0202375573 #>  [30,] -0.0065753211 -0.0170134119 #>  [31,] -0.0354548863 -0.0283356632 #>  [32,] -0.0023627899 -0.0035127251 #>  [33,]  0.0406844551 -0.0026691965 #>  [34,] -0.0202380276  0.0260852291 #>  [35,]  0.0129092838  0.0388146388 #>  [36,]  0.0417667701  0.0339427894 #>  [37,]  0.0391168787 -0.0153835058 #>  [38,]  0.0272624169  0.0492188953 #>  [39,]  0.0355979941 -0.0309391920 #>  [40,]  0.0005671144  0.0429588423 #>  [41,]  0.0449339391 -0.0149408118 #>  [42,] -0.0016237431 -0.0178790121 #>  [43,]  0.0122192391 -0.0328574287 #>  [44,]  0.0106427161  0.0145855378 #>  [45,] -0.0017422932  0.0310074142 #>  [46,] -0.0282969272 -0.0085242157 #>  [47,] -0.0205847530 -0.0368709176 #>  [48,]  0.0067314286 -0.0063704733 #>  [49,]  0.0018338934  0.0485404771 #>  [50,]  0.0082189079 -0.0350358319 #>  [51,]  0.0003823774 -0.0328537597 #>  [52,]  0.0483877727 -0.0484171387 #>  [53,] -0.0052650960  0.0245394473 #>  [54,] -0.0082508259  0.0035061127 #>  [55,] -0.0431251653 -0.0411622626 #>  [56,] -0.0243078477 -0.0248105018 #>  [57,]  0.0444022915  0.0058300460 #>  [58,] -0.0204011699 -0.0286415770 #>  [59,] -0.0277264541  0.0096196144 #>  [60,] -0.0039783272  0.0482262683 #>  [61,]  0.0190108571 -0.0343061295 #>  [62,]  0.0328069537 -0.0130194174 #>  [63,] -0.0049575569 -0.0130231560 #>  [64,] -0.0205270803  0.0277021285 #>  [65,]  0.0201687511  0.0171359950 #>  [66,] -0.0294866548 -0.0410016794 #>  [67,]  0.0274991157 -0.0436537053 #>  [68,] -0.0427972180 -0.0208453951 #>  [69,] -0.0233123783 -0.0166789675 #>  [70,]  0.0301500687  0.0467434797 #>  [71,]  0.0215750773  0.0209211191 #>  [72,]  0.0493816933 -0.0007117688 #>  [73,]  0.0184374433  0.0029358712 #>  [74,]  0.0385404728  0.0076141684 #>  [75,] -0.0096014414  0.0303298179 #>  [76,] -0.0453389097 -0.0243408122 #>  [77,]  0.0216569343  0.0453203099 #>  [78,]  0.0081911560  0.0371353919 #>  [79,] -0.0085186577  0.0335493435 #>  [80,]  0.0241911409  0.0247125781 #>  [81,]  0.0293384820 -0.0191103565 #>  [82,] -0.0017504400  0.0361984506 #>  [83,]  0.0410792979 -0.0015809973 #>  [84,] -0.0126740734 -0.0071589286 #>  [85,]  0.0131146887  0.0150105994 #>  [86,]  0.0281264512 -0.0422230177 #>  [87,]  0.0116592989 -0.0320363989 #>  [88,]  0.0424530120  0.0003174423 #>  [89,]  0.0149552828 -0.0067882733 #>  [90,] -0.0150328351 -0.0409338249 #>  [91,] -0.0432485052 -0.0448285777 #>  [92,] -0.0284293052  0.0145013161 #>  [93,] -0.0090045543 -0.0063322747 #>  [94,]  0.0367839109  0.0086621583 #>  [95,]  0.0471732917  0.0208860335 #>  [96,] -0.0248816428 -0.0066309534 #>  [97,]  0.0302545738  0.0104186096 #>  [98,]  0.0194909660  0.0498341559 #>  [99,] -0.0080567336 -0.0078010959 #> [100,] -0.0276187985  0.0133110690"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/eight_branching_data_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","title":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","text":"function generates dataset representing eight branching patterns, added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/eight_branching_data_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","text":"","code":"eight_branching_data_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/eight_branching_data_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/eight_branching_data_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","text":"matrix containing eight branching data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/eight_branching_data_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Eight Branching Data with Noise — eight_branching_data_with_noise","text":"","code":"branching_data <- eight_branching_data_with_noise(sample_size = 400, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_branching_data_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","title":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","text":"function generates dataset representing four branches added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_branching_data_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","text":"","code":"four_branching_data_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_branching_data_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_branching_data_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","text":"matrix containing four-branching data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_branching_data_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Four-Branching Data with Noise — four_branching_data_with_noise","text":"","code":"four_branching_data <- four_branching_data_with_noise(sample_size = 400, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_diff_long_clutsers_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","title":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","text":"function generates dataset consisting four different long clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_diff_long_clutsers_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","text":"","code":"four_diff_long_clutsers_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_diff_long_clutsers_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_diff_long_clutsers_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","text":"matrix containing four different long clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_diff_long_clutsers_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Four Different Long Clusters with Noise — four_diff_long_clutsers_with_noise","text":"","code":"four_diff_long_clusters <- four_diff_long_clutsers_with_noise(sample_size = 200, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_long_clusters_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","title":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","text":"function generates data four long clusters along background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_long_clusters_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","text":"","code":"four_long_clusters_with_bkg_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_long_clusters_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_long_clusters_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/four_long_clusters_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Four Long Clusters with Background Noise — four_long_clusters_with_bkg_noise","text":"","code":"# Generate four long clusters with background noise with custom parameters data <- four_long_clusters_with_bkg_noise(sample_size = 400, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate synthetic data with Gaussian clusters — gaussian_clusters","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"Generate Gaussian Clusters","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"","code":"gaussian_clusters(   sample_size,   num_clusters,   mean_matrix,   var_vec,   num_dims,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"sample_size total number data points generated. num_clusters number clusters generate. mean_matrix matrix row represents mean vector cluster. var_vec vector specifying variance cluster. num_dims number effective dimensions data points. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"matrix containing generated Gaussian clusters.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"function generates Gaussian clusters specified parameters.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate synthetic data with Gaussian clusters — gaussian_clusters","text":"","code":"gaussian_clusters(sample_size = 300, num_clusters = 5, mean_matrix = rbind(c(1,0,0,0), c(0,1,0,0), c(0,0,1,0), c(0,0,0,1), c(0,0,0,0)), var_vec = c(0.05, 0.05, 0.05, 0.05, 0.05), num_dims = 4, num_noise_dims = 2, min_noise = -0.05, max_noise = 0.05) #>                 [,1]          [,2]         [,3]          [,4]          [,5] #>   [1,]  9.706239e-01 -5.666241e-03 -0.006919228  0.0098598752  0.0268809722 #>   [2,]  9.386164e-01 -8.216005e-02  0.018332288  0.0462507502  0.0144801217 #>   [3,]  1.076572e+00  2.214494e-03 -0.045036921 -0.0341759047 -0.0059184681 #>   [4,]  1.059068e+00  4.853941e-02  0.100309750  0.0012510689 -0.0425121390 #>   [5,]  9.694301e-01  1.021059e-01 -0.100519890 -0.0529118756  0.0491911710 #>   [6,]  9.599125e-01  5.874332e-02  0.042919194  0.0471887229 -0.0184156843 #>   [7,]  1.048732e+00  4.186154e-02  0.079317803  0.0043423620  0.0376564745 #>   [8,]  1.018659e+00  3.576727e-02 -0.038717794  0.0667804802  0.0337217029 #>   [9,]  9.437627e-01  1.326787e-02  0.006106019  0.0151690665 -0.0055717256 #>  [10,]  9.918151e-01 -5.491040e-02  0.029714698  0.0881071081 -0.0219485987 #>  [11,]  1.021258e+00  5.364312e-03 -0.022010519  0.0586730073 -0.0058045116 #>  [12,]  1.004109e+00 -2.880923e-03  0.064027300 -0.0046078485 -0.0302668328 #>  [13,]  8.926842e-01  8.665387e-02  0.048725768  0.0757281150  0.0222657867 #>  [14,]  1.105630e+00  5.071989e-02  0.102252513 -0.0188758546  0.0142517534 #>  [15,]  1.068305e+00 -9.290020e-02  0.029073393 -0.0009509086 -0.0048338986 #>  [16,]  1.031739e+00 -3.115538e-02 -0.061162491 -0.0537743384 -0.0448315877 #>  [17,]  1.017583e+00 -5.967709e-02 -0.098780894  0.0587711132  0.0109261744 #>  [18,]  1.043566e+00  2.449332e-02 -0.016866132  0.0644411387  0.0074092948 #>  [19,]  1.010683e+00  3.655469e-02  0.044534935 -0.0249387531  0.0315089982 #>  [20,]  9.376236e-01  2.115573e-02 -0.018519138  0.0075051933  0.0181185631 #>  [21,]  1.018468e+00 -3.636601e-02 -0.032944830  0.0636450732  0.0104012838 #>  [22,]  1.044856e+00 -3.486607e-02  0.062582175 -0.1223867885  0.0282545492 #>  [23,]  9.605127e-01  5.372814e-02  0.003427788  0.0650750919  0.0257462068 #>  [24,]  1.044389e+00  7.419358e-02 -0.109107811  0.0084597603  0.0352274368 #>  [25,]  1.035295e+00 -7.089526e-02  0.107517496  0.0343681254 -0.0195516608 #>  [26,]  9.439231e-01  1.813623e-02  0.013306247  0.0120796163  0.0130255657 #>  [27,]  1.016384e+00 -6.390094e-03  0.028854973  0.0045415346  0.0370371234 #>  [28,]  9.178356e-01  3.850189e-02 -0.051062061 -0.0374847844 -0.0059450605 #>  [29,]  1.036762e+00  1.123298e-02  0.034518753 -0.0319845077  0.0409017809 #>  [30,]  9.764528e-01  9.421216e-03 -0.071689059  0.0210843236  0.0294616356 #>  [31,]  1.002895e+00  3.487598e-02  0.011670511 -0.0051083506 -0.0347174336 #>  [32,]  1.044650e+00  3.332221e-02 -0.021770389  0.0283571496  0.0165013298 #>  [33,]  9.847193e-01 -4.428657e-02 -0.011276651  0.0129551138  0.0020600955 #>  [34,]  1.037752e+00  1.822831e-02 -0.059330130  0.0560197882  0.0291315723 #>  [35,]  1.001272e+00 -6.942771e-02 -0.009982426  0.0199860426 -0.0241734581 #>  [36,]  1.099768e+00  2.368616e-02  0.006138647  0.0375230706 -0.0043311558 #>  [37,]  9.056984e-01  7.161460e-03  0.069259590  0.0333017849  0.0197050641 #>  [38,]  8.766409e-01  1.049174e-01  0.055923013  0.0072925632  0.0111815475 #>  [39,]  8.943924e-01 -8.133101e-02 -0.032593031  0.0190475179  0.0195326750 #>  [40,]  9.969616e-01 -4.929460e-02 -0.077313554  0.0044283904 -0.0029131754 #>  [41,]  1.007877e+00 -3.546488e-02  0.018222629 -0.0721403928  0.0086491222 #>  [42,]  1.055745e+00  4.917377e-02 -0.001484604  0.0215271596 -0.0103846712 #>  [43,]  9.563664e-01  2.694232e-02  0.015092222 -0.0554927870 -0.0316298332 #>  [44,]  1.044703e+00 -2.660902e-02  0.031483043 -0.0363353259  0.0449931754 #>  [45,]  9.996213e-01  1.430640e-01  0.021346997  0.0218734170 -0.0336844461 #>  [46,]  9.879833e-01 -4.939372e-03 -0.058050457 -0.0281062325  0.0295185160 #>  [47,]  9.615116e-01  2.560870e-02 -0.112381996  0.0436388727  0.0109642183 #>  [48,]  1.087455e+00  4.497203e-02 -0.023556520  0.0004430964  0.0450857915 #>  [49,]  1.015554e+00  6.906215e-02 -0.075606058 -0.0517023393  0.0418632961 #>  [50,]  9.683398e-01 -1.355888e-02  0.052259106 -0.0239929554  0.0161078225 #>  [51,]  9.501099e-01  2.089700e-02 -0.056323582 -0.0793583652 -0.0408706952 #>  [52,]  1.014604e+00  9.478986e-03 -0.030503620  0.0022711592 -0.0379863535 #>  [53,]  9.770445e-01 -1.057155e-01  0.019974736  0.0576619939 -0.0256054351 #>  [54,]  9.764408e-01  3.503143e-02  0.029945581 -0.0105580563  0.0403680203 #>  [55,]  1.066064e+00 -5.941855e-02  0.023029248  0.0669891798  0.0322701490 #>  [56,]  9.791256e-01 -5.974826e-02  0.022273538  0.0184385562 -0.0094683617 #>  [57,]  1.045529e+00  1.062824e-02  0.026994233 -0.0288864001  0.0421421865 #>  [58,]  9.135719e-01  2.059069e-02  0.068615734  0.0549376726 -0.0435855846 #>  [59,]  1.034612e+00  3.685297e-02  0.071647269  0.0684048054 -0.0016118542 #>  [60,]  9.852723e-01  1.088140e-01 -0.057633372 -0.0201061646 -0.0311812602 #>  [61,] -1.404679e-02  1.071320e+00  0.071022677 -0.0115637086 -0.0317744627 #>  [62,] -2.482471e-02  9.507502e-01  0.018140348  0.0018069272  0.0283873527 #>  [63,] -7.991271e-03  9.455399e-01  0.003201641 -0.0732612526  0.0355877011 #>  [64,]  7.301485e-02  9.708355e-01  0.046061964  0.0930701099 -0.0408561724 #>  [65,] -4.138949e-02  9.828116e-01 -0.059434387  0.0395176597  0.0192152658 #>  [66,] -8.144664e-02  1.044193e+00  0.027556799 -0.0153592070  0.0053714332 #>  [67,] -3.432438e-02  1.079028e+00 -0.099458361 -0.0458528881 -0.0471178949 #>  [68,] -2.106250e-02  9.764330e-01  0.060254802 -0.0176601389 -0.0151959421 #>  [69,] -3.329283e-02  1.041406e+00 -0.024419993 -0.0897898832 -0.0242929839 #>  [70,]  7.882760e-03  9.169890e-01 -0.021741924 -0.0493191545  0.0023604543 #>  [71,]  6.417091e-02  1.011793e+00 -0.073823758  0.0596840476 -0.0336597935 #>  [72,]  1.126119e-01  9.489572e-01  0.013625051 -0.0359978249  0.0292309778 #>  [73,]  5.688297e-02  1.044005e+00  0.034685279  0.1297735614 -0.0048298348 #>  [74,]  8.103603e-02  9.686354e-01  0.142031410  0.0270262188  0.0458123848 #>  [75,]  1.430033e-01  9.762041e-01 -0.060994720 -0.0380039631  0.0315432504 #>  [76,]  4.370683e-02  1.017541e+00  0.062136843 -0.0285369116  0.0143149123 #>  [77,]  6.315710e-02  1.069409e+00  0.090740723 -0.0350094459  0.0359524664 #>  [78,] -6.236192e-02  1.009733e+00 -0.027258199  0.0023445357 -0.0309190253 #>  [79,]  2.262419e-02  1.015253e+00  0.050340282  0.0088209636 -0.0276809559 #>  [80,]  1.795000e-02  1.054030e+00  0.044172302  0.0334931971 -0.0186468510 #>  [81,]  1.989532e-02  1.042008e+00  0.012784212 -0.0379221147  0.0025774861 #>  [82,] -8.920482e-03  1.050093e+00  0.020571342 -0.0187804575  0.0385901623 #>  [83,] -7.448073e-02  9.422825e-01  0.012020095  0.0135785867 -0.0419593446 #>  [84,] -4.742426e-02  1.083824e+00  0.047655523  0.0070850918  0.0003885070 #>  [85,] -4.016994e-02  9.716700e-01 -0.048529892 -0.0666469222  0.0186002290 #>  [86,] -9.678213e-03  1.061643e+00  0.061771298  0.0502261081  0.0296849377 #>  [87,]  5.407201e-02  9.733461e-01 -0.004071969 -0.0345455839 -0.0478539778 #>  [88,] -4.322187e-02  9.787008e-01 -0.077566255 -0.0496747040 -0.0312170489 #>  [89,] -6.371242e-02  1.028192e+00 -0.059431106 -0.0288484460  0.0116718386 #>  [90,]  2.550981e-02  9.366358e-01 -0.024095397  0.0105587761  0.0491407896 #>  [91,] -2.517884e-02  9.913367e-01 -0.043859345 -0.0722915526  0.0436075462 #>  [92,]  5.359646e-02  1.055006e+00 -0.059111941  0.0010200977 -0.0343158830 #>  [93,]  3.326932e-02  9.873188e-01 -0.046946099  0.0053971947 -0.0264792681 #>  [94,]  3.878983e-02  9.565274e-01 -0.071567671  0.0125488018 -0.0195171470 #>  [95,] -6.662070e-02  9.954391e-01  0.030506652  0.0234515423  0.0446470994 #>  [96,] -7.814284e-02  9.434974e-01 -0.021277412  0.0359377758  0.0061668147 #>  [97,] -6.256933e-02  9.105657e-01  0.013371673  0.0227906466  0.0266115719 #>  [98,]  2.444078e-02  1.025721e+00 -0.003382534  0.0097610078 -0.0087039553 #>  [99,] -9.647690e-03  1.032885e+00  0.027175337  0.0232228949 -0.0263440029 #> [100,] -4.601015e-02  9.954213e-01 -0.016649081 -0.1026469254 -0.0331091805 #> [101,]  3.168728e-03  1.024180e+00  0.012820450 -0.0473838424  0.0422211939 #> [102,]  2.473857e-02  1.015870e+00  0.003077915 -0.0697735191 -0.0315983411 #> [103,]  3.112527e-02  1.071093e+00 -0.059854913 -0.0462527250  0.0052642121 #> [104,]  3.951170e-02  9.683598e-01 -0.087381294 -0.0410862670  0.0454919790 #> [105,] -5.530448e-02  1.032353e+00  0.030610406 -0.0764324079  0.0093741347 #> [106,] -5.177414e-02  1.059351e+00  0.050899999 -0.0191696517 -0.0093655701 #> [107,] -2.932732e-02  1.089793e+00 -0.141585798  0.0266554238  0.0419065030 #> [108,]  4.669760e-02  9.505704e-01 -0.119531755 -0.0215109525 -0.0107712290 #> [109,] -2.861672e-02  9.709549e-01  0.059149173 -0.0349928424  0.0382439618 #> [110,] -9.117097e-02  9.764843e-01 -0.094730598  0.0066727121  0.0274786165 #> [111,] -4.906415e-02  9.818971e-01  0.067546751 -0.0322386892  0.0455234236 #> [112,] -8.832277e-02  1.058231e+00  0.081469705 -0.0062782443 -0.0443170598 #> [113,] -7.746377e-02  1.029500e+00 -0.073583151  0.0577860981 -0.0325108052 #> [114,] -6.988675e-02  9.687376e-01 -0.033105998 -0.0218670105 -0.0283417728 #> [115,]  5.072506e-02  9.815237e-01 -0.096954067 -0.0034117833 -0.0423423398 #> [116,] -3.823305e-02  1.014300e+00 -0.066648908  0.0161519928 -0.0462612609 #> [117,]  2.332887e-02  9.614096e-01  0.108053094  0.0729481583  0.0481902373 #> [118,] -7.594761e-02  1.095070e+00  0.022029199  0.0044385187 -0.0367731982 #> [119,] -6.524894e-02  1.033973e+00 -0.022488929 -0.0531785375 -0.0409848387 #> [120,] -5.558886e-02  1.116629e+00  0.004812795  0.0088575461  0.0220249811 #> [121,] -5.439330e-02 -2.904947e-02  0.992133270  0.0056383454 -0.0202425378 #> [122,] -5.353079e-02  2.014852e-03  1.088125167  0.0242716868  0.0121788213 #> [123,]  2.439506e-02 -4.041357e-02  1.006894869  0.0160429490 -0.0068942426 #> [124,]  4.982097e-02 -1.251761e-02  0.956071418 -0.0230194759  0.0307231782 #> [125,]  5.025494e-02  4.238976e-02  1.040319776 -0.0397145376  0.0217060344 #> [126,] -4.371259e-02  1.541714e-02  1.094592014 -0.0350346881 -0.0187386144 #> [127,]  6.745822e-02  2.977251e-02  1.041560064  0.0362520600  0.0085297864 #> [128,] -8.138126e-02 -1.087678e-02  1.009239397 -0.0742789690 -0.0342787080 #> [129,]  4.882022e-02  3.064535e-02  0.972075629 -0.0154030329 -0.0130825861 #> [130,] -3.437824e-02  6.851839e-02  0.981399421  0.0077907664 -0.0296558761 #> [131,]  1.109899e-01 -3.513248e-02  1.073218990  0.0186078459 -0.0087859962 #> [132,] -3.041284e-02  7.981891e-02  1.055222022 -0.0389071362 -0.0067248370 #> [133,]  5.163125e-02 -8.484606e-02  1.028950753 -0.0064397067 -0.0195859058 #> [134,]  5.972390e-03 -1.589652e-02  1.040060077  0.0402337558 -0.0140192374 #> [135,]  4.564006e-02  2.005788e-02  1.031701166 -0.0217850857  0.0276155784 #> [136,]  2.401332e-02 -5.399579e-02  1.017978964  0.0380767587 -0.0496757670 #> [137,]  3.717132e-02 -5.373481e-02  0.968251014  0.0821087963  0.0077413448 #> [138,] -4.993533e-02 -1.098516e-01  1.006850113  0.0198603976  0.0181666031 #> [139,] -1.470553e-02  4.399873e-02  1.104219033 -0.0179246870 -0.0222881468 #> [140,]  3.028521e-02 -2.385073e-02  0.889154723 -0.0783303824 -0.0250797663 #> [141,] -2.452089e-02 -1.530007e-02  0.994264854 -0.0198099695 -0.0416851049 #> [142,]  6.693719e-03  7.628935e-03  0.974975676  0.0005067693 -0.0041878419 #> [143,]  5.015304e-02  2.745494e-02  1.026585064  0.0088430929 -0.0210783483 #> [144,] -7.661652e-03 -6.038015e-02  1.019087505 -0.1017744513 -0.0210225819 #> [145,]  1.468848e-02  7.134090e-02  0.925457554 -0.0865261489  0.0195216516 #> [146,]  6.328190e-03 -2.956168e-02  1.056703346 -0.0115226526 -0.0365325848 #> [147,]  2.262804e-02  3.120253e-02  0.898642268  0.0540672223 -0.0318755670 #> [148,]  5.676704e-02  3.863884e-02  1.071243439  0.0047384305 -0.0255422524 #> [149,]  2.837036e-02  9.060712e-02  0.898235458 -0.0142564201  0.0324034995 #> [150,] -9.977014e-02  8.586908e-02  1.134106925  0.0445054251  0.0222529342 #> [151,]  1.062357e-02 -4.848236e-02  0.933983442 -0.0723746521  0.0125231730 #> [152,]  7.500273e-02 -5.176670e-02  0.935272024 -0.0345037859 -0.0305580688 #> [153,]  5.838374e-03 -3.827191e-02  1.025388065  0.0345056912 -0.0230701996 #> [154,]  6.950161e-02  1.232583e-01  0.937180080  0.0651091996 -0.0334526993 #> [155,] -3.154082e-02  4.310128e-02  1.022382306  0.0225334434  0.0363401029 #> [156,]  5.529703e-02 -5.995251e-02  1.065723089 -0.0454559297  0.0047297754 #> [157,] -1.142571e-02 -8.492666e-02  0.994256585  0.0514806216  0.0262276742 #> [158,] -5.399920e-03  2.010555e-04  1.053520580  0.0652780605  0.0063406537 #> [159,] -2.187578e-02  5.782868e-02  1.040334372 -0.0382856053 -0.0356266348 #> [160,]  1.005093e-01  8.615330e-03  0.947689160  0.0364983852 -0.0054299544 #> [161,] -2.314528e-02  1.775168e-02  1.115810316 -0.0287697924  0.0198119192 #> [162,] -7.548377e-02 -2.604965e-02  0.904693265 -0.0013375131  0.0187066480 #> [163,] -1.368746e-02 -5.098503e-02  0.997002993 -0.0166307001  0.0266646778 #> [164,] -3.038485e-02  9.587830e-02  0.993543218  0.0238510182 -0.0155541293 #> [165,]  1.746846e-02 -2.163558e-02  0.898459327  0.0038823381  0.0103463094 #> [166,]  3.895018e-02  4.430548e-02  0.993139422  0.0172332318  0.0243805559 #> [167,]  7.689784e-02 -2.419413e-02  0.950496999  0.0667778867  0.0022564473 #> [168,]  5.355672e-02  6.317491e-02  1.006009199 -0.0053782841 -0.0147251505 #> [169,] -2.621420e-02  7.147334e-02  1.046424602 -0.0450851719  0.0023531646 #> [170,]  2.189296e-02  2.350628e-02  0.948637622 -0.1166821848 -0.0141204971 #> [171,]  1.097076e-01  4.483503e-02  1.031040921 -0.0415092363  0.0222251430 #> [172,] -7.081844e-03 -8.139374e-02  1.040679047  0.0889069272 -0.0424317487 #> [173,]  3.523279e-02 -1.379264e-02  0.984440356  0.0186638580  0.0273736841 #> [174,] -2.646456e-02  1.685363e-02  1.023541949 -0.0246225426 -0.0093505156 #> [175,]  4.257794e-02 -1.621866e-01  0.992730268  0.0702001391 -0.0136715992 #> [176,]  7.865294e-02  3.847925e-02  1.077999404 -0.0454359365 -0.0163987746 #> [177,]  2.951921e-02 -6.620630e-02  0.949011415  0.0357406026  0.0420799294 #> [178,] -1.646297e-02 -3.237755e-02  1.034321804 -0.0918634846  0.0427381800 #> [179,]  2.620223e-02 -1.556966e-02  0.999584335 -0.0787017013 -0.0356263854 #> [180,] -4.880291e-02  4.651519e-02  1.078884571 -0.0242121972 -0.0174747279 #> [181,]  7.680291e-02  4.731849e-02  0.006500028  0.9321472764  0.0082457735 #> [182,] -4.474467e-03 -2.936473e-02  0.026132387  0.9276357912  0.0017619994 #> [183,]  5.355738e-02 -6.278718e-02  0.060667832  0.9692158696  0.0152316551 #> [184,]  3.513423e-02  7.229771e-02 -0.037616523  0.9435628392 -0.0154368999 #> [185,] -1.404724e-02  1.834060e-02  0.017222189  1.0023711274  0.0435169203 #> [186,] -5.854322e-02 -4.798564e-02  0.065176556  0.9805935668 -0.0174501113 #> [187,]  6.777906e-03 -4.881480e-02 -0.028234492  0.9957012820  0.0032279018 #> [188,] -5.667419e-03  9.050711e-02  0.033125518  0.9762385957  0.0372528795 #> [189,]  3.115096e-02 -1.071612e-01 -0.015776349  0.9982530177  0.0076119278 #> [190,] -2.270491e-02  6.861678e-02 -0.043919202  0.9211221391 -0.0187623257 #> [191,]  8.212885e-02 -7.698832e-02 -0.053847986  0.9214616755 -0.0177276352 #> [192,] -2.391387e-02  4.011983e-02  0.003838076  1.0042791663  0.0223837977 #> [193,] -1.247279e-02  1.027020e-01  0.024918599  0.8977376772  0.0371830637 #> [194,] -3.448340e-02  5.714744e-03 -0.076842273  1.0207340153 -0.0045476012 #> [195,] -2.331378e-02  7.074237e-02  0.029188378  1.0401636961 -0.0005303696 #> [196,] -1.333130e-01 -6.515296e-02  0.023041379  1.0677707153  0.0052830201 #> [197,]  4.668989e-02 -1.624320e-02 -0.027231395  1.0417354823 -0.0143382676 #> [198,]  6.486551e-03 -4.168339e-02  0.024475880  1.0107606390  0.0105669356 #> [199,] -3.250978e-02  8.987848e-02 -0.021146632  0.9742013018  0.0176092945 #> [200,]  3.814057e-02  3.683713e-02  0.032961281  0.9162233352  0.0153366521 #> [201,]  5.894569e-02  1.382800e-02  0.037918696  0.9943538362 -0.0225903200 #> [202,] -6.081092e-02  5.337515e-02  0.051849229  0.9550362334 -0.0222332434 #> [203,] -8.179547e-02 -3.767089e-02  0.035243440  0.9347608681 -0.0181774315 #> [204,] -2.830524e-02 -7.002879e-02  0.001159915  1.0033592485  0.0016266773 #> [205,] -8.707425e-02  1.480121e-03  0.020753103  1.1046016709  0.0445976659 #> [206,] -1.615362e-02  3.084451e-02 -0.089708646  0.9707556739 -0.0230915554 #> [207,]  6.322069e-02 -6.380834e-03 -0.089938402  0.9006356800 -0.0328565649 #> [208,] -7.460424e-02  5.400486e-02 -0.001317745  0.9568429952  0.0237467542 #> [209,]  1.174369e-02 -3.004414e-03 -0.033448099  1.0930545879 -0.0182747348 #> [210,] -1.535774e-02 -6.084941e-02  0.035914870  1.0226374265 -0.0154779445 #> [211,] -8.551288e-02  1.422663e-02  0.040841195  0.9648930996  0.0138439229 #> [212,] -4.681899e-02  7.048120e-02  0.060879511  1.0000012975  0.0490239524 #> [213,]  6.456396e-02  2.029737e-02  0.136762796  1.0259853310 -0.0118590961 #> [214,]  4.199036e-02  5.148546e-02  0.005795314  1.0446402611 -0.0092767853 #> [215,]  1.781612e-02 -9.347645e-02  0.112783303  1.0053389511 -0.0440224341 #> [216,]  3.051735e-02 -4.831409e-02 -0.043001708  0.9935897337  0.0303186050 #> [217,]  1.313692e-02  1.892232e-02 -0.021967978  1.0300154377 -0.0360515487 #> [218,]  4.699315e-02 -1.772302e-02  0.043694655  1.0213545143  0.0052421737 #> [219,] -8.525624e-04 -8.946734e-03 -0.018461997  0.9347619424  0.0132511463 #> [220,] -2.654785e-02 -1.264798e-01  0.056647671  1.1179325144  0.0322365890 #> [221,]  1.458491e-02  1.053677e-01  0.048817034  0.9572983057 -0.0389746529 #> [222,]  3.425518e-02 -2.996827e-02 -0.014054329  1.0290675318 -0.0233045466 #> [223,]  3.671032e-03  5.809672e-02 -0.049556039  0.9992121660 -0.0448459361 #> [224,]  9.258902e-02 -6.917924e-02  0.023705542  0.9236376700 -0.0061127545 #> [225,]  1.202405e-01 -1.439253e-03 -0.008204308  1.0281671807  0.0269400091 #> [226,]  1.620481e-02  8.874528e-03  0.083456679  1.0855345225 -0.0459554137 #> [227,]  4.639101e-02 -4.812345e-02 -0.066917793  1.0005364848  0.0384784768 #> [228,]  3.137575e-02 -1.992793e-02  0.015104041  1.1051193788 -0.0184362920 #> [229,] -5.786785e-02  2.648864e-02 -0.120127818  0.9396445587  0.0368400267 #> [230,] -2.320078e-02  9.010458e-02  0.061714274  0.9818221519  0.0087757826 #> [231,] -3.825227e-02 -7.801763e-02  0.030974799  0.9617468149 -0.0142939562 #> [232,] -3.674249e-02  5.160177e-02  0.053725983  1.0070721743  0.0343425299 #> [233,] -8.065248e-03 -9.199247e-03 -0.039722671  0.9766309500  0.0460298492 #> [234,] -2.785978e-02 -2.471524e-02 -0.057033560  1.0307824025 -0.0454177026 #> [235,]  5.678362e-02  5.049471e-02  0.068513391  1.0259519816  0.0245877968 #> [236,] -9.516918e-02  4.025687e-04  0.021527632  1.0057862191 -0.0329071053 #> [237,]  2.829190e-02  5.871070e-03  0.031952263  1.0435016057  0.0486597701 #> [238,] -1.459151e-01  3.711791e-04  0.050689890  1.0266452837 -0.0096877526 #> [239,] -6.949615e-02 -2.047346e-02  0.033282480  0.9454770770 -0.0022689855 #> [240,]  1.414396e-02  8.509616e-02 -0.018424498  0.9342168055 -0.0114620452 #> [241,] -8.910479e-02 -3.405938e-02 -0.020393007 -0.0102303451 -0.0304706511 #> [242,]  1.956995e-02 -6.046996e-02 -0.064495776 -0.0303460388 -0.0053492002 #> [243,] -5.395147e-02  1.903896e-02  0.081931985 -0.1313420691  0.0468809475 #> [244,] -9.358150e-02  3.629355e-02 -0.104046038 -0.0614619209 -0.0256173287 #> [245,]  1.356139e-02 -3.378786e-03  0.013524387 -0.0053053191 -0.0216864800 #> [246,]  6.538722e-02 -5.349591e-02 -0.027792767 -0.0516180816 -0.0493982766 #> [247,] -1.554934e-02  3.717515e-02 -0.009425225 -0.0470468457 -0.0009889928 #> [248,] -2.529796e-02 -3.069089e-02 -0.078015572 -0.0527940348 -0.0409229299 #> [249,] -2.108103e-02  3.709712e-02  0.024113972 -0.1267070697  0.0201006942 #> [250,] -1.295124e-03  1.356985e-01  0.009124548 -0.0466537728 -0.0275514362 #> [251,] -5.315610e-03 -1.476208e-02  0.069425778  0.0368374858  0.0416743542 #> [252,]  4.397476e-02  4.496651e-02  0.023030768 -0.0676345359  0.0317820466 #> [253,]  3.132315e-03  4.446043e-02 -0.055852406 -0.0043519913  0.0112101452 #> [254,]  4.376295e-02 -2.621917e-02 -0.039291135  0.1169637941 -0.0087697486 #> [255,] -1.000866e-02  1.050985e-01 -0.029523560  0.0152259979 -0.0105108654 #> [256,] -2.531709e-02 -1.829235e-02 -0.042386223 -0.0164222162 -0.0002496808 #> [257,] -8.229471e-03  4.131094e-02 -0.011306674  0.0353683687 -0.0277831663 #> [258,]  2.911283e-02  8.115820e-02 -0.015580315  0.0910682903 -0.0003906720 #> [259,]  6.200991e-02  1.349757e-02 -0.135847208 -0.0434038101  0.0195604800 #> [260,]  1.881034e-02  4.059467e-03 -0.012774668  0.0738664124 -0.0239886094 #> [261,] -1.088074e-02  1.039106e-02  0.009792007  0.0313642148 -0.0050562901 #> [262,] -1.514501e-02 -1.483862e-02 -0.094472825  0.0311427203 -0.0378001003 #> [263,] -4.055210e-02 -6.889766e-02 -0.024024587  0.0086996774  0.0367144670 #> [264,]  9.334168e-02  1.044734e-02  0.017546467 -0.0989056124 -0.0101272510 #> [265,] -1.308026e-02 -7.464007e-02  0.014856660 -0.0276248594  0.0098042526 #> [266,] -2.940206e-04  1.887065e-02  0.033417710  0.0326027606  0.0333451068 #> [267,]  1.413225e-02 -2.090243e-02 -0.026053857 -0.0206163480 -0.0067767795 #> [268,]  2.070643e-02  5.284797e-02 -0.030413959 -0.0437271613  0.0173167662 #> [269,] -3.279963e-02  1.658096e-04 -0.031991587 -0.0066083521 -0.0069795073 #> [270,] -4.070068e-03  9.246388e-03 -0.035001098  0.0664406130  0.0008196496 #> [271,]  4.710670e-02 -4.444100e-04  0.039513488  0.0447594944 -0.0326340943 #> [272,] -2.771292e-02  2.977949e-02  0.018202806 -0.0054689777 -0.0390625400 #> [273,] -6.233749e-03  7.264066e-04  0.071189728 -0.0145608325 -0.0097625059 #> [274,]  5.022399e-02  1.245511e-02  0.051334880 -0.0823732990 -0.0448884657 #> [275,] -5.138476e-02  6.711249e-03  0.062392140 -0.0243220666  0.0088589772 #> [276,]  2.371364e-02  3.916363e-02 -0.004666369  0.0120275460 -0.0206375017 #> [277,] -3.509743e-02 -1.866318e-02 -0.034246323 -0.0940780695  0.0462385566 #> [278,] -1.387688e-02  5.271935e-02 -0.073836865  0.0234836152  0.0439026143 #> [279,]  3.027372e-02 -4.324621e-02 -0.026854792 -0.0057964974  0.0229316475 #> [280,]  1.630715e-02  1.238472e-02 -0.034974444 -0.0053314321 -0.0398464252 #> [281,]  4.529611e-05  1.776670e-02  0.013277788 -0.0235930275  0.0114959900 #> [282,] -9.299589e-03  3.095123e-02  0.073290535 -0.0412704710  0.0492539845 #> [283,]  4.263159e-02  4.604559e-02  0.018804525  0.0754067026 -0.0207321491 #> [284,]  2.977640e-02 -5.143501e-02 -0.084072612  0.0810328999 -0.0200072714 #> [285,] -4.587079e-02 -1.001470e-01 -0.035697811  0.0043085299 -0.0152252437 #> [286,]  7.708054e-03 -3.074016e-02  0.018905540  0.0923526307  0.0303547882 #> [287,] -1.773734e-02  1.893038e-02  0.015899463  0.0363869461 -0.0312556549 #> [288,]  1.209424e-02  3.705338e-02  0.023427998  0.0269941730 -0.0249376538 #> [289,] -9.090383e-03 -8.432559e-02 -0.011323369  0.0534871000  0.0467580548 #> [290,] -5.887823e-02 -5.886942e-02 -0.150334032  0.0541176717 -0.0349366278 #> [291,]  4.608625e-02 -5.376805e-02  0.004341438  0.0107270840  0.0398311000 #> [292,] -2.354559e-02 -6.945583e-02  0.024206066 -0.0519656951 -0.0180907781 #> [293,]  1.034329e-01 -1.450846e-01  0.057547200  0.0744301716  0.0310856001 #> [294,] -2.572789e-02 -3.642133e-05 -0.021272395 -0.0941396655  0.0421827446 #> [295,]  2.413407e-03  4.684612e-02  0.020574087  0.0224670714 -0.0036943723 #> [296,] -2.795592e-02 -6.951729e-02  0.006283277 -0.0416301041 -0.0338218742 #> [297,] -1.900842e-02  4.128185e-03 -0.059999995 -0.0032332465 -0.0153908504 #> [298,] -4.532163e-02  6.629984e-04  0.022806494 -0.0006229115  0.0142070127 #> [299,]  3.119726e-02 -4.506773e-02 -0.057119856 -0.0187585638  0.0182914285 #> [300,] -1.856837e-02 -2.415694e-02  0.032047320  0.0873019064 -0.0158174434 #>                 [,6] #>   [1,]  4.433065e-02 #>   [2,] -5.159993e-03 #>   [3,]  2.901371e-02 #>   [4,] -3.223141e-02 #>   [5,]  1.842841e-02 #>   [6,]  4.403040e-04 #>   [7,] -2.312806e-02 #>   [8,]  2.717376e-02 #>   [9,]  4.667927e-02 #>  [10,]  2.092192e-02 #>  [11,] -2.812600e-02 #>  [12,]  4.427140e-02 #>  [13,]  2.996948e-02 #>  [14,] -4.255319e-02 #>  [15,] -4.591559e-02 #>  [16,] -3.010941e-02 #>  [17,]  1.014308e-02 #>  [18,]  1.362999e-02 #>  [19,]  2.881875e-03 #>  [20,] -1.328655e-02 #>  [21,]  2.468257e-02 #>  [22,]  3.288870e-02 #>  [23,]  1.244350e-02 #>  [24,] -3.556471e-02 #>  [25,]  3.540252e-02 #>  [26,] -4.737794e-02 #>  [27,] -4.785855e-02 #>  [28,]  4.792521e-02 #>  [29,] -1.288630e-02 #>  [30,]  4.216332e-02 #>  [31,] -1.250278e-02 #>  [32,] -3.138082e-02 #>  [33,] -1.864859e-02 #>  [34,]  3.568861e-02 #>  [35,] -4.488816e-02 #>  [36,]  4.409060e-02 #>  [37,] -2.063931e-02 #>  [38,]  1.760913e-02 #>  [39,]  1.756106e-02 #>  [40,]  3.512731e-02 #>  [41,]  1.650943e-02 #>  [42,]  4.399430e-03 #>  [43,] -4.930807e-02 #>  [44,]  2.089905e-02 #>  [45,]  3.630027e-02 #>  [46,] -2.922415e-02 #>  [47,] -3.058883e-02 #>  [48,]  4.231600e-02 #>  [49,]  9.227199e-05 #>  [50,] -3.810721e-02 #>  [51,] -1.765522e-02 #>  [52,] -3.893825e-02 #>  [53,] -2.256328e-02 #>  [54,]  3.632050e-02 #>  [55,] -4.600038e-02 #>  [56,] -3.797037e-02 #>  [57,] -4.341467e-02 #>  [58,]  9.860106e-03 #>  [59,]  6.518575e-03 #>  [60,]  3.131913e-02 #>  [61,]  4.145770e-02 #>  [62,] -4.459951e-02 #>  [63,]  2.317101e-02 #>  [64,]  4.205974e-02 #>  [65,] -2.672862e-03 #>  [66,] -4.032025e-02 #>  [67,]  1.285056e-02 #>  [68,]  1.709759e-02 #>  [69,] -1.414097e-02 #>  [70,] -8.517538e-03 #>  [71,] -5.966907e-03 #>  [72,]  3.348067e-02 #>  [73,] -2.500628e-02 #>  [74,] -1.689432e-02 #>  [75,] -5.078914e-03 #>  [76,] -8.997007e-03 #>  [77,]  2.136832e-03 #>  [78,] -2.561261e-03 #>  [79,] -4.463761e-02 #>  [80,] -9.813611e-03 #>  [81,] -4.651076e-03 #>  [82,] -3.981410e-02 #>  [83,]  3.017325e-02 #>  [84,]  4.302109e-02 #>  [85,] -2.861633e-02 #>  [86,]  3.657772e-02 #>  [87,] -2.963972e-02 #>  [88,] -2.903036e-03 #>  [89,] -2.347300e-02 #>  [90,]  4.694113e-02 #>  [91,]  3.722468e-02 #>  [92,]  1.976659e-02 #>  [93,]  8.979754e-04 #>  [94,] -4.553279e-02 #>  [95,] -4.187595e-02 #>  [96,] -3.155606e-02 #>  [97,]  3.058134e-02 #>  [98,] -1.286222e-02 #>  [99,] -4.287145e-02 #> [100,]  4.467736e-02 #> [101,] -4.615600e-02 #> [102,]  3.428953e-02 #> [103,] -1.660807e-02 #> [104,] -9.639518e-03 #> [105,]  2.778713e-02 #> [106,] -2.078307e-02 #> [107,]  3.780633e-02 #> [108,] -2.148886e-02 #> [109,] -2.000228e-03 #> [110,]  1.894506e-02 #> [111,]  4.749640e-02 #> [112,]  1.473222e-02 #> [113,]  2.534874e-03 #> [114,]  3.266231e-02 #> [115,]  4.868516e-02 #> [116,] -9.759634e-03 #> [117,]  2.429749e-02 #> [118,] -1.228189e-02 #> [119,] -4.245628e-02 #> [120,] -2.766666e-02 #> [121,] -3.604310e-02 #> [122,] -4.371054e-02 #> [123,] -4.457245e-02 #> [124,] -4.994426e-02 #> [125,] -2.479857e-02 #> [126,] -4.653036e-03 #> [127,] -1.026872e-03 #> [128,]  2.112033e-02 #> [129,]  4.499602e-02 #> [130,]  4.741891e-02 #> [131,] -4.164700e-02 #> [132,]  9.491201e-03 #> [133,]  3.609727e-02 #> [134,]  3.494421e-02 #> [135,] -4.316373e-02 #> [136,]  3.439609e-02 #> [137,] -4.077935e-02 #> [138,] -1.124647e-02 #> [139,]  3.537356e-02 #> [140,] -6.665141e-03 #> [141,] -3.639664e-02 #> [142,]  3.798521e-02 #> [143,] -2.946943e-02 #> [144,] -5.633454e-03 #> [145,] -3.997359e-02 #> [146,]  4.323496e-02 #> [147,] -3.343178e-02 #> [148,] -2.099256e-02 #> [149,]  3.258637e-02 #> [150,] -5.466797e-03 #> [151,] -2.585597e-02 #> [152,]  3.265164e-02 #> [153,] -2.499320e-02 #> [154,]  4.272568e-02 #> [155,]  9.974741e-03 #> [156,] -3.590610e-02 #> [157,] -3.130817e-02 #> [158,] -1.188488e-02 #> [159,] -4.629284e-02 #> [160,]  4.607664e-02 #> [161,]  1.959681e-02 #> [162,] -1.339523e-02 #> [163,] -2.991836e-02 #> [164,]  3.272018e-02 #> [165,] -2.987723e-02 #> [166,] -5.107522e-03 #> [167,]  3.216588e-02 #> [168,]  4.260120e-02 #> [169,] -1.133000e-02 #> [170,]  2.278921e-02 #> [171,] -1.736960e-03 #> [172,]  3.849788e-02 #> [173,]  2.529639e-02 #> [174,] -2.347301e-02 #> [175,] -3.101763e-02 #> [176,] -4.938802e-02 #> [177,]  1.551646e-02 #> [178,] -1.195475e-02 #> [179,]  3.988212e-02 #> [180,] -1.544144e-02 #> [181,] -1.584531e-02 #> [182,] -4.931070e-02 #> [183,] -2.374926e-02 #> [184,] -2.587860e-02 #> [185,]  6.282758e-04 #> [186,]  1.997064e-02 #> [187,]  2.325103e-03 #> [188,]  4.356470e-02 #> [189,]  1.889095e-03 #> [190,]  2.788533e-03 #> [191,] -1.169739e-02 #> [192,]  1.652146e-02 #> [193,] -2.764994e-02 #> [194,]  3.629148e-02 #> [195,]  2.824238e-02 #> [196,] -4.669556e-02 #> [197,] -1.597479e-02 #> [198,] -3.469667e-02 #> [199,] -4.508864e-02 #> [200,] -3.622665e-03 #> [201,] -2.682889e-02 #> [202,]  5.990647e-04 #> [203,]  5.661189e-03 #> [204,]  1.664990e-03 #> [205,]  1.072171e-02 #> [206,] -1.244846e-02 #> [207,] -1.101373e-02 #> [208,]  8.957047e-04 #> [209,]  3.157125e-02 #> [210,] -3.690969e-02 #> [211,]  4.622525e-03 #> [212,]  3.755400e-02 #> [213,]  4.427587e-03 #> [214,] -4.445058e-02 #> [215,]  3.139449e-02 #> [216,] -2.234362e-02 #> [217,]  1.840624e-02 #> [218,]  4.544628e-02 #> [219,] -4.642792e-02 #> [220,]  3.625105e-02 #> [221,] -7.717851e-03 #> [222,] -4.713201e-02 #> [223,] -5.884550e-03 #> [224,] -4.142111e-02 #> [225,] -3.949016e-02 #> [226,] -3.428738e-03 #> [227,] -3.000965e-02 #> [228,]  3.503348e-02 #> [229,] -2.906261e-02 #> [230,] -5.360450e-04 #> [231,]  2.179153e-02 #> [232,] -1.659577e-02 #> [233,]  1.638775e-02 #> [234,]  2.381165e-02 #> [235,] -3.489622e-02 #> [236,] -1.477963e-03 #> [237,] -6.184042e-03 #> [238,] -2.265914e-02 #> [239,] -2.705488e-02 #> [240,] -2.283133e-02 #> [241,]  3.952214e-02 #> [242,] -4.029729e-02 #> [243,] -4.644743e-02 #> [244,]  1.634146e-02 #> [245,]  4.690740e-02 #> [246,]  8.756434e-03 #> [247,] -2.020635e-02 #> [248,]  2.668230e-02 #> [249,]  3.863528e-02 #> [250,]  2.844607e-02 #> [251,]  2.523269e-02 #> [252,] -2.936419e-02 #> [253,]  3.357595e-02 #> [254,]  7.286758e-03 #> [255,]  3.167629e-02 #> [256,]  1.119003e-02 #> [257,]  4.467077e-02 #> [258,]  2.886254e-02 #> [259,] -3.314809e-02 #> [260,] -2.500731e-03 #> [261,] -1.925436e-02 #> [262,] -3.373951e-02 #> [263,]  3.151793e-02 #> [264,] -2.780764e-02 #> [265,]  1.003331e-02 #> [266,]  4.450276e-03 #> [267,]  4.165815e-02 #> [268,]  2.645295e-02 #> [269,] -1.066512e-02 #> [270,] -3.924495e-02 #> [271,] -3.238748e-02 #> [272,] -4.014463e-02 #> [273,]  4.994269e-03 #> [274,]  3.268213e-02 #> [275,] -2.730252e-02 #> [276,] -3.960486e-02 #> [277,] -3.680838e-02 #> [278,]  1.359392e-02 #> [279,] -2.142654e-02 #> [280,]  1.631026e-02 #> [281,]  2.643821e-02 #> [282,] -2.897991e-02 #> [283,]  1.133365e-02 #> [284,]  4.563436e-02 #> [285,]  3.148666e-02 #> [286,]  2.270839e-02 #> [287,] -4.237534e-02 #> [288,] -2.040541e-02 #> [289,] -6.256820e-03 #> [290,]  9.029177e-03 #> [291,] -2.590173e-02 #> [292,] -4.484322e-02 #> [293,]  4.190617e-02 #> [294,]  3.665605e-02 #> [295,]  2.600894e-02 #> [296,]  4.391216e-02 #> [297,]  9.184317e-03 #> [298,] -3.448573e-02 #> [299,] -2.965565e-02 #> [300,]  4.301496e-02"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters_diff_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","title":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","text":"function generates Gaussian clusters different numbers points per cluster.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters_diff_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","text":"","code":"gaussian_clusters_diff_points(   sample_size,   cluster_size_vec,   num_clusters,   mean_matrix,   var_vec,   num_dims,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters_diff_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","text":"sample_size total number data points generated. cluster_size_vec vector specifying number points cluster. num_clusters number clusters generate. mean_matrix matrix row represents mean vector cluster. var_vec vector specifying variance cluster. num_dims number effective dimensions data points. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters_diff_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","text":"matrix containing generated Gaussian clusters different points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gaussian_clusters_diff_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Gaussian Clusters with Different Points — gaussian_clusters_diff_points","text":"","code":"# Generate Gaussian clusters with custom parameters data <- gaussian_clusters_diff_points(sample_size = 400, cluster_size_vec = c(50, 100, 200, 50),                                       num_clusters = 4, mean_matrix =                                       rbind(c(1,0,0,0,0,0), c(0,1,0,0,0,0),                                       c(0,0,1,0,0,0), c(0,0,0,1,0,0)),                                       var_vec = c(0.02, 0.05, 0.06, 0.1),                                       num_dims = 6, num_noise_dims = 4,                                       min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gen_noise_dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Noise Dimensions — gen_noise_dims","title":"Generate Random Noise Dimensions — gen_noise_dims","text":"function generates random noise dimensions added coordinates sphere.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gen_noise_dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Noise Dimensions — gen_noise_dims","text":"","code":"gen_noise_dims(n, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gen_noise_dims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Noise Dimensions — gen_noise_dims","text":"n number observations generate noise dimensions. num_noise_dims number noise dimensions generate. min_noise minimum value random noise. max_noise maximum value random noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gen_noise_dims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Noise Dimensions — gen_noise_dims","text":"matrix containing generated random noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/gen_noise_dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Random Noise Dimensions — gen_noise_dims","text":"","code":"# Generate random noise dimensions with 3 dimensions, minimum value -1, and maximum value 1 gen_noise_dims(n = 50, num_noise_dims = 3, min_noise = -1, max_noise = 1) #>              [,1]         [,2]        [,3] #>  [1,] -0.59012032  0.363830975  0.67243725 #>  [2,]  0.15085678 -0.569498198 -0.47603450 #>  [3,] -0.51825364  0.122799122  0.20085680 #>  [4,] -0.73776092 -0.199959251  0.72637035 #>  [5,]  0.55092223 -0.738831747 -0.37747965 #>  [6,] -0.03188710  0.373898425 -0.96006755 #>  [7,]  0.34381330  0.550340277 -0.83984463 #>  [8,] -0.62829691  0.469262345 -0.72320982 #>  [9,] -0.15028177  0.883209653  0.58351042 #> [10,]  0.46899435  0.002156275  0.65409597 #> [11,] -0.87250620 -0.530743439  0.36970871 #> [12,] -0.90136433 -0.453510460 -0.28695205 #> [13,]  0.05352350 -0.792848323 -0.85122833 #> [14,]  0.29166354  0.515118668 -0.35363831 #> [15,]  0.65229982 -0.009973590  0.18654969 #> [16,]  0.28036450 -0.666656007  0.82297886 #> [17,] -0.90179694  0.069044840  0.74301895 #> [18,]  0.01693300 -0.776538014 -0.76426848 #> [19,]  0.53972651 -0.200032434 -0.29942194 #> [20,]  0.07537042  0.366558300 -0.04504109 #> [21,] -0.58352349 -0.205031262 -0.21468430 #> [22,]  0.49500559 -0.800781888 -0.69490630 #> [23,]  0.69082032  0.804373992  0.73639058 #> [24,] -0.17789062  0.224200455 -0.46036368 #> [25,] -0.81686435  0.192434929 -0.40002141 #> [26,] -0.21694361  0.427338323 -0.32959335 #> [27,]  0.90432526 -0.209292524 -0.07363631 #> [28,]  0.38190866  0.352938158  0.34515240 #> [29,] -0.17028621 -0.473999693  0.62943813 #> [30,]  0.93755513  0.436667517  0.83695196 #> [31,]  0.68807876 -0.343550300  0.74474248 #> [32,] -0.81112769 -0.319701432 -0.73746754 #> [33,] -0.78666642  0.741903305 -0.96174974 #> [34,] -0.45595643  0.760927265  0.38663321 #> [35,] -0.03114460  0.562027744  0.34204514 #> [36,] -0.41708418 -0.509012773  0.77782187 #> [37,] -0.90840033  0.605097950  0.81724627 #> [38,]  0.95705301  0.415756793  0.78566852 #> [39,] -0.45908522  0.622354390 -0.66573966 #> [40,] -0.16752270 -0.709258038  0.16766893 #> [41,]  0.38994899  0.344013950 -0.49285098 #> [42,]  0.20909609  0.844812593  0.03700774 #> [43,]  0.10119584  0.863458502 -0.46552117 #> [44,]  0.93421514 -0.681335458  0.59170593 #> [45,] -0.08405502 -0.502041401  0.83813688 #> [46,] -0.50257580 -0.585517632  0.84400212 #> [47,]  0.59563458  0.955428061  0.34242347 #> [48,] -0.29152431 -0.708821371 -0.03195703 #> [49,]  0.65213942 -0.772503925  0.09675412 #> [50,] -0.97736451  0.317767636 -0.87900505"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/grid_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Grid Data with Noise — grid_data","title":"Generate Grid Data with Noise — grid_data","text":"function generates grid dataset specified grid points along x y axes, optionally adds noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/grid_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Grid Data with Noise — grid_data","text":"","code":"grid_data(nx, ny, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/grid_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Grid Data with Noise — grid_data","text":"nx number grid points along x axis. ny number grid points along y axis. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/grid_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Grid Data with Noise — grid_data","text":"matrix containing grid data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/grid_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Grid Data with Noise — grid_data","text":"","code":"grid_data <- grid_data(nx = 10, ny = 10, num_noise_dims = 2, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/link_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Linked Data — link_data","title":"Generate Linked Data — link_data","text":"function generates linked data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/link_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Linked Data — link_data","text":"","code":"link_data(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/link_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Linked Data — link_data","text":"sample_size total number data points generated. product two. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/link_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Linked Data — link_data","text":"matrix containing generated linked data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/link_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Linked Data — link_data","text":"","code":"# Generate linked data with noise with custom parameters data <- link_data(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/long_cluster_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Long Cluster Data — long_cluster_data","title":"Generate Long Cluster Data — long_cluster_data","text":"function generates dataset consisting two long clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/long_cluster_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Long Cluster Data — long_cluster_data","text":"","code":"long_cluster_data(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/long_cluster_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Long Cluster Data — long_cluster_data","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/long_cluster_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Long Cluster Data — long_cluster_data","text":"matrix containing long cluster data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/long_cluster_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Long Cluster Data — long_cluster_data","text":"","code":"long_cluster <- long_cluster_data(sample_size = 200, num_noise_dims = 8,                                   min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mirror_s_curves_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","title":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","text":"function generates mirror S-curve datasets added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mirror_s_curves_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","text":"","code":"mirror_s_curves_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mirror_s_curves_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","text":"sample_size total number samples generate (divisible 2). num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mirror_s_curves_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","text":"matrix containing combined mirror S-curve datasets added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mirror_s_curves_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mirror S-curve Datasets with Noise — mirror_s_curves_with_noise","text":"","code":"mirror_s_curve_data <- mirror_s_curves_with_noise(sample_size = 200, num_noise_dims = 8, min_noise = -0.5, max_noise = 0.5)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 5-D Mobius Strip — mobius_5d","title":"Generate a 5-D Mobius Strip — mobius_5d","text":"function generates dataset representing 5-dimensional Mobius strip.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 5-D Mobius Strip — mobius_5d","text":"","code":"mobius_5d(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 5-D Mobius Strip — mobius_5d","text":"sample_size number points generate Mobius strip. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 5-D Mobius Strip — mobius_5d","text":"matrix containing generated Mobius strip.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a 5-D Mobius Strip — mobius_5d","text":"","code":"mobius_data <- mobius_5d(sample_size = 100, num_noise_dims = 3,                          min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Single Row for a 5-D Mobius Strip — mobius_5d_row","title":"Generate a Single Row for a 5-D Mobius Strip — mobius_5d_row","text":"function generates single row data representing point 5-dimensional Mobius strip.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Single Row for a 5-D Mobius Strip — mobius_5d_row","text":"","code":"mobius_5d_row()"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Single Row for a 5-D Mobius Strip — mobius_5d_row","text":"vector containing coordinates point Mobius strip.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_5d_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Single Row for a 5-D Mobius Strip — mobius_5d_row","text":"","code":"mobius_row <- mobius_5d_row()"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_cluster_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","title":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","text":"function generates dataset consisting mobius cluster added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_cluster_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","text":"","code":"mobius_cluster_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_cluster_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_cluster_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","text":"matrix containing mobius cluster added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/mobius_cluster_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mobius Cluster with Noise — mobius_cluster_with_noise","text":"","code":"mobius_cluster <- mobius_cluster_with_noise(sample_size = 200, num_noise_dims = 8,                                             min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a nonlinear 2D manifold — nonlinear_2d","title":"Generate points on a nonlinear 2D manifold — nonlinear_2d","text":"function generates points nonlinear 2D manifold based given equation.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a nonlinear 2D manifold — nonlinear_2d","text":"","code":"nonlinear_2d(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a nonlinear 2D manifold — nonlinear_2d","text":"sample_size number points generate. num_noise_dims number noise dimensions add generated points. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a nonlinear 2D manifold — nonlinear_2d","text":"matrix containing generated points nonlinear 2D manifold.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a nonlinear 2D manifold — nonlinear_2d","text":"","code":"nonlinear_points <- nonlinear_2d(sample_size = 100, num_noise_dims = 2,                                  min_noise = -1, max_noise = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_connect_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","title":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","text":"function generates dataset representing nonlinear connected clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_connect_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","text":"","code":"nonlinear_connect_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_connect_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_connect_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","text":"matrix containing nonlinear connected data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_connect_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Nonlinear Connected Data with Noise — nonlinear_connect_with_noise","text":"","code":"nonlinear_connect_with_noise <- nonlinear_connect_with_noise(sample_size = 400, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_mirror_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","title":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","text":"function generates dataset representing two mirror-image clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_mirror_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","text":"","code":"nonlinear_mirror_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_mirror_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_mirror_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","text":"matrix containing nonlinear mirror data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/nonlinear_mirror_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Nonlinear Mirror Data with Noise — nonlinear_mirror_with_noise","text":"","code":"nonlinear_mirror_with_noise <- nonlinear_mirror_with_noise(sample_size = 400, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_pattern_clusters_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","title":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","text":"function generates data one set doublets (pairs clusters) different patterns, along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_pattern_clusters_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","text":"","code":"one_doublet_dfifferent_pattern_clusters_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_pattern_clusters_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_pattern_clusters_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_pattern_clusters_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Different Pattern Clusters and Noise — one_doublet_dfifferent_pattern_clusters_with_noise","text":"","code":"# Generate doublets with different pattern clusters and noise with custom parameters data <- one_doublet_dfifferent_pattern_clusters_with_noise(sample_size = 280, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_var_clusters_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","title":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","text":"function generates data one set doublets (pairs clusters) clusters different variance, along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_var_clusters_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","text":"","code":"one_doublet_dfifferent_var_clusters_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_var_clusters_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_var_clusters_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_dfifferent_var_clusters_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Different Variance Clusters and Noise — one_doublet_dfifferent_var_clusters_with_noise","text":"","code":"# Generate doublets with different variance clusters and noise with custom parameters data <- one_doublet_dfifferent_var_clusters_with_noise(sample_size = 260, num_noise_dims = 2, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_four_clusters_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","title":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","text":"function generates data one set doublets (pairs clusters) containing four clusters, along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_four_clusters_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","text":"","code":"one_doublet_four_clusters_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_four_clusters_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_four_clusters_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_four_clusters_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Four Clusters and Noise — one_doublet_four_clusters_with_noise","text":"","code":"# Generate doublets with four clusters and noise with custom parameters data <- one_doublet_four_clusters_with_noise(sample_size = 440, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Noise — one_doublet_with_noise","title":"Generate Doublets with Noise — one_doublet_with_noise","text":"function generates data one set doublets (pairs clusters) along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Noise — one_doublet_with_noise","text":"","code":"one_doublet_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Noise — one_doublet_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Noise — one_doublet_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublet_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Noise — one_doublet_with_noise","text":"","code":"# Generate doublets with noise with custom parameters data <- one_doublet_with_noise(sample_size = 220, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublets_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","title":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","text":"function generates data doublets (pairs clusters) along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublets_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","text":"","code":"one_doublets_with_bkg_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublets_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublets_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_doublets_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Background Noise — one_doublets_with_bkg_noise","text":"","code":"# Generate doublets with background noise with custom parameters data <- one_doublets_with_bkg_noise(sample_size = 250, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate One Grid with Different Offset — one_grid_diff","title":"Generate One Grid with Different Offset — one_grid_diff","text":"function generates single grid dataset different offset.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate One Grid with Different Offset — one_grid_diff","text":"","code":"one_grid_diff(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate One Grid with Different Offset — one_grid_diff","text":"sample_size total number samples dataset. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate One Grid with Different Offset — one_grid_diff","text":"list containing grid dataset different offsets sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate One Grid with Different Offset — one_grid_diff","text":"","code":"one_grid_diff <- one_grid_diff(sample_size = 200, num_noise_dims = 2, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","title":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","text":"function generates grid dataset different values background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","text":"","code":"one_grid_diff_with_bkg_noise(   sample_size = 260,   num_noise_dims = 5,   min_noise = -0.05,   max_noise = 0.05 )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","text":"sample_size total number samples, including background noise. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","text":"list containing grid dataset different values background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/one_grid_diff_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate One Grid with Different Values and Background Noise — one_grid_diff_with_bkg_noise","text":"","code":"one_grid_diff_with_bkg_noise <- one_grid_diff_with_bkg_noise(sample_size = 260, num_noise_dims = 5, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a plane in 2D space — plane","title":"Generate points on a plane in 2D space — plane","text":"function generates points plane 3D space based provided coefficients, intercepts, ranges parameters.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a plane in 2D space — plane","text":"","code":"plane(   sample_size,   coefficient_x_1,   coefficient_x_2,   coefficient_y_1,   coefficient_y_2,   intercept_x,   intercept_y,   u_min,   u_max,   v_min,   v_max,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a plane in 2D space — plane","text":"sample_size number points generate. coefficient_x_1 coefficient first parameter x-dimension equation. coefficient_x_2 coefficient second parameter x-dimension equation. coefficient_y_1 coefficient first parameter y-dimension equation. coefficient_y_2 coefficient second parameter y-dimension equation. intercept_x intercept x-dimension equation. intercept_y intercept y-dimension equation. u_min minimum value first parameter (u) range. u_max maximum value first parameter (u) range. v_min minimum value second parameter (v) range. v_max maximum value second parameter (v) range. num_noise_dims number noise dimensions add generated points. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a plane in 2D space — plane","text":"matrix containing generated points plane.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a plane in 2D space — plane","text":"","code":"plane_points <- plane(sample_size = 100, coefficient_x_1 = 1, coefficient_x_2 = 1,                      coefficient_y_1 = -1, coefficient_y_2 = 1, intercept_x = -10,                      intercept_y = 8, u_min = 10, u_max = 30, v_min = 10, v_max = 20,                      num_noise_dims = 2, min_noise = 0, max_noise = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane_2d_with_hole.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","title":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","text":"function generates dataset representing 2D plane hole middle, added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane_2d_with_hole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","text":"","code":"plane_2d_with_hole(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane_2d_with_hole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane_2d_with_hole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","text":"list containing 2D plane data hole sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/plane_2d_with_hole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 2D Plane with Hole and Noise — plane_2d_with_hole","text":"","code":"plane_data <- plane_2d_with_hole(sample_size = 100, num_noise_dims = 2, min_noise = 0, max_noise = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_3d_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","title":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","text":"function generates points Roman surface 3D space.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_3d_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","text":"","code":"roman_surface_3d_row(a = 1)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_3d_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","text":"Maximum radius object.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_3d_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","text":"matrix containing generated points Roman surface 3D space.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_3d_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate points on a Roman surface in 3D space. — roman_surface_3d_row","text":"","code":"roman_surface_3d_row(a = 1) #>              x          y           z #> [1,] 0.1195125 -0.3573088 -0.05152963"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","title":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","text":"function generates data points Roman surface optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","text":"","code":"roman_surface_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","text":"sample_size Total number data points generate. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/roman_surface_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data points on a Roman surface with optional noise. — roman_surface_with_noise","text":"","code":"roman_surface_with_noise(sample_size = 100, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05) #>                 [,1]          [,2]         [,3]         [,4]          [,5] #>   [1,]  0.0112670943 -0.2503800176 -0.041884248 -0.028826040 -0.0345702759 #>   [2,]  0.1108014887 -0.4008082626 -0.057109968  0.016171250 -0.0146347397 #>   [3,]  0.0589282897  0.3319419974  0.022503174  0.017817638 -0.0214843362 #>   [4,]  0.0323392274 -0.1271059920 -0.234774920 -0.025239864  0.0317104267 #>   [5,] -0.3055865962  0.3786581352 -0.188137880 -0.011190268  0.0109884521 #>   [6,]  0.4699051226  0.0785391688  0.105968164 -0.022084021 -0.0259994029 #>   [7,]  0.0055780947 -0.0607952898 -0.090645729  0.041057258  0.0165233966 #>   [8,]  0.0359103273  0.2075145765  0.160202702  0.013413203  0.0108954034 #>   [9,] -0.4764421255 -0.1364251911  0.149858159 -0.018007969  0.0478668613 #>  [10,] -0.0064733396 -0.0134065602  0.391472591 -0.010978389 -0.0380863543 #>  [11,]  0.0025359855  0.0229956745  0.108897519  0.033291107  0.0405433818 #>  [12,]  0.0704911133 -0.3683281197 -0.153364051 -0.027623199  0.0394046014 #>  [13,] -0.1279786415  0.0243510326 -0.180454964  0.035262649  0.0223742301 #>  [14,] -0.0693017199 -0.1535147467  0.364050463 -0.013798027 -0.0220673154 #>  [15,]  0.0130881508  0.1267277994  0.100501235  0.028633110  0.0282689727 #>  [16,]  0.0814437954  0.0979916900  0.483452057 -0.008688408  0.0317223734 #>  [17,]  0.3812981685 -0.2160149613 -0.111196386 -0.032311760 -0.0287424986 #>  [18,] -0.1055251584  0.0447938902 -0.354885444 -0.040291956 -0.0388093836 #>  [19,]  0.0031562104 -0.4879247236 -0.003940380 -0.028189330  0.0364848986 #>  [20,] -0.0251845406 -0.0048057385  0.183995681 -0.033411203  0.0006753244 #>  [21,]  0.2315712000  0.1624175692  0.428886244  0.031517941 -0.0413087434 #>  [22,] -0.0022775627  0.0326284566 -0.069390101 -0.049973621  0.0024714026 #>  [23,] -0.2661463477 -0.2356997757  0.422669334  0.015083747 -0.0081236064 #>  [24,]  0.1671723211 -0.2899737101 -0.377069696 -0.045228714  0.0016612251 #>  [25,] -0.1042755545  0.1884515199 -0.402967533 -0.019581464 -0.0371618611 #>  [26,] -0.1721982115  0.3740145970 -0.297695861  0.040761493  0.0012303544 #>  [27,]  0.2790894902 -0.3933328105 -0.173721415  0.006128581 -0.0217470058 #>  [28,]  0.0636352532  0.4438907265  0.101302038 -0.031985841 -0.0390290844 #>  [29,]  0.1834862377  0.2520447357  0.423910234  0.041463608  0.0483815329 #>  [30,]  0.1928249950 -0.2083094431 -0.454450402 -0.003826172 -0.0275830796 #>  [31,]  0.0207242669 -0.0376099804 -0.421907184  0.001632080  0.0416619187 #>  [32,] -0.0036433631 -0.4204553030  0.006676639 -0.014273140  0.0255655205 #>  [33,] -0.2837035628  0.3432028613 -0.357220614  0.020633360  0.0490143400 #>  [34,]  0.4295463756 -0.2144076077 -0.255622918  0.006074703  0.0067901140 #>  [35,]  0.2322457403  0.0785443299  0.283989995 -0.018044647  0.0263335739 #>  [36,]  0.0276007687 -0.1420577846 -0.183218236  0.029210575 -0.0454915548 #>  [37,] -0.0073437217 -0.2205604687  0.031551473 -0.034232671 -0.0082151871 #>  [38,] -0.1322922599  0.3023308089 -0.321578495  0.049241700  0.0005874417 #>  [39,]  0.1392679773  0.1319372307  0.480164140 -0.029746261 -0.0460463832 #>  [40,]  0.3755396907 -0.0872230201 -0.180347137  0.015489113 -0.0046162232 #>  [41,] -0.2177853696  0.2570944087 -0.428793849 -0.028378752 -0.0433190885 #>  [42,] -0.2395392805 -0.3187300250  0.095231267 -0.046597696 -0.0021035687 #>  [43,]  0.4977110039  0.0356343528  0.033347480 -0.030152144  0.0068760196 #>  [44,] -0.1406521885  0.2725950177 -0.364642815  0.049735682 -0.0087564819 #>  [45,] -0.0095667870  0.0523915103 -0.176207098  0.016951006  0.0019797613 #>  [46,] -0.0028097455  0.1073286065 -0.025855852 -0.039642237  0.0002425236 #>  [47,]  0.4114335089 -0.2793673515 -0.256412377 -0.040791548 -0.0134390029 #>  [48,] -0.0888570768  0.2977439742 -0.244359764  0.018332420 -0.0125788491 #>  [49,] -0.1123627790  0.1168287798 -0.486128919  0.010323881  0.0128764333 #>  [50,]  0.0798432457 -0.1365086091 -0.424618811 -0.042231025  0.0396782458 #>  [51,] -0.0443062249  0.2517195697 -0.158729407 -0.022218062 -0.0189339438 #>  [52,]  0.1312589662  0.4271039356  0.203411803 -0.033376797 -0.0486160808 #>  [53,] -0.2488679624  0.4295950954 -0.191164705  0.020976390  0.0214220177 #>  [54,] -0.0843231591 -0.4927856349  0.084321685 -0.022064497 -0.0403084384 #>  [55,] -0.0148359895 -0.0865155378  0.165291244 -0.033196967  0.0117365611 #>  [56,] -0.1225556905 -0.3266031689  0.282287382  0.033908374 -0.0390883403 #>  [57,]  0.0120188914 -0.1706100302 -0.067984374  0.025083315 -0.0032461168 #>  [58,] -0.3591593966  0.2036739604 -0.093544553  0.006302504 -0.0415146510 #>  [59,]  0.0114469283  0.4027442486  0.022608310 -0.031491108  0.0406259893 #>  [60,] -0.0788754270 -0.3376234825  0.190572979 -0.002384016 -0.0442244321 #>  [61,]  0.0026709605 -0.0195669573 -0.133954359 -0.036071204  0.0400306634 #>  [62,] -0.2781223841  0.1397506152 -0.357577690 -0.046343946 -0.0150248472 #>  [63,]  0.1393576783  0.4799274597  0.138122858  0.010938109  0.0317940413 #>  [64,]  0.2925470598  0.0006843498  0.002118166 -0.045328125 -0.0134852554 #>  [65,]  0.0835645952 -0.1553830715 -0.403731439  0.039920105 -0.0084975499 #>  [66,]  0.2453329144  0.4101214568  0.155509467 -0.011522938  0.0216591329 #>  [67,] -0.0284934187 -0.2658497510  0.097750161  0.012642769 -0.0358550353 #>  [68,] -0.0002213637 -0.0254320741  0.008697822  0.019208418  0.0251137473 #>  [69,] -0.3943884794  0.2972128219 -0.277927440 -0.003169749 -0.0229185686 #>  [70,] -0.0837156879 -0.2964593544  0.233764094  0.025893283 -0.0491505664 #>  [71,]  0.0191467862 -0.2868699017 -0.060405756 -0.005935082 -0.0370880269 #>  [72,]  0.4660541172 -0.1631247183 -0.180426547 -0.049759064 -0.0252517673 #>  [73,] -0.0164908718  0.0024705832 -0.146485716  0.030303869  0.0174546445 #>  [74,] -0.0423481944  0.0110811024 -0.244428266  0.035277172  0.0147487219 #>  [75,]  0.0003690768 -0.0182590602 -0.020198353  0.019641091 -0.0191235702 #>  [76,] -0.1144262975  0.2843986199 -0.309926737  0.045531239 -0.0413123664 #>  [77,]  0.4569945986 -0.1884712606 -0.202689901  0.036039175 -0.0457727534 #>  [78,] -0.2012532238  0.2640834336 -0.421275017 -0.016480170  0.0202990745 #>  [79,] -0.0005941679 -0.0501548654  0.011815127  0.008040294 -0.0286905462 #>  [80,] -0.0626966802  0.2228870984 -0.245851389  0.033701098  0.0315420593 #>  [81,] -0.0354635860  0.0477350090 -0.477009378 -0.014886814 -0.0421814614 #>  [82,] -0.0079743468  0.1583166437 -0.048946239 -0.047041044 -0.0027744681 #>  [83,] -0.0006307676  0.0198883151 -0.031671068 -0.030336055 -0.0091505090 #>  [84,] -0.0075529185  0.3946345949 -0.015438207 -0.047022241 -0.0029401336 #>  [85,]  0.3136671129  0.3841149065  0.276204506  0.049719100  0.0116912649 #>  [86,] -0.4880458605 -0.0227564853  0.018318905  0.031049244  0.0449625654 #>  [87,]  0.0002944860 -0.0008160929 -0.319275021 -0.043092542 -0.0179133869 #>  [88,] -0.3754063473  0.0872911386 -0.180561643 -0.020199814 -0.0074676022 #>  [89,]  0.0818004783  0.4734963779  0.107065628  0.002056769  0.0116233622 #>  [90,] -0.0188432846  0.4328658738 -0.032567020 -0.009655667 -0.0245214925 #>  [91,] -0.3159436055 -0.2364747852  0.387146111 -0.018393898 -0.0205318506 #>  [92,] -0.0703562437  0.1563767136 -0.362827412 -0.005643091 -0.0222357355 #>  [93,]  0.0887844964  0.2982483803  0.243746610 -0.019719863 -0.0186048803 #>  [94,] -0.3132903828 -0.0072988532  0.020714359 -0.028720872  0.0437605470 #>  [95,]  0.4518111231  0.0410848304  0.026137585 -0.042246420  0.0092998645 #>  [96,]  0.0441110303 -0.1034653864 -0.356139731 -0.018174541 -0.0466514921 #>  [97,]  0.2198372972 -0.4163004437 -0.136917328  0.031198340 -0.0205889446 #>  [98,] -0.0738374989 -0.4157049108  0.039975349  0.030910518  0.0497711945 #>  [99,] -0.0837798696  0.2380279994 -0.021404935  0.008089608 -0.0161344004 #> [100,]  0.0025352580  0.4847840691  0.003254773  0.033149441 -0.0404089978 #>                 [,6]          [,7]          [,8]         [,9]         [,10] #>   [1,]  0.0086717994 -0.0180867594  1.007316e-02 -0.007879345  0.0466847681 #>   [2,] -0.0096600732 -0.0440294546  7.602486e-03 -0.021776608 -0.0189186354 #>   [3,]  0.0154986767  0.0203350304  4.836226e-02 -0.006253471 -0.0457536923 #>   [4,] -0.0276037465 -0.0048207698  7.485907e-03  0.027014294  0.0322595718 #>   [5,] -0.0124045740 -0.0478485932  4.361382e-02  0.037316216 -0.0374140178 #>   [6,] -0.0077476360  0.0200410618  2.447306e-02 -0.048453007  0.0140886150 #>   [7,]  0.0274174136 -0.0322228189 -3.043182e-02  0.010991402 -0.0159181720 #>   [8,]  0.0040270238 -0.0440464906 -4.280913e-02  0.022521642  0.0404572810 #>   [9,]  0.0105518984  0.0220143986  2.858468e-02 -0.048279414 -0.0294070049 #>  [10,]  0.0217045739 -0.0409585367 -1.233272e-02 -0.008354228 -0.0187916041 #>  [11,]  0.0148561134 -0.0096781398  3.739452e-02 -0.046620980  0.0420218433 #>  [12,] -0.0179137947 -0.0165694851 -1.412247e-02 -0.023341010  0.0113759214 #>  [13,]  0.0185965254  0.0102269463 -4.883551e-02 -0.038795065  0.0194914091 #>  [14,] -0.0237088536  0.0253074061  2.567480e-02 -0.042263743  0.0376473900 #>  [15,]  0.0073001024  0.0440773290  1.311810e-02 -0.027341352 -0.0453477377 #>  [16,] -0.0083404441 -0.0204635165 -4.601929e-03  0.048407354  0.0107788051 #>  [17,] -0.0109154138 -0.0411655299 -1.019276e-02  0.011000763  0.0286695989 #>  [18,]  0.0081855058  0.0121023259  2.616188e-02  0.014096746  0.0099088734 #>  [19,] -0.0273360620 -0.0001927412  2.081466e-02 -0.036756135 -0.0356704202 #>  [20,]  0.0311880877 -0.0464467233  2.124058e-02 -0.045037186  0.0332562773 #>  [21,]  0.0241170527  0.0241207640  3.856885e-02 -0.021212743  0.0325258526 #>  [22,]  0.0206282760  0.0126271059 -1.545231e-02  0.036652267 -0.0199665500 #>  [23,] -0.0436452698 -0.0085726117  1.281148e-02  0.010178040  0.0095872082 #>  [24,]  0.0120903074 -0.0464269341  2.656583e-02  0.001869091  0.0151614635 #>  [25,] -0.0391244607  0.0003895283  1.365955e-02 -0.044560653  0.0297297847 #>  [26,]  0.0077296100 -0.0263277642 -1.187419e-02  0.028149508  0.0017148448 #>  [27,]  0.0214351638  0.0276430749 -3.874524e-02  0.011869375 -0.0019121046 #>  [28,]  0.0295738984 -0.0214901014 -4.272807e-02  0.022116184 -0.0104666633 #>  [29,] -0.0246277100  0.0288995129  3.452309e-02  0.040551778 -0.0134267062 #>  [30,]  0.0129884623  0.0048681622 -4.785787e-02  0.005744344  0.0499538681 #>  [31,] -0.0136698482  0.0197152982 -4.965464e-02  0.026740877 -0.0070373449 #>  [32,] -0.0237356144 -0.0405895164  4.777698e-02  0.041552737  0.0197527064 #>  [33,] -0.0460449710 -0.0366849301 -2.605731e-02 -0.039061269  0.0446013640 #>  [34,]  0.0399247497  0.0165566009  1.061932e-02  0.013193320 -0.0074176979 #>  [35,] -0.0095360322  0.0348286097  3.683637e-02  0.016769596 -0.0240388274 #>  [36,]  0.0237809121  0.0391348526  2.770514e-02 -0.042498769  0.0017490658 #>  [37,] -0.0265897569 -0.0047738070 -3.071743e-03  0.046796027  0.0117035700 #>  [38,]  0.0446329717  0.0434700022  4.924003e-02 -0.016242414  0.0412391958 #>  [39,]  0.0465796639 -0.0444036051 -3.989924e-03  0.032348741  0.0466216319 #>  [40,]  0.0088932418 -0.0116262897  2.035457e-02  0.012686717 -0.0364769112 #>  [41,]  0.0359691297  0.0116728980 -4.327191e-02 -0.008435643 -0.0393408199 #>  [42,]  0.0377992609 -0.0117148395 -2.564482e-04 -0.038320840 -0.0419950508 #>  [43,]  0.0226479868  0.0420067900  2.526306e-06 -0.040998043  0.0076525709 #>  [44,]  0.0471406835 -0.0134444994 -3.743916e-02 -0.043079134  0.0101918599 #>  [45,]  0.0356043358 -0.0127557569 -4.055558e-02  0.015361770 -0.0145364964 #>  [46,] -0.0083269444 -0.0438728270 -2.114311e-02  0.009495271 -0.0324155938 #>  [47,]  0.0420652370  0.0106518093  2.616079e-02 -0.046453813 -0.0086261299 #>  [48,] -0.0463698385 -0.0271777286  6.630231e-03 -0.032597850  0.0044844524 #>  [49,]  0.0249782663  0.0213805594  2.412111e-02  0.038254977 -0.0378923130 #>  [50,] -0.0184477598  0.0409851438  2.192715e-02 -0.007064762  0.0401962903 #>  [51,]  0.0127361750 -0.0214932914  3.486875e-02  0.038515907 -0.0278019578 #>  [52,] -0.0189811438 -0.0446535315  4.521091e-02 -0.001066247 -0.0411472857 #>  [53,]  0.0111943397 -0.0018806768 -4.629014e-02  0.040240459  0.0184574851 #>  [54,] -0.0089402044  0.0344108854 -2.050238e-02  0.002709195 -0.0482999544 #>  [55,]  0.0219312144 -0.0429982035 -1.649687e-02  0.014555320 -0.0147495893 #>  [56,]  0.0065006412  0.0259807939  2.612444e-03 -0.024008043 -0.0237072109 #>  [57,]  0.0359971470 -0.0468872605  8.905704e-03  0.041804165 -0.0447006607 #>  [58,] -0.0322065346 -0.0445443711  4.107293e-02  0.046631034  0.0053583174 #>  [59,] -0.0106821229  0.0255828719 -1.085374e-02  0.025850175  0.0149870262 #>  [60,]  0.0491066004 -0.0274983546  4.624655e-02 -0.018441679 -0.0194252739 #>  [61,]  0.0022285686 -0.0451228415  9.179250e-03  0.038848126 -0.0329721940 #>  [62,] -0.0208186478  0.0255118455 -1.937183e-02  0.006612506  0.0011094775 #>  [63,]  0.0410319719 -0.0383269426  2.872208e-02 -0.026721130 -0.0472631751 #>  [64,] -0.0391432331  0.0480801035 -3.429668e-03  0.015768161  0.0034039608 #>  [65,] -0.0124481008  0.0072103263  4.639444e-02  0.048813371  0.0057868574 #>  [66,] -0.0223432432  0.0464571290  3.079388e-02  0.023098534  0.0026351465 #>  [67,] -0.0308542207  0.0055095966 -2.392111e-02  0.025698603 -0.0345325483 #>  [68,] -0.0064586700 -0.0084661917 -1.858524e-02 -0.032563970 -0.0106092751 #>  [69,]  0.0139473788  0.0383355768  4.453178e-02  0.039355427 -0.0074511725 #>  [70,] -0.0349745444 -0.0472831185 -4.373840e-02 -0.020161546  0.0379824675 #>  [71,] -0.0080926448 -0.0272920318  2.741082e-02  0.037732959  0.0010086544 #>  [72,] -0.0453974129  0.0276836755  3.680147e-02  0.032860585  0.0195156724 #>  [73,]  0.0319150536  0.0475209947  3.016436e-02 -0.018351691  0.0357966234 #>  [74,] -0.0368271134 -0.0330939712  1.546929e-03  0.009926033  0.0410892200 #>  [75,] -0.0008664426  0.0260262657  4.702930e-03  0.024556085  0.0212416339 #>  [76,]  0.0345087101 -0.0276171440 -1.051104e-02 -0.017629060 -0.0214431878 #>  [77,]  0.0167151886  0.0362959911  3.349667e-02 -0.024353430 -0.0275968639 #>  [78,] -0.0385699542  0.0404319805 -6.473463e-03 -0.036661414  0.0038865911 #>  [79,] -0.0311343115 -0.0098752119 -1.159156e-03 -0.049251285  0.0395272136 #>  [80,] -0.0483070843 -0.0124441562  6.946413e-03 -0.025133566 -0.0367604721 #>  [81,]  0.0093214929 -0.0146904925  4.047586e-02 -0.036483532 -0.0462253720 #>  [82,] -0.0265211389  0.0376282437  1.205973e-02  0.047112598  0.0066573617 #>  [83,] -0.0494939435 -0.0009647355  3.659714e-02 -0.024932071  0.0456295161 #>  [84,] -0.0254374065  0.0133930647 -4.275474e-03 -0.026466577  0.0465525918 #>  [85,] -0.0055351067 -0.0076462828 -1.760346e-02  0.003599008  0.0034458604 #>  [86,] -0.0319345207 -0.0408399834  3.418689e-02  0.044070127 -0.0354715583 #>  [87,] -0.0214401117  0.0438319675 -4.388362e-04  0.024408111 -0.0007203238 #>  [88,] -0.0175544841 -0.0272564620 -4.094549e-03 -0.048926892 -0.0313109347 #>  [89,] -0.0460089596  0.0341886993 -5.761860e-03  0.011787652  0.0208889419 #>  [90,]  0.0035911330 -0.0177121108  4.924419e-02  0.003125632  0.0186344353 #>  [91,]  0.0441038593 -0.0262666935 -1.250563e-02  0.013318046  0.0304781804 #>  [92,]  0.0111912511 -0.0298964594 -7.915830e-03 -0.034620880  0.0100462520 #>  [93,] -0.0473354339  0.0210790344  4.048820e-02  0.016842412  0.0230813032 #>  [94,]  0.0366435696 -0.0080923515 -1.964941e-02 -0.015598666 -0.0270949428 #>  [95,]  0.0456695389  0.0010575586  1.100112e-02 -0.043950538  0.0246321565 #>  [96,] -0.0481847727  0.0217221439  4.155372e-02 -0.001885981 -0.0399403666 #>  [97,]  0.0058095998 -0.0316973461  3.507448e-02 -0.014619852  0.0316685400 #>  [98,]  0.0012660705  0.0115414259 -5.790612e-03 -0.010586411 -0.0297381790 #>  [99,] -0.0077317495 -0.0151142128 -1.495180e-02 -0.043114460  0.0087783528 #> [100,] -0.0158986821  0.0190606681 -3.424923e-02 -0.048378203  0.0090645304 #>                [,11] #>   [1,] -0.0385476567 #>   [2,] -0.0406498368 #>   [3,] -0.0200607848 #>   [4,]  0.0172267342 #>   [5,]  0.0330983246 #>   [6,] -0.0215472674 #>   [7,] -0.0439373853 #>   [8,]  0.0246854331 #>   [9,]  0.0180129585 #>  [10,] -0.0411398747 #>  [11,] -0.0280898720 #>  [12,] -0.0164136645 #>  [13,] -0.0047535486 #>  [14,]  0.0331181310 #>  [15,] -0.0273228670 #>  [16,] -0.0400744475 #>  [17,] -0.0249269130 #>  [18,]  0.0125764568 #>  [19,] -0.0072356102 #>  [20,] -0.0056882872 #>  [21,] -0.0165847495 #>  [22,] -0.0368099707 #>  [23,]  0.0303939795 #>  [24,] -0.0216553068 #>  [25,] -0.0175301095 #>  [26,] -0.0387954956 #>  [27,] -0.0406635953 #>  [28,]  0.0119414818 #>  [29,] -0.0159614631 #>  [30,] -0.0395850434 #>  [31,] -0.0004252076 #>  [32,] -0.0073889060 #>  [33,]  0.0129034097 #>  [34,]  0.0397990522 #>  [35,]  0.0347135378 #>  [36,]  0.0345581067 #>  [37,]  0.0442037697 #>  [38,]  0.0215627823 #>  [39,]  0.0458120537 #>  [40,]  0.0331213964 #>  [41,] -0.0384675396 #>  [42,] -0.0068945265 #>  [43,] -0.0435688308 #>  [44,] -0.0345581794 #>  [45,]  0.0318632875 #>  [46,] -0.0427309742 #>  [47,] -0.0335404708 #>  [48,] -0.0267851235 #>  [49,] -0.0270596502 #>  [50,]  0.0450807667 #>  [51,] -0.0213964997 #>  [52,]  0.0314357933 #>  [53,]  0.0392193651 #>  [54,] -0.0455143865 #>  [55,] -0.0384210555 #>  [56,]  0.0376279234 #>  [57,] -0.0035268292 #>  [58,]  0.0186325667 #>  [59,] -0.0298709111 #>  [60,]  0.0119173280 #>  [61,]  0.0199845805 #>  [62,]  0.0351337904 #>  [63,] -0.0207638512 #>  [64,]  0.0310470119 #>  [65,] -0.0316704961 #>  [66,] -0.0403732269 #>  [67,] -0.0054029447 #>  [68,] -0.0054374511 #>  [69,]  0.0353352583 #>  [70,]  0.0238171520 #>  [71,]  0.0423776192 #>  [72,] -0.0003772799 #>  [73,]  0.0415619799 #>  [74,]  0.0362006874 #>  [75,] -0.0199759330 #>  [76,]  0.0405837991 #>  [77,] -0.0158166261 #>  [78,]  0.0377023071 #>  [79,]  0.0088444529 #>  [80,]  0.0121073170 #>  [81,]  0.0169951685 #>  [82,]  0.0318651332 #>  [83,] -0.0080241325 #>  [84,]  0.0297827245 #>  [85,]  0.0362757991 #>  [86,] -0.0405948739 #>  [87,]  0.0094786922 #>  [88,] -0.0286599018 #>  [89,] -0.0149476970 #>  [90,]  0.0119228740 #>  [91,] -0.0102677293 #>  [92,]  0.0176897420 #>  [93,] -0.0289334347 #>  [94,] -0.0446933800 #>  [95,] -0.0077594112 #>  [96,] -0.0288171692 #>  [97,] -0.0480092557 #>  [98,] -0.0388135414 #>  [99,]  0.0447368561 #> [100,] -0.0311190218"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate S-curve Data — s_curve","title":"Generate S-curve Data — s_curve","text":"function generates S-curve data, commonly used dataset testing visualizing dimensionality reduction algorithms.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate S-curve Data — s_curve","text":"","code":"s_curve(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate S-curve Data — s_curve","text":"sample_size number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate S-curve Data — s_curve","text":"matrix containing generated S-curve data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate S-curve Data — s_curve","text":"","code":"s_curve_data <- s_curve(sample_size = 100, num_noise_dims = 3, min_noise = -0.5, max_noise = 0.5)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve_hole.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate S-curve Data with a Hole — s_curve_hole","title":"Generate S-curve Data with a Hole — s_curve_hole","text":"function generates S-curve data hole filtering samples close specified anchor point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve_hole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate S-curve Data with a Hole — s_curve_hole","text":"","code":"s_curve_hole(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve_hole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate S-curve Data with a Hole — s_curve_hole","text":"sample_size number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve_hole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate S-curve Data with a Hole — s_curve_hole","text":"matrix containing generated S-curve data hole.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/s_curve_hole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate S-curve Data with a Hole — s_curve_hole","text":"","code":"s_curve_hole_data <- s_curve_hole(sample_size = 100, num_noise_dims = 3, min_noise = -0.5, max_noise = 0.5)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/seven_branching_data_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","title":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","text":"function generates dataset representing seven branches added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/seven_branching_data_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","text":"","code":"seven_branching_data_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/seven_branching_data_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/seven_branching_data_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","text":"matrix containing seven-branching data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/seven_branching_data_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Seven-Branching Data with Noise — seven_branching_data_with_noise","text":"","code":"seven_branching_data <- seven_branching_data_with_noise(sample_size = 210, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sine_curve_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Sine Curve Data with Noise — sine_curve_with_noise","title":"Generate Sine Curve Data with Noise — sine_curve_with_noise","text":"function generates dataset representing sine curve added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sine_curve_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Sine Curve Data with Noise — sine_curve_with_noise","text":"","code":"sine_curve_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sine_curve_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Sine Curve Data with Noise — sine_curve_with_noise","text":"sample_size number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sine_curve_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Sine Curve Data with Noise — sine_curve_with_noise","text":"matrix containing sine curve data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sine_curve_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Sine Curve Data with Noise — sine_curve_with_noise","text":"","code":"sine_curve_with_noise <- sine_curve_with_noise(sample_size = 100, num_noise_dims = 8,                                                min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/small_big_sphere_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","title":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","text":"function generates data points representing small spheres within larger encompassing sphere adds noise data specified.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/small_big_sphere_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","text":"","code":"small_big_sphere_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/small_big_sphere_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","text":"sample_size Total number data points generate, multiple 13. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/small_big_sphere_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/small_big_sphere_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data representing small spheres within a larger encompassing sphere with added noise. — small_big_sphere_with_noise","text":"","code":"small_big_sphere_with_noise(sample_size = 390, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #>                 [,1]        [,2]         [,3]         [,4]          [,5] #>   [1,] -2.789258e+00   7.9559840   1.75863393  -5.29338200 -0.0027409989 #>   [2,] -3.755919e+00   5.3105791   2.21345275  -5.20496143 -0.0009818338 #>   [3,] -4.045390e+00   4.2776694   0.82205983  -8.06796440  0.0143159085 #>   [4,] -4.088544e+00   6.5594368   1.24894101  -9.15023511 -0.0288522211 #>   [5,]  4.138040e-01   7.5583489   2.24224535  -8.35518223 -0.0411806517 #>   [6,] -3.466967e+00   5.3952107   2.65744748  -5.11100567  0.0331097727 #>   [7,] -2.706765e+00   6.2834357   1.04501125 -10.10636552  0.0034899638 #>   [8,] -1.405975e+00   3.5601653   3.10018661  -6.41733859 -0.0370544043 #>   [9,] -4.243428e+00   4.6359328   1.38296006  -6.17552934  0.0292880963 #>  [10,] -2.342293e+00   5.1094422   2.78702478  -4.74552621  0.0290518005 #>  [11,] -2.465405e-01   8.3748631   0.90864218  -7.81009039  0.0173076425 #>  [12,] -1.882541e-01   4.2604204   0.45223411  -5.86906006  0.0081820370 #>  [13,] -3.567060e+00   4.7695401   1.06429535  -5.26196861 -0.0022542704 #>  [14,] -3.501971e+00   3.7222177   1.39138868  -8.35197466 -0.0008428099 #>  [15,] -1.412790e+00   7.6555660  -0.82401487  -7.04437187 -0.0061960225 #>  [16,] -8.624990e-01   5.5829691   0.60645710  -4.68112065  0.0425813718 #>  [17,] -3.664612e+00   3.6067353   1.53549772  -7.42581202 -0.0188001706 #>  [18,]  7.450763e-01   4.6276501   1.93218528  -6.59071185 -0.0420870892 #>  [19,]  7.589631e-01   6.5738827   0.27009993  -7.75843045  0.0136882657 #>  [20,]  2.006301e-01   5.7131491  -0.58182921  -7.56103496 -0.0165171196 #>  [21,]  8.303503e-01   5.1226969   1.50367802  -8.43475734 -0.0136907826 #>  [22,] -2.647485e+00   5.1791799   0.48933943  -4.77663067  0.0088853210 #>  [23,] -2.319913e+00   3.3293443   1.74027233  -5.98444666  0.0393947933 #>  [24,] -4.555704e-01   4.7420308  -0.16964697  -8.88845490 -0.0123166470 #>  [25,] -2.214787e+00   8.8609489   0.92017022  -7.35533175 -0.0192548504 #>  [26,] -2.155464e+00   5.7741390  -1.32869472  -7.78882364 -0.0472971624 #>  [27,] -1.311183e+00   8.2853253   1.33418598  -5.49838923 -0.0275381119 #>  [28,] -3.527637e+00   3.7839462   0.47566764  -7.14721598 -0.0014641122 #>  [29,] -3.872663e+00   7.0964612   2.99124275  -6.05106429  0.0440712923 #>  [30,] -1.666217e+00   4.7322316   4.33705386  -7.27668604  0.0431698710 #>  [31,]  2.671725e+00   1.1566627  -0.30995618   8.05147814 -0.0401073257 #>  [32,]  1.705064e+00  -1.4887422   0.14486264   8.13989871  0.0295935417 #>  [33,]  1.415593e+00  -2.5216519  -1.24653028   5.27689573 -0.0035549731 #>  [34,]  1.372439e+00  -0.2398845  -0.81964910   4.19462503  0.0470787340 #>  [35,]  5.874787e+00   0.7590276   0.17365524   4.98967791 -0.0039680616 #>  [36,]  1.994015e+00  -1.4041106   0.58885737   8.23385447 -0.0117731159 #>  [37,]  2.754218e+00  -0.5158856  -1.02357886   3.23849461  0.0396301861 #>  [38,]  4.055008e+00  -3.2391560   1.03159650   6.92752155 -0.0148805361 #>  [39,]  1.217555e+00  -2.1633885  -0.68563005   7.16933080 -0.0033798450 #>  [40,]  3.118689e+00  -1.6898791   0.71843467   8.59933392  0.0499992079 #>  [41,]  5.214442e+00   1.5755418  -1.15994792   5.53476975 -0.0432841314 #>  [42,]  5.272729e+00  -2.5389009  -1.61635600   7.47580008 -0.0166666994 #>  [43,]  1.893922e+00  -2.0297812  -1.00429476   8.08289153 -0.0002536011 #>  [44,]  1.959011e+00  -3.0771036  -0.67720143   4.99288547 -0.0034222506 #>  [45,]  4.048193e+00   0.8562447  -2.89260497   6.30048827 -0.0220524735 #>  [46,]  4.598484e+00  -1.2163522  -1.46213301   8.66373949  0.0193484914 #>  [47,]  1.796370e+00  -3.1925860  -0.53309239   5.91904811  0.0249574766 #>  [48,]  6.206059e+00  -2.1716712  -0.13640483   6.75414828  0.0233004792 #>  [49,]  6.219946e+00  -0.2254386  -1.79849017   5.58642969 -0.0492604014 #>  [50,]  5.661613e+00  -1.0861722  -2.65041932   5.78382518  0.0287831886 #>  [51,]  6.291333e+00  -1.6766244  -0.56491209   4.91010279  0.0351324049 #>  [52,]  2.813498e+00  -1.6201414  -1.57925068   8.56822947 -0.0323690788 #>  [53,]  3.141070e+00  -3.4699770  -0.32831778   7.36041348  0.0072392003 #>  [54,]  5.005412e+00  -2.0572905  -2.23823708   4.45640524  0.0017862579 #>  [55,]  3.246196e+00   2.0616276  -1.14841989   5.98952838 -0.0118683703 #>  [56,]  3.305519e+00  -1.0251823  -3.39728483   5.55603649  0.0399624557 #>  [57,]  4.149800e+00   1.4860040  -0.73440412   7.84647091 -0.0374529202 #>  [58,]  1.933345e+00  -3.0153751  -1.59292247   6.19764416  0.0172401139 #>  [59,]  1.588320e+00   0.2971399   0.92265265   7.29379585 -0.0067165892 #>  [60,]  3.794766e+00  -2.0670897   2.26846375   6.06817410  0.0051688562 #>  [61,]  6.855684e-01 -11.4697289  -4.83890193  10.44185515  0.0461753666 #>  [62,] -2.810927e-01 -14.1151337  -4.38408312  10.53027572  0.0379448387 #>  [63,] -5.705636e-01 -15.1480434  -5.77547604   7.66727274 -0.0114364368 #>  [64,] -6.137172e-01 -12.8662760  -5.34859485   6.58500204  0.0355006760 #>  [65,]  3.888631e+00 -11.8673639  -4.35529052   7.38005492  0.0267504568 #>  [66,]  7.859131e-03 -14.0305021  -3.94008838  10.62423147 -0.0080116730 #>  [67,]  7.680617e-01 -13.1422772  -5.55252462   5.62887162 -0.0363195139 #>  [68,]  2.068852e+00 -15.8655475  -3.49734926   9.31789855  0.0466556178 #>  [69,] -7.686016e-01 -14.7897800  -5.21457580   9.55970780  0.0345957809 #>  [70,]  1.132533e+00 -14.3162706  -3.81051109  10.98971093  0.0092369739 #>  [71,]  3.228286e+00 -11.0508498  -5.68889368   7.92514676 -0.0356611551 #>  [72,]  3.286572e+00 -15.1652924  -6.14530175   9.86617709 -0.0381525940 #>  [73,] -9.223394e-02 -14.6561728  -5.53324051  10.47326854  0.0055163404 #>  [74,] -2.714484e-02 -15.7034951  -5.20614719   7.38326248 -0.0406530660 #>  [75,]  2.062037e+00 -11.7701468  -7.42155073   8.69086528 -0.0498011990 #>  [76,]  2.612328e+00 -13.8427437  -5.99107877  11.05411649  0.0058121504 #>  [77,] -1.897860e-01 -15.8189775  -5.06203814   8.30942512 -0.0477030213 #>  [78,]  4.219903e+00 -14.7980627  -4.66535058   9.14452529 -0.0489644559 #>  [79,]  4.233790e+00 -12.8518302  -6.32743593   7.97680669  0.0477977195 #>  [80,]  3.675457e+00 -13.7125638  -7.17936508   8.17420219 -0.0341426316 #>  [81,]  4.305177e+00 -14.3030159  -5.09385784   7.30047980 -0.0230897730 #>  [82,]  8.273417e-01 -14.2465329  -6.10819644  10.95860647  0.0435775504 #>  [83,]  1.154913e+00 -16.0963685  -4.85726353   9.75079048  0.0333234228 #>  [84,]  3.019256e+00 -14.6836820  -6.76718283   6.84678225 -0.0286111622 #>  [85,]  1.260040e+00 -10.5647639  -5.67736564   8.37990539  0.0076730531 #>  [86,]  1.319363e+00 -13.6515739  -7.92623058   7.94641350 -0.0306368138 #>  [87,]  2.163644e+00 -11.1403875  -5.26334988  10.23684792 -0.0304929947 #>  [88,] -5.281089e-02 -15.6417666  -6.12186823   8.58802116 -0.0334831300 #>  [89,] -3.978362e-01 -12.3292516  -3.60629311   9.68417286 -0.0436278134 #>  [90,]  1.808610e+00 -14.6934812  -2.26048200   8.45855110  0.0127554375 #>  [91,]  8.970830e+00 -10.4923491  -3.76413837  -4.50178560  0.0438709634 #>  [92,] -1.219548e+00   1.1580734 -14.87490067   0.95336195 -0.0190674186 #>  [93,]  9.291564e+00  -9.4025046   7.08859646   0.10745554  0.0259475975 #>  [94,]  1.002518e+01   5.6855402  -3.55487370   8.91814167 -0.0127910370 #>  [95,]  2.120202e+00   7.5109037   8.07785586   9.94179628  0.0420616323 #>  [96,] -1.342531e-01  12.6406898  -2.36489952  -7.72024536 -0.0290283532 #>  [97,]  6.517274e-01 -11.3948830   8.81356352   4.12952680  0.0381300780 #>  [98,]  9.540911e+00  -6.6291105  -9.24757937   2.12324984  0.0473881890 #>  [99,] -9.600716e+00  -1.1714683  -7.17836906  -8.94007462 -0.0223718336 #> [100,] -1.092833e+01  -3.4135010  -9.58931979   1.40163039  0.0496897068 #> [101,]  1.369448e+01   1.8621162  -4.04525347  -4.19877936  0.0418166999 #> [102,]  8.392240e+00   8.3248200   4.38300798  -8.12754057  0.0025830809 #> [103,]  3.190486e+00   0.4001064 -14.63501785  -0.69062943 -0.0073573437 #> [104,] -1.217542e+01   4.8095795  -5.85252094  -4.40171351  0.0445457743 #> [105,]  2.778291e+00   3.1423888 -13.30943123  -5.50141196  0.0089797237 #> [106,] -5.077444e+00  -3.7502475   2.89967734 -13.29462579 -0.0465552265 #> [107,] -5.174517e+00  -1.7521784 -13.95327385  -0.67852085  0.0082594251 #> [108,]  5.079660e+00  11.8774318   7.50872557  -1.32011863 -0.0114868055 #> [109,]  4.864642e+00   2.8206769 -10.00954995   9.65339064  0.0039424574 #> [110,] -4.677560e+00  11.5999018  -7.74732020  -2.92262535  0.0204892196 #> [111,]  1.213649e+01   1.2237000   6.48215759   5.84720221 -0.0295103819 #> [112,]  7.446904e+00   9.4894180   7.74567447   4.41577825 -0.0299411011 #> [113,] -1.025956e+01   8.4818403   4.54875327  -5.20659857 -0.0271450755 #> [114,] -1.671821e+00   3.5388453  14.01056489  -3.65864162  0.0345005997 #> [115,]  1.857591e+00  14.8723398   0.59680097   0.08180880 -0.0169374186 #> [116,]  8.642611e+00  -9.8246518  -6.87063081  -2.56435498 -0.0150691135 #> [117,] -1.178021e+01   4.6266948  -3.61681742   7.19298426  0.0348874428 #> [118,] -1.362217e+01  -1.1017634  -2.17527122  -5.78712798  0.0225739281 #> [119,] -5.567425e+00   6.3104554  10.58177445  -6.49676699 -0.0121233527 #> [120,]  1.643380e+00  -5.1823583   3.46526942 -13.54379461 -0.0497840195 #> [121,] -3.451204e+00   8.5372253  11.28325042  -3.59071494  0.0017397061 #> [122,] -1.245261e+01   1.1069862  -0.52560310   8.27229748  0.0349155360 #> [123,]  5.553088e+00  -3.0199074  12.12243074  -6.17171363 -0.0079226844 #> [124,]  1.508742e+00  14.1957760  -0.64273017   4.55966434 -0.0216042877 #> [125,] -8.443711e-01  12.9289666   0.11647363  -7.55746606  0.0493799857 #> [126,]  3.040668e+00  -3.8490839  10.03798617  10.00888246 -0.0203905018 #> [127,]  1.295716e+01   1.4283372  -6.42481148  -3.71396977  0.0381571715 #> [128,]  1.369483e+01  -2.3991752   3.47840833  -4.42677436  0.0183561302 #> [129,] -1.189586e+01  -5.5496048  -4.87532685  -5.37787049  0.0128347773 #> [130,]  1.570652e+00   2.4881742   1.43843941  14.63806451 -0.0417610256 #> [131,] -3.842867e+00 -11.2744171  -2.15153057   8.85950374  0.0277707363 #> [132,]  1.304515e+01  -0.5887936   4.36346654   5.95293423  0.0039500390 #> [133,] -2.422868e+00   6.8539193 -11.01483617   7.12929768 -0.0488838205 #> [134,] -2.312309e+00  11.6244592  -3.44417955  -8.52424795  0.0177850027 #> [135,]  1.365011e+01   3.0607056   3.48004128   4.14677869  0.0111809357 #> [136,]  9.142978e+00  -9.1632219   6.66630518   3.60578482  0.0384782864 #> [137,] -9.379370e+00   5.8370099   6.79125865  -7.53893544  0.0073563515 #> [138,] -8.354017e+00  -6.9240328 -10.09469785   2.31630021  0.0128151776 #> [139,] -2.486705e+00  14.7342399   1.07419385  -0.75138493 -0.0066297252 #> [140,]  1.095188e+01  -0.9633666   7.45846435   6.96416384 -0.0435744314 #> [141,] -7.533783e-01   2.9837341 -11.10213601   9.60584862 -0.0223847083 #> [142,] -1.531496e+00 -13.7828193  -1.12037454   5.60652969 -0.0415841853 #> [143,]  1.154009e+00   0.4745054 -14.87226688   1.50292538  0.0393458884 #> [144,]  1.097601e+01  -3.2931671  -9.19976845  -3.00776042  0.0101729277 #> [145,] -4.213885e+00   1.3706771  14.07693036   2.68411079  0.0351967489 #> [146,]  1.071302e+01   4.2735083   6.84660019  -6.71508157 -0.0216529948 #> [147,] -3.603658e+00  -8.0307956  -1.13592394 -12.09254501 -0.0051659320 #> [148,] -2.580168e+00 -11.8338117   7.23308687  -5.09765513  0.0093801327 #> [149,] -5.876400e-01   3.5408649 -11.45291047  -8.99709936  0.0210738510 #> [150,]  2.179483e+00  -2.6791729  14.52804817   1.41693362  0.0374932231 #> [151,]  7.428223e+00   9.9763187  -8.15571836   1.94391892  0.0032604345 #> [152,]  1.379257e+00  -9.5212549  -1.45863473  11.41559203  0.0180750810 #> [153,]  7.268556e+00  -0.6651727 -12.69260498   3.25935802  0.0341655283 #> [154,]  3.545248e+00  13.6340701   4.68052416  -2.15314679 -0.0262935215 #> [155,]  7.842902e+00 -10.4141328   0.93389743  -7.35952163 -0.0384207920 #> [156,]  5.523396e+00   9.8117250   1.92794331  -9.72137786 -0.0495829426 #> [157,] -1.351017e+01   3.0669858   5.75055486  -0.01103607  0.0261582428 #> [158,]  1.632099e+00   6.0047831  13.40361949  -2.57328887  0.0480949732 #> [159,] -1.154044e+01   2.0989624   1.12568737   9.28145157 -0.0190551373 #> [160,] -7.379426e+00  -6.9815273 -10.76786508   2.41979916 -0.0452986259 #> [161,] -1.093696e+01  -5.8279055   4.10762249   7.38551162  0.0280814481 #> [162,]  9.884038e+00  -3.0238540   3.49693671 -10.29240220  0.0495720570 #> [163,]  2.511732e+00   2.1775462  -8.23582395 -12.08803949 -0.0346997277 #> [164,]  1.431052e+01   2.2811201   3.85386587   0.39142600  0.0475954048 #> [165,] -8.602462e+00  -7.4931341   5.46946937  -8.05825591 -0.0379341354 #> [166,]  1.031140e+01  -8.6527696  -5.38504273   3.84785237 -0.0417005731 #> [167,]  3.425478e+00  -5.8894758   5.14810770 -12.33195697 -0.0178785620 #> [168,] -1.034462e+01 -10.5081165   0.86013690  -2.61312574  0.0265422601 #> [169,] -9.323544e+00   9.3999722  -0.43439841   7.03728248 -0.0330254275 #> [170,] -1.067640e+01  -8.4347501   6.31273251   0.13745887  0.0423137183 #> [171,] -1.061530e+01  10.0883511  -2.93690564   1.38391074 -0.0222706668 #> [172,]  3.169413e+00   9.9693062 -10.43898127  -2.56815645  0.0047309237 #> [173,] -7.091385e+00  12.5315147  -3.50628083  -2.31935202 -0.0348084323 #> [174,] -8.001419e+00 -11.3213322  -2.70448050   5.04881369 -0.0243717068 #> [175,]  1.190161e+00  -0.2615637 -14.02236587  -5.18539850 -0.0146831196 #> [176,]  7.346385e+00 -12.5138557  -3.09457611   2.20400514 -0.0139821905 #> [177,]  7.358388e+00  -9.0871610  -8.50835050  -3.98567482  0.0148778549 #> [178,]  6.020749e+00  -6.5895472  -8.57970645   8.46859428  0.0067748491 #> [179,]  7.884142e+00   7.9415752   3.00898137   9.52458467  0.0363769507 #> [180,] -7.817362e+00  10.1414548  -2.19029297  -7.49949114 -0.0069149152 #> [181,] -6.152102e+00  -9.0924728  -2.09781041  10.00388744 -0.0005955629 #> [182,]  1.261098e+01  -1.3193423   7.46847655  -2.90591149  0.0001354119 #> [183,]  3.055763e+00  -4.7621847   1.75907942 -13.78004177 -0.0058698016 #> [184,]  5.942037e+00  12.8924080   4.16225156   2.48066018  0.0351338839 #> [185,]  1.556011e+00  -9.9612662   4.19394489 -10.28410575 -0.0441461657 #> [186,]  7.453625e+00   5.0697805  -4.61797898 -11.06413423  0.0023779168 #> [187,] -1.797702e+00   3.3815965  -4.89597908  13.65146378  0.0288384800 #> [188,] -1.216963e+01  -6.6828247  -3.91431555   4.11315815  0.0162981322 #> [189,] -5.793123e+00 -12.5376495   3.60226769   4.61202135 -0.0324985641 #> [190,] -3.940021e+00  -1.9799217 -13.95862236  -3.27307278  0.0221179466 #> [191,]  3.295676e+00  13.1080004  -5.67653359  -3.17739024  0.0266337472 #> [192,]  1.237133e+00  13.2869801  -5.53893503   4.03061530 -0.0175042943 #> [193,] -8.484825e+00   4.7401821   1.03757490 -11.37813072 -0.0058369315 #> [194,] -7.546503e+00  -1.9243410  11.76905577  -5.08296412  0.0305234385 #> [195,]  3.902432e+00  -9.2681763  -9.51934308  -5.76663132  0.0117787368 #> [196,]  1.017791e+01  -1.1132920  -6.88033870  -8.53415223  0.0340112844 #> [197,]  1.109157e+01   1.0920916  -9.28106932  -3.82704150 -0.0495549047 #> [198,]  1.411466e+01   2.9397602  -3.72895112  -1.79693480 -0.0440663379 #> [199,]  4.829457e+00   3.4129209 -13.53831030   2.59662730 -0.0366588131 #> [200,] -4.486208e+00   6.2511327  12.66044060  -2.34745059 -0.0423519193 #> [201,] -6.844723e+00  -3.9016853   4.69937535 -11.86770786  0.0179676127 #> [202,] -1.225935e+01  -3.2385413  -5.04148216  -6.22926375 -0.0346720112 #> [203,] -9.147037e+00 -10.3235453  -5.14677152   2.87521751 -0.0105358604 #> [204,]  8.933283e+00  -2.7075767  -9.90330005   6.30794170 -0.0388897476 #> [205,] -9.252580e+00  -5.7729562  -0.47511205  10.28771168  0.0206338906 #> [206,]  1.267178e+01  -6.7067418   0.46354847  -4.38529681 -0.0286781157 #> [207,]  4.989183e+00  -1.1249065   5.12719435 -13.13600065 -0.0029163714 #> [208,] -5.689257e+00  -5.8078820  10.54927241   6.90026923 -0.0339468971 #> [209,] -6.567299e+00  -1.3456757  10.38586706  -8.49667654  0.0146281933 #> [210,]  5.787823e+00  13.0230257  -4.66191527  -0.41043515 -0.0006662173 #> [211,]  1.406655e+01   1.0934177   3.80559292   3.38439376  0.0340562089 #> [212,]  6.747270e+00   2.1903478  -3.79434088  12.66016217  0.0423673738 #> [213,] -4.903225e-01   2.3059747   4.49729107  14.11440532 -0.0377279501 #> [214,] -1.288186e+01   6.1269682   1.27516938   4.46002530  0.0164545753 #> [215,]  2.360657e+00  12.2801559  -4.85289809   6.71375095 -0.0312253740 #> [216,] -2.467914e-01 -12.5212837   0.53778172   8.23816365 -0.0465212737 #> [217,]  1.264390e+00  -1.5776002  10.18122625  10.82844071  0.0079668593 #> [218,]  1.925921e+00   6.1081607  -1.07959230 -13.52093497 -0.0172529313 #> [219,] -1.197266e+01   2.2945044   0.37909059   8.73194715  0.0377933598 #> [220,]  7.963130e+00   4.7706985  -3.48125160 -11.25654819  0.0288388964 #> [221,]  2.813432e+00  14.0397717  -0.69694474  -4.41403201  0.0317813022 #> [222,]  5.802850e+00  11.1298757   4.28586814   7.00600722  0.0252395107 #> [223,] -2.313957e+00  -1.1542448  14.76757254   0.48179363  0.0289578733 #> [224,] -2.863086e-01  -9.2877322   6.31746184  -9.93708879  0.0246742840 #> [225,] -6.260542e+00  -5.2301818   4.53752018  11.74145338  0.0498130434 #> [226,] -9.686265e+00  10.3620209   4.82464221   0.72637628  0.0209366097 #> [227,] -1.729272e+00  -9.5370993  10.76659489  -3.89021723 -0.0439008097 #> [228,] -9.432607e+00  -9.9151479  -1.00719331  -6.05816271  0.0150919481 #> [229,] -2.649804e-01 -11.3567014  -1.07416021  -9.73659581  0.0073373328 #> [230,]  5.146779e+00  13.8105220  -2.16697176   1.75624136  0.0234213716 #> [231,]  2.950395e+00  14.1330896   0.85882767   3.97660209  0.0141660189 #> [232,]  2.933099e+00  10.2068383   7.84049905   7.12347938  0.0067751970 #> [233,]  4.959096e+00  -6.5170095  -4.46089223  11.74888897  0.0005198856 #> [234,]  5.784224e+00  10.8571204  -5.72746259  -6.39232799  0.0084695989 #> [235,] -1.741703e+00   6.0193638  -4.63444779 -12.81622500  0.0148915792 #> [236,] -3.568842e+00  12.8957768   3.97935497   5.48881074  0.0499511852 #> [237,] -1.737129e+00 -11.6381890   4.02364619  -8.38720523  0.0215529104 #> [238,] -7.343435e+00  -8.3696116  -1.57133006  -9.92746094 -0.0224976930 #> [239,]  5.873549e+00 -10.2388429   9.13934103   1.46286188 -0.0293394150 #> [240,] -3.258355e+00 -11.8746077  -5.94651451   6.16569356 -0.0299163764 #> [241,] -2.326852e+00   8.5377975  11.96502789   1.87879804  0.0349481124 #> [242,]  9.844870e+00   0.3790023   9.29610263  -6.44339683 -0.0348385172 #> [243,]  1.153996e+01   1.0240071   6.23789101   7.20204614  0.0155268652 #> [244,]  4.015035e+00   3.1997047   5.83881613  12.82768916 -0.0146783921 #> [245,] -3.616183e+00  -1.2486459  11.13029782  -9.29949339  0.0087095233 #> [246,] -8.849682e+00   5.5241820  -5.34707361   9.35817021 -0.0145297334 #> [247,]  1.576192e+00  -2.2935087  -5.07132447  13.83969311 -0.0396200011 #> [248,] -9.920493e+00   4.2535769  -8.67910074   5.75882848  0.0065742848 #> [249,] -1.127291e+01   7.3586252  -4.98179081   4.35361982  0.0119224151 #> [250,] -1.078669e+01  -7.4303820  -7.14503829  -1.54440822 -0.0481219360 #> [251,]  6.101343e+00   2.6449235   9.46266452   9.55175222  0.0471485959 #> [252,] -4.343488e+00  -4.9995658  -8.47706357  10.45360463 -0.0173415651 #> [253,] -9.899301e+00  -1.2720325   3.90435512  10.49484601 -0.0351459031 #> [254,] -7.795089e+00  -3.3292664   8.37613891   9.11004218  0.0066405958 #> [255,]  7.662999e+00   9.5762619  -0.18169364   8.63369199 -0.0443197683 #> [256,] -5.689410e+00   6.8984352   2.80516529  11.71209871  0.0476516780 #> [257,] -1.922015e+00   8.3377654  -5.45226427 -11.04809212 -0.0063464875 #> [258,]  3.830009e+00   6.2297861  -6.39921233 -11.42676151 -0.0081631593 #> [259,] -1.081935e+01  -5.0949921   0.07379534  -9.05412590  0.0091076988 #> [260,] -1.192374e+01   9.0317243   0.20137630   1.10084331  0.0400294757 #> [261,]  1.334770e+01   1.8321066   6.15337949  -2.37029657  0.0094354750 #> [262,]  1.260624e+01   2.3516991  -0.57733529  -7.76008189  0.0172927913 #> [263,]  7.712801e+00  -3.7232812   0.36878666  12.30909698 -0.0088471429 #> [264,] -1.112173e+00  10.4624738  -4.67768061  -9.61348101 -0.0489781593 #> [265,] -7.773170e+00   8.7279151  -6.81939924  -6.47279810  0.0202286234 #> [266,] -1.095984e+01  -5.1945286   7.50018972  -4.65250918 -0.0271672612 #> [267,]  9.988769e+00 -10.6709125  -3.13322859   1.24056146  0.0030188583 #> [268,]  3.281927e+00  13.5028246  -2.44401167   5.09210058  0.0202359326 #> [269,] -3.609230e+00  11.5993748  -6.54198154  -5.88476347  0.0332122876 #> [270,] -2.041081e+00  11.6966460   8.94700036   1.99340074  0.0120355370 #> [271,] -4.793521e+00  -8.0546047   1.65594273  11.59324618 -0.0487785397 #> [272,] -8.352441e+00 -11.5210749   1.51664209   4.49459183  0.0415468803 #> [273,] -9.662554e-01   6.1352049   2.41468653  13.43856022  0.0226467820 #> [274,] -5.156586e+00  -1.2220370   0.02695507 -14.03265911  0.0479416980 #> [275,] -1.257502e+01   2.4917017   5.92538536  -5.05472136 -0.0275996075 #> [276,]  4.263991e+00   3.5727588   1.92748272  13.79632500 -0.0491144868 #> [277,]  2.429987e+00  -7.7886323   9.50740405   8.24873545  0.0474935835 #> [278,] -6.546434e+00  -1.9981465   5.65090778  12.09209875  0.0343168010 #> [279,]  5.630797e-01 -12.0449938   8.63408132  -2.24804468  0.0389112024 #> [280,]  1.116486e+01   0.3385444  -3.64510565   9.32440472 -0.0258209685 #> [281,]  5.214858e+00   1.2396337  13.76184755  -2.62299756 -0.0121918444 #> [282,] -5.092339e-01  14.3658399   4.17749227  -0.95492601 -0.0420192374 #> [283,] -3.927868e-01   2.4696634 -10.97167339  -9.91810788 -0.0283980956 #> [284,] -8.092701e+00  -1.9250121 -11.03176894  -5.83974207  0.0383471697 #> [285,]  2.373941e-01  10.7309576  -7.18455847   7.62707754  0.0492783289 #> [286,]  8.604068e-01  -1.4729960   9.47561239  11.50229337  0.0054242202 #> [287,]  5.688089e-01 -10.2114724   0.36667921 -10.96666928  0.0221705060 #> [288,]  9.939153e+00   2.3166121  -7.08579014  -8.40464947 -0.0055958019 #> [289,]  1.420468e+00   7.5347762  -4.80773703 -11.96223574 -0.0373771026 #> [290,]  5.680120e+00   6.1578060   7.89684978  -9.61547846  0.0339889998 #> [291,] -1.288804e+01  -3.1411222  -6.99383084  -0.34364973  0.0487770563 #> [292,] -4.808325e+00   1.5816389  -2.38200393 -13.91777605  0.0255775591 #> [293,] -7.658863e+00  -0.5642634  10.80782491  -7.01529337  0.0250430639 #> [294,] -1.270061e+01   7.6247653  -1.18040026  -2.04059076  0.0071043166 #> [295,] -8.516547e-01  -0.6431432  13.13546728  -7.16383629 -0.0003512936 #> [296,] -1.934801e+00  -7.5972493 -12.78752935  -0.13206265  0.0289206893 #> [297,] -1.780937e+00 -11.0887807   8.80577306  -4.61796142 -0.0176823216 #> [298,]  2.363835e+00  -1.8018569  14.64804690  -1.26503705 -0.0175330482 #> [299,] -3.671368e+00  11.1482007  -9.23543509  -1.39478225  0.0177750885 #> [300,]  6.615401e+00   3.4966744 -12.99476404   0.38189480  0.0201823969 #> [301,] -9.616325e-01  -6.6297852 -11.38158095   7.11201980 -0.0324931980 #> [302,]  7.139326e+00   5.6132255   9.48018410   7.25588219 -0.0368393197 #> [303,]  7.001406e+00  12.0696615  -2.45497599   4.92713701  0.0080396352 #> [304,]  4.194039e+00  -5.7474796 -12.86523835   2.97693736  0.0251980245 #> [305,]  1.107671e+01  -0.1375287  -9.89445805  -2.09460102 -0.0443637070 #> [306,]  1.915624e+00 -13.8006838  -1.62205235  -5.31417526  0.0489498000 #> [307,] -1.456086e+01   2.9968474   1.07244645   1.68823160  0.0456054189 #> [308,]  7.382809e+00   7.3004639   6.18409976  -8.88562131 -0.0337738652 #> [309,]  4.729002e+00  -4.7145921   4.17652786 -12.76580486  0.0063907456 #> [310,]  1.639165e+00  -1.7163027   8.81442146 -11.90266435 -0.0121837748 #> [311,]  9.089541e+00   2.9677468   6.89941099   9.27204725  0.0188696034 #> [312,]  2.008099e+00 -10.9926734   3.21897872  -9.47453677 -0.0301792020 #> [313,]  8.591685e+00  10.6389620   4.92183389   3.71092720  0.0013068495 #> [314,] -1.857813e+00   2.6869798   8.04298179 -12.23270671 -0.0135454748 #> [315,]  6.324164e+00  13.4493407   1.67275875   1.14981046 -0.0301305974 #> [316,] -1.010907e+01   4.1864156   8.80739641   5.26406806 -0.0139486994 #> [317,]  7.426178e+00   1.3473405  -8.20246936  10.03773105 -0.0007730641 #> [318,]  8.160435e+00   3.9655093  11.92837062   0.62929337 -0.0167835000 #> [319,] -2.444585e+00  -2.6905832  -3.04709767  14.23024815 -0.0445043142 #> [320,]  5.618025e-01  -8.6944331 -11.34400106   4.51717285  0.0294958376 #> [321,]  5.457828e-01 -13.3449313   3.48782671  -5.86941178  0.0191389521 #> [322,]  6.967787e+00  -0.3928122  -1.39622242  13.20402214  0.0355913641 #> [323,] -6.601998e+00  -9.8862271   4.66512722  -7.86846390  0.0213377306 #> [324,] -9.729482e+00   8.1284167  -4.15064370  -6.85843793 -0.0412513025 #> [325,] -1.090919e+01  -9.7585611   2.10844652   2.51287343 -0.0168443735 #> [326,] -1.015226e+01  -4.8515264  -1.26262148  -9.83870535  0.0117259522 #> [327,]  3.422743e+00  -4.2795408  -9.49259619 -10.24016491  0.0010004979 #> [328,]  5.793852e+00  -5.4438667   3.18892982  12.31366412 -0.0200507615 #> [329,]  1.451151e+01  -1.4261359  -3.51768214  -0.08999197  0.0482584288 #> [330,]  9.947785e+00  -6.4327738   6.13905759  -6.85368321  0.0150716881 #> [331,] -8.989630e+00  -0.5002622   9.26244619   7.62518072  0.0197244098 #> [332,] -3.889283e+00  -1.0987605  13.20717247  -5.85122162 -0.0392193277 #> [333,]  7.027719e+00  -5.7880367   8.65047514  -8.20238198 -0.0110151795 #> [334,] -1.100248e+01  -4.3044644  -8.79589572  -2.83711394  0.0255675613 #> [335,] -5.158345e+00  -6.7870410   8.41649678  -9.02718859  0.0371528264 #> [336,]  9.565078e+00   0.6410726  -7.48928832   8.77546969 -0.0436272402 #> [337,] -8.242143e+00  11.1118246   3.03372756  -4.93871714  0.0230249973 #> [338,] -3.095241e+00   9.9287781   7.40289870   7.87628981  0.0025096398 #> [339,] -1.125682e+01   4.6596843  -0.40141918  -8.74128772  0.0246775269 #> [340,] -6.272322e+00  12.1563488   2.14345315   5.76946843  0.0374241393 #> [341,] -1.383272e+01   2.0611429   5.28786280  -1.20255747  0.0193517477 #> [342,] -1.266973e+00  -5.4616041   1.36795113  13.84537359 -0.0435180277 #> [343,]  1.116233e+01   9.3112266  -1.89831796  -3.17802825  0.0305815461 #> [344,]  4.366893e+00   1.9413864  14.05183559   2.16960362 -0.0244791933 #> [345,] -5.137379e-01  -6.9971518   3.01251435 -12.91126245 -0.0314262797 #> [346,] -5.886666e+00  -6.6264282  10.07804464  -6.69855409 -0.0084417328 #> [347,] -1.223824e+01  -5.2666574  -1.63086028  -6.69538212 -0.0362624110 #> [348,] -9.374832e+00  11.1784592  -3.26631451   1.21892337 -0.0331478010 #> [349,] -5.923815e+00   5.2672756   4.63903513  11.85932457  0.0249309478 #> [350,] -4.878711e-01  -1.5403600  14.72742595  -2.34354381  0.0295108484 #> [351,] -3.163334e+00   1.7255592   5.33199327 -13.54937681 -0.0191200798 #> [352,]  2.944536e+00 -12.4076970   6.69099897   4.19634303  0.0094126848 #> [353,]  2.348976e+00 -13.5433828   0.51319660  -5.98295263  0.0058763724 #> [354,]  1.103218e+01   9.4905496  -3.41476220  -1.24895300  0.0083123195 #> [355,] -5.146886e+00   9.5528756  -9.35051994  -4.45195574 -0.0040908035 #> [356,]  6.233178e+00  -2.8640007 -10.54023617  -8.17608786 -0.0331562624 #> [357,] -5.768914e+00  13.4533154  -3.27367724  -0.10477261 -0.0459406769 #> [358,]  3.325291e+00 -13.4852636   0.20964960  -5.66093191 -0.0263532790 #> [359,] -6.636595e+00  -6.2371978  -7.90681344   8.91825510 -0.0377790165 #> [360,] -8.423993e+00 -12.2412979   1.53866536  -1.34887738 -0.0054815637 #> [361,]  9.456365e+00 -11.3231261   0.51161468   2.66500027 -0.0479714178 #> [362,] -9.569778e+00  -4.6735220 -10.36430031   2.03931781 -0.0390876873 #> [363,] -1.830245e+00   4.8983717  -8.66326397 -11.07266969  0.0026662960 #> [364,]  7.658369e+00  -0.1180079   7.27564025  10.64896784 -0.0421718092 #> [365,] -1.083678e+00   6.6462817   4.09770421  12.76171622  0.0086325987 #> [366,]  1.245455e+00  -5.8922090 -13.15028261   3.97501968 -0.0156443051 #> [367,] -5.686703e+00   3.9409180   7.74605619 -10.82262399  0.0300898795 #> [368,]  9.558439e+00  -3.5360496   0.19833526  11.00423794 -0.0057084480 #> [369,] -9.755008e+00   1.0370209  -5.51211600  -9.91871888 -0.0045738742 #> [370,]  4.377580e+00   8.3656350 -10.89590103   4.13911683  0.0266026248 #> [371,]  1.038034e+01  -7.2027213   5.74751514   5.68641611 -0.0297770931 #> [372,]  4.865054e+00   2.6859710  -2.19506517  13.75857894  0.0069560290 #> [373,]  1.223262e+01  -6.5354364   2.34147043  -5.21234139 -0.0483589163 #> [374,] -5.632518e-01  11.4244058  -6.54340525   7.16585992 -0.0383498276 #> [375,] -8.497250e+00   8.8021081  -4.95480144   7.12527757  0.0288464078 #> [376,]  1.124544e+01  -5.2335342   8.14164935  -2.20540338  0.0343661637 #> [377,] -1.508826e+00  14.6065483   0.06587007  -3.06069475 -0.0493101237 #> [378,]  6.359486e+00   5.5364983 -12.29675017  -1.64135842  0.0211965375 #> [379,]  7.610205e+00  -4.6864353   4.86232140  11.02179393  0.0039784590 #> [380,]  2.055110e+00  -3.6011972 -13.55677689   4.90119376 -0.0197525343 #> [381,]  7.928413e+00  10.0450280   0.07705623  -7.82507090  0.0404901317 #> [382,]  7.597167e+00  -0.4572633  -9.61905517   8.63410302 -0.0066356559 #> [383,] -1.158818e+01   3.6495535  -8.16164635   3.28364379  0.0371381865 #> [384,]  2.948488e-05   0.7565957   5.27714528  14.02067404 -0.0305965141 #> [385,] -7.345857e+00  -0.2857074  -3.70637769 -12.53872086 -0.0169804489 #> [386,]  6.388330e+00 -12.2079169   1.01078581  -5.84245759  0.0315736965 #> [387,] -9.826952e-01   1.4349522  14.78652375  -1.82590742  0.0017287161 #> [388,] -7.438338e+00   6.0670523  -9.84167139  -6.00029203 -0.0411404355 #> [389,] -5.751716e+00  -2.0014867  13.56487861   1.97633191  0.0464021380 #> [390,]  6.545980e+00  -0.7935336   3.63324328  12.97381955  0.0140651580 #>                 [,6]          [,7]          [,8] #>   [1,] -0.0498393067  1.892525e-02 -4.563111e-02 #>   [2,]  0.0451536968  2.773644e-02 -4.336417e-02 #>   [3,] -0.0280449965 -3.173620e-02 -1.789050e-02 #>   [4,] -0.0056458567 -1.118437e-02 -2.029913e-02 #>   [5,] -0.0398530548 -1.424695e-02 -4.984841e-02 #>   [6,] -0.0207916648  7.818178e-03  1.173335e-02 #>   [7,]  0.0219589043  4.924428e-02 -3.183726e-02 #>   [8,]  0.0124213236 -1.900522e-02  1.706885e-02 #>   [9,]  0.0044157534  1.412843e-02 -5.342047e-03 #>  [10,]  0.0092767084 -4.196112e-04 -3.112296e-02 #>  [11,]  0.0135475572 -1.610557e-02  1.082736e-02 #>  [12,] -0.0041835041 -2.821384e-02 -2.181403e-03 #>  [13,] -0.0391406306  1.222711e-02 -1.912578e-02 #>  [14,]  0.0290602097 -2.007073e-02  1.283292e-02 #>  [15,]  0.0102725765  4.311229e-02 -5.704142e-03 #>  [16,] -0.0481411841  3.963124e-02 -4.272579e-02 #>  [17,] -0.0009434334  9.426901e-03  5.579568e-03 #>  [18,] -0.0251287451 -3.434017e-02  2.995291e-03 #>  [19,] -0.0334533131 -2.814454e-02  2.950437e-02 #>  [20,]  0.0226924400 -1.842447e-02 -1.016878e-02 #>  [21,]  0.0153882534  3.040888e-03  4.225628e-02 #>  [22,] -0.0192061445  4.902254e-02  1.620462e-02 #>  [23,] -0.0001013235  9.129078e-03 -2.439108e-03 #>  [24,]  0.0168872097 -4.472413e-02  2.472372e-02 #>  [25,] -0.0212829936 -3.133268e-02  3.343260e-02 #>  [26,] -0.0296480511  3.067976e-02  3.714496e-02 #>  [27,] -0.0090389605  3.023662e-02  1.980035e-02 #>  [28,]  0.0272115196  3.346905e-02  1.052646e-02 #>  [29,]  0.0213846744  2.747565e-02  8.395954e-03 #>  [30,]  0.0009698119  1.455804e-02 -8.922619e-03 #>  [31,]  0.0480860865 -2.990596e-02  4.706160e-02 #>  [32,] -0.0349666421  2.112739e-02  4.274642e-02 #>  [33,]  0.0098777179  2.228716e-02  4.160035e-02 #>  [34,] -0.0041983687 -2.395582e-02  2.749255e-02 #>  [35,] -0.0130523423 -1.184794e-04  3.034556e-02 #>  [36,] -0.0093946351  3.505941e-02  2.139725e-02 #>  [37,] -0.0121117136 -4.260565e-02 -4.414726e-02 #>  [38,] -0.0022403454 -1.231356e-02 -4.239714e-02 #>  [39,]  0.0369144969  2.576021e-02 -2.322742e-02 #>  [40,] -0.0088323499 -1.289703e-02 -5.148936e-03 #>  [41,]  0.0095764856  7.094609e-04 -3.302802e-02 #>  [42,]  0.0464114999 -2.497024e-02  3.299800e-02 #>  [43,]  0.0477102483 -4.421404e-03 -1.745677e-02 #>  [44,]  0.0474303407  4.587912e-02  1.934359e-02 #>  [45,]  0.0087080968  2.117285e-03  2.298787e-02 #>  [46,]  0.0178621636 -2.639497e-02 -3.891202e-02 #>  [47,] -0.0369462701  1.452840e-02 -2.021059e-02 #>  [48,] -0.0208844455 -2.406938e-02  6.770005e-03 #>  [49,] -0.0376464167  2.438022e-02  3.723678e-02 #>  [50,] -0.0228666042 -4.548817e-02  6.624447e-03 #>  [51,]  0.0485046670 -3.180283e-02  2.918043e-02 #>  [52,]  0.0461939265  2.836666e-02 -3.271358e-02 #>  [53,]  0.0065362056 -1.969667e-02  3.394993e-02 #>  [54,]  0.0114326499  3.775126e-02 -3.910166e-02 #>  [55,]  0.0024644357  3.777332e-02  3.341849e-02 #>  [56,]  0.0395197440  1.230545e-02 -5.263522e-03 #>  [57,]  0.0187534676 -7.668746e-03 -2.872346e-02 #>  [58,]  0.0359935214 -2.169839e-02  4.554617e-02 #>  [59,]  0.0124769656  2.171626e-02  1.509024e-02 #>  [60,] -0.0076072273  3.978454e-02 -2.076385e-02 #>  [61,]  0.0263257338 -3.875901e-02 -1.244687e-03 #>  [62,]  0.0044397798  4.607732e-02 -2.182944e-02 #>  [63,]  0.0267112524  4.860652e-02 -3.853270e-03 #>  [64,]  0.0228135129  1.253276e-02  1.308319e-02 #>  [65,] -0.0231531464  1.519430e-02  4.602874e-02 #>  [66,] -0.0067987888 -1.951061e-02 -3.955683e-02 #>  [67,]  0.0249986364  4.080286e-02  1.328174e-02 #>  [68,] -0.0293081690  1.368922e-02 -3.320095e-02 #>  [69,] -0.0442586954 -3.587512e-02 -2.450472e-02 #>  [70,] -0.0175510955  1.444008e-02 -5.767946e-03 #>  [71,] -0.0458632032 -2.769914e-02  8.453039e-03 #>  [72,] -0.0113224096  1.805635e-02 -4.966143e-02 #>  [73,]  0.0091238019  1.769735e-02  4.189141e-02 #>  [74,] -0.0015369967 -2.628551e-02 -4.459628e-02 #>  [75,]  0.0174324103  3.276527e-02  6.603105e-04 #>  [76,]  0.0096760882  1.013149e-02  2.804644e-02 #>  [77,] -0.0112215067 -1.719283e-02 -4.265122e-02 #>  [78,] -0.0406055247  2.110917e-02 -4.384847e-02 #>  [79,] -0.0376776326  4.910112e-02  4.953826e-02 #>  [80,] -0.0481057837 -1.143816e-02 -4.457870e-02 #>  [81,] -0.0109047671 -2.695412e-02 -1.484462e-02 #>  [82,]  0.0447565397  4.585967e-02  3.077961e-02 #>  [83,]  0.0310495166  2.277257e-03 -3.346440e-02 #>  [84,] -0.0330248760  2.807068e-02  3.969311e-02 #>  [85,] -0.0160083171  1.377502e-02 -3.472715e-02 #>  [86,] -0.0060951419 -3.469323e-02  3.008664e-02 #>  [87,] -0.0059534746 -1.203818e-02  4.103246e-02 #>  [88,] -0.0434921290 -4.940264e-02 -3.403479e-02 #>  [89,] -0.0303488126 -1.145720e-02 -8.310187e-05 #>  [90,] -0.0138705691 -4.293891e-03  9.379722e-03 #>  [91,]  0.0420159218  1.266595e-02  2.771935e-02 #>  [92,] -0.0433659005 -3.613023e-02  4.028728e-02 #>  [93,] -0.0495314758  9.678168e-03  4.560592e-02 #>  [94,]  0.0194746824  2.476464e-02  1.104355e-02 #>  [95,]  0.0065333394  1.782686e-02  4.564350e-02 #>  [96,]  0.0344118395 -8.513175e-04 -2.546260e-02 #>  [97,] -0.0085771780 -4.401581e-02  3.603365e-02 #>  [98,] -0.0363177381  1.642616e-02  4.528823e-02 #>  [99,] -0.0095317049  4.639688e-02  1.849691e-02 #> [100,]  0.0068524925  2.448232e-02  1.168250e-02 #> [101,] -0.0178026940  2.846342e-02  1.174071e-02 #> [102,] -0.0004171018  2.745074e-02  4.716641e-02 #> [103,]  0.0357460975  3.553626e-02  4.543943e-02 #> [104,] -0.0087324518  2.039715e-02  4.970216e-02 #> [105,]  0.0202622945 -2.548602e-03 -1.212756e-02 #> [106,] -0.0229893559  1.679754e-02 -3.217612e-02 #> [107,]  0.0346691798  3.302240e-02  4.040831e-02 #> [108,] -0.0405789726  2.592803e-02  3.446613e-02 #> [109,]  0.0196550015  1.957304e-02 -4.675201e-02 #> [110,]  0.0327333928 -9.092975e-03  2.296887e-02 #> [111,] -0.0396731389  2.582671e-02 -3.910353e-02 #> [112,]  0.0050500424 -1.058305e-02 -2.763894e-02 #> [113,]  0.0222523796 -3.779474e-02  4.141575e-02 #> [114,] -0.0226958374  3.454870e-02 -1.781756e-03 #> [115,] -0.0347799618  4.885079e-02  3.774724e-02 #> [116,] -0.0428095266  5.580309e-03 -4.033636e-03 #> [117,] -0.0191357206 -4.800598e-02 -4.698418e-02 #> [118,] -0.0096166594 -2.040473e-03  8.103914e-04 #> [119,]  0.0061355447 -1.992891e-02 -3.579828e-02 #> [120,] -0.0190324896 -1.517283e-02  5.924443e-03 #> [121,] -0.0297304905  1.621100e-02 -9.544471e-03 #> [122,] -0.0415984048  1.742515e-02 -1.271696e-02 #> [123,] -0.0140887571  3.552806e-02 -8.433280e-03 #> [124,] -0.0008866568 -4.905840e-02  3.532045e-02 #> [125,] -0.0453380776 -4.452618e-02 -4.803023e-02 #> [126,]  0.0385745028  2.603686e-02  2.460874e-02 #> [127,]  0.0264782653  9.833951e-03  6.349383e-03 #> [128,]  0.0056096796 -4.390994e-03  2.763158e-02 #> [129,] -0.0253685348  3.108823e-02 -4.156512e-02 #> [130,]  0.0401472228  3.216536e-02  5.304969e-03 #> [131,]  0.0312097506  2.333433e-02  4.974718e-02 #> [132,] -0.0359511758  1.756335e-02 -4.678972e-02 #> [133,]  0.0175254943 -2.766807e-02  2.210390e-02 #> [134,] -0.0024896817 -1.337244e-02 -1.742619e-03 #> [135,]  0.0114440351  1.404891e-02 -1.098029e-02 #> [136,]  0.0458712738  2.905269e-02  3.168231e-02 #> [137,] -0.0066626399  1.404969e-02  4.072385e-02 #> [138,]  0.0194861766 -8.627668e-03  1.003799e-02 #> [139,] -0.0492242091  4.171956e-02 -2.494683e-02 #> [140,]  0.0062035902  1.135051e-02 -6.233665e-03 #> [141,]  0.0415474713 -8.215701e-03 -3.094194e-02 #> [142,]  0.0102327159  4.274075e-02 -4.832630e-02 #> [143,]  0.0192527417  4.346928e-02  2.898367e-02 #> [144,] -0.0386294509 -4.989754e-02 -5.724461e-04 #> [145,]  0.0192914769 -1.497525e-02  7.214688e-03 #> [146,] -0.0301690357  3.397222e-02 -3.367245e-02 #> [147,] -0.0215733269 -1.529763e-02  7.559647e-03 #> [148,]  0.0061278763  4.191830e-03 -4.338885e-02 #> [149,] -0.0241728410 -3.207837e-03 -2.098144e-02 #> [150,]  0.0474393241 -3.339942e-02  7.317768e-03 #> [151,]  0.0215129375 -8.862964e-03  1.883193e-02 #> [152,] -0.0474182297 -2.996047e-02 -3.021234e-03 #> [153,]  0.0410129749 -2.253775e-02  4.200588e-02 #> [154,]  0.0189748268  6.566355e-03 -1.152966e-02 #> [155,]  0.0042228382  2.228097e-02  4.415447e-02 #> [156,] -0.0273235395 -3.555571e-02  4.058445e-02 #> [157,] -0.0286875791 -3.067091e-03 -1.752085e-02 #> [158,] -0.0423711489 -3.210432e-02 -2.058731e-02 #> [159,] -0.0218472056  6.210665e-03  4.271443e-02 #> [160,] -0.0309671241  2.765883e-02 -2.642306e-02 #> [161,] -0.0040772037 -2.314544e-03 -4.932971e-02 #> [162,] -0.0316639734 -4.910280e-02 -7.128664e-03 #> [163,] -0.0219678072  3.890200e-02  3.287940e-02 #> [164,] -0.0316782717 -4.409502e-03  1.592602e-02 #> [165,] -0.0075809374 -1.024877e-02 -4.146531e-02 #> [166,] -0.0019381610 -4.719092e-02  3.573030e-02 #> [167,]  0.0354225670 -1.622247e-02 -3.574065e-02 #> [168,]  0.0082201671 -3.915616e-02 -3.665961e-02 #> [169,] -0.0030426393  4.194219e-02  9.816264e-03 #> [170,]  0.0073778888 -4.726048e-03  2.768947e-02 #> [171,]  0.0244132529 -1.716937e-02  3.479357e-04 #> [172,] -0.0116682196  3.265369e-02  1.849963e-02 #> [173,] -0.0385070114 -4.315940e-02 -5.350806e-04 #> [174,]  0.0045250302  1.342565e-02  1.583998e-03 #> [175,] -0.0386503571  1.458245e-02 -2.230856e-02 #> [176,]  0.0132987844 -3.361651e-03 -4.395085e-02 #> [177,] -0.0005573324  2.109097e-02 -1.959253e-02 #> [178,] -0.0451539532  1.339186e-02 -2.626117e-02 #> [179,] -0.0035249788  4.177527e-02  4.452689e-02 #> [180,] -0.0113482851 -3.545911e-02  1.592490e-02 #> [181,]  0.0237902335 -4.011782e-02  4.893033e-04 #> [182,]  0.0250188419 -3.510428e-02  1.619489e-02 #> [183,] -0.0168281887 -2.538494e-03  2.557647e-02 #> [184,] -0.0361658940 -3.089631e-02  7.692141e-03 #> [185,] -0.0384284920  1.889410e-02 -2.120145e-02 #> [186,]  0.0482573789 -1.838645e-02  3.803211e-03 #> [187,] -0.0018153150  1.932340e-02  3.410767e-03 #> [188,] -0.0056891972  2.115003e-02  3.970867e-02 #> [189,]  0.0235091108 -4.159286e-02 -4.064302e-02 #> [190,] -0.0433118782  1.438999e-03 -4.146179e-02 #> [191,]  0.0318508651 -1.140734e-02  2.012408e-03 #> [192,] -0.0101559245 -2.942417e-02 -2.566237e-02 #> [193,]  0.0430584712 -3.676060e-02 -1.758677e-02 #> [194,] -0.0461112634  1.501521e-03 -3.856622e-02 #> [195,]  0.0328340234  3.045697e-02  7.863600e-03 #> [196,]  0.0091125147  4.624107e-02 -4.928260e-02 #> [197,]  0.0322095023  3.986439e-03  1.786176e-02 #> [198,] -0.0261450251 -8.180434e-03 -3.539434e-04 #> [199,]  0.0306117061 -4.743464e-02 -3.906098e-02 #> [200,]  0.0483416579  1.344230e-02  3.899200e-02 #> [201,] -0.0001050768  1.985278e-02 -1.316041e-02 #> [202,] -0.0242393107 -2.546511e-02  1.069089e-02 #> [203,] -0.0448149232 -1.282265e-03 -1.638010e-02 #> [204,] -0.0403402146  3.714462e-03  1.578708e-02 #> [205,]  0.0384512077  1.757342e-02 -1.960031e-02 #> [206,] -0.0311754012 -4.093652e-02 -3.857673e-02 #> [207,] -0.0094728988 -1.168775e-02  1.289417e-02 #> [208,] -0.0248839530 -4.919733e-03  1.273894e-02 #> [209,]  0.0084844274  1.621446e-02 -3.451278e-02 #> [210,] -0.0443554433  4.318053e-02 -2.363670e-02 #> [211,] -0.0108276782  4.596753e-02 -2.289036e-03 #> [212,]  0.0470620946 -4.229184e-02  6.148196e-03 #> [213,]  0.0268604745  9.410716e-03  3.492996e-02 #> [214,]  0.0485144481  1.695594e-02 -1.062045e-02 #> [215,] -0.0091415693 -3.825438e-04 -2.128679e-02 #> [216,] -0.0359738877 -1.822379e-02  4.265630e-03 #> [217,] -0.0039780248 -3.873556e-02  3.043189e-02 #> [218,] -0.0294111057  3.494445e-02  2.099480e-02 #> [219,]  0.0288458679  4.866843e-04  6.378680e-03 #> [220,] -0.0143177871 -3.070498e-02 -4.353564e-02 #> [221,]  0.0067108722 -2.495881e-02  4.261111e-02 #> [222,]  0.0100103488 -8.684962e-03 -1.114709e-02 #> [223,] -0.0493065814 -3.320803e-02  1.743370e-02 #> [224,]  0.0463613175 -1.224086e-02  1.208461e-02 #> [225,]  0.0001963110 -6.554595e-03 -1.304712e-02 #> [226,] -0.0114313675  3.721531e-02  4.693469e-02 #> [227,] -0.0096035828 -3.938856e-02 -4.591796e-02 #> [228,]  0.0045797634 -3.610840e-02  2.295358e-02 #> [229,]  0.0490253717 -4.261751e-02  1.247358e-03 #> [230,] -0.0240629866  2.503725e-02 -4.599403e-02 #> [231,]  0.0190400123  4.012388e-02  1.559033e-02 #> [232,]  0.0140088327 -1.574965e-02  2.489630e-02 #> [233,]  0.0141258125  1.204735e-02 -3.298581e-02 #> [234,]  0.0309725679 -6.011913e-05 -2.671830e-02 #> [235,] -0.0186676408 -1.472318e-02  1.606811e-02 #> [236,] -0.0076331608  1.686565e-02  2.180101e-02 #> [237,] -0.0051156343 -3.912067e-02 -2.708413e-02 #> [238,]  0.0163840514 -2.628905e-02  1.975996e-02 #> [239,]  0.0465137657  3.641918e-02 -2.777393e-02 #> [240,] -0.0078086089 -2.166993e-02  1.200812e-02 #> [241,]  0.0016921463 -2.837498e-02 -2.191100e-02 #> [242,]  0.0109608324  4.957882e-02  2.122510e-02 #> [243,]  0.0140914923 -4.504902e-02 -4.161556e-02 #> [244,]  0.0208868657 -4.511219e-02 -2.686163e-03 #> [245,] -0.0469652987 -4.122127e-03  4.278944e-02 #> [246,] -0.0213770616 -3.528759e-02 -2.564461e-02 #> [247,]  0.0049534994  9.541079e-03 -3.326321e-02 #> [248,] -0.0284848131 -2.644935e-02 -1.211097e-02 #> [249,] -0.0250173339 -2.102582e-02 -1.203359e-03 #> [250,] -0.0412070681  2.878174e-02 -3.231948e-02 #> [251,] -0.0223791803  3.820502e-02  4.877509e-02 #> [252,] -0.0026508256  6.878073e-03 -1.694598e-02 #> [253,]  0.0022635695 -4.660010e-02 -3.051479e-02 #> [254,] -0.0310788018  2.459840e-02 -2.716632e-03 #> [255,] -0.0392412572 -9.454527e-03 -1.079546e-02 #> [256,] -0.0122624468 -4.348477e-02 -2.849122e-02 #> [257,] -0.0392029011  3.673580e-02  2.401387e-02 #> [258,]  0.0131748912 -2.546252e-02  7.680290e-03 #> [259,] -0.0052440108 -4.086519e-02 -1.989539e-02 #> [260,]  0.0097453754  6.335734e-03  3.004749e-02 #> [261,]  0.0298328090  2.280405e-02 -1.201624e-02 #> [262,]  0.0242993464 -4.427036e-02 -3.776454e-02 #> [263,]  0.0467767697 -2.386628e-02 -4.335864e-02 #> [264,] -0.0444113135 -1.157363e-02  1.344331e-02 #> [265,]  0.0199388383  1.145387e-02  4.899851e-03 #> [266,]  0.0222760492 -2.663361e-02 -2.956107e-02 #> [267,]  0.0482019972 -5.546521e-03  1.598557e-02 #> [268,] -0.0062034270 -3.283619e-02 -2.899234e-02 #> [269,]  0.0179884742  3.434410e-02  2.661705e-02 #> [270,] -0.0016666973  2.807737e-02  7.585121e-03 #> [271,] -0.0369509361 -7.697356e-03  4.281208e-02 #> [272,] -0.0389772057 -3.596493e-02  4.217377e-03 #> [273,]  0.0217582253  4.144051e-02 -4.411354e-04 #> [274,] -0.0039795617 -6.714028e-03 -2.648989e-03 #> [275,] -0.0040027744 -4.147008e-02  3.994924e-02 #> [276,] -0.0252100952 -3.179607e-02  4.228412e-02 #> [277,] -0.0260198543  1.715398e-02  2.641614e-02 #> [278,]  0.0036594979 -1.740466e-02  4.165274e-02 #> [279,] -0.0153834191 -6.154371e-03 -8.826705e-05 #> [280,] -0.0153936563  3.352938e-02  3.228130e-02 #> [281,]  0.0066760563  3.554813e-03  3.932674e-02 #> [282,]  0.0428217589 -2.321333e-02  1.731362e-02 #> [283,]  0.0359568012 -2.806371e-02 -4.156599e-02 #> [284,]  0.0284178685 -1.125129e-02 -2.535150e-02 #> [285,]  0.0157947525  4.774582e-03  4.162187e-02 #> [286,]  0.0067502912  1.031262e-02  1.381409e-02 #> [287,] -0.0227620619 -8.767949e-03  1.945924e-02 #> [288,]  0.0356345365 -2.336387e-02 -1.548107e-02 #> [289,]  0.0194568714 -5.986653e-03 -2.720664e-03 #> [290,] -0.0082367483 -2.527578e-02  2.783154e-02 #> [291,]  0.0256606100  5.684780e-03 -1.167344e-02 #> [292,] -0.0289314437  2.386014e-02  4.063968e-02 #> [293,]  0.0167165421  2.264079e-02 -3.348219e-02 #> [294,]  0.0246609866 -1.745989e-03 -9.001625e-03 #> [295,]  0.0442919880 -4.697743e-02  1.940950e-02 #> [296,] -0.0351362764 -6.190349e-03  2.624619e-02 #> [297,] -0.0394620901  2.282712e-02  3.206745e-02 #> [298,] -0.0095372504 -4.750421e-02 -1.577218e-02 #> [299,] -0.0060365051 -3.391552e-02 -3.005664e-02 #> [300,]  0.0245002729 -1.960559e-02 -2.276955e-02 #> [301,] -0.0341258698  3.612065e-03  1.077191e-02 #> [302,]  0.0378875782 -2.879768e-03 -2.502405e-03 #> [303,]  0.0493627586 -1.160917e-03  3.772787e-02 #> [304,]  0.0438200423 -4.224137e-02 -4.972048e-02 #> [305,]  0.0479409811  3.014354e-02  3.874291e-02 #> [306,] -0.0372170412  1.189752e-03  4.220027e-02 #> [307,] -0.0445425876  1.177683e-02  2.713626e-02 #> [308,]  0.0347888250 -3.570988e-02 -2.770005e-02 #> [309,]  0.0230775382 -3.005946e-02  3.941449e-02 #> [310,]  0.0490263238 -1.363559e-02  3.332537e-03 #> [311,] -0.0122115753  3.585409e-03 -1.424389e-02 #> [312,]  0.0250296060 -3.249844e-02  4.219774e-02 #> [313,] -0.0332818319  7.494461e-03 -3.780077e-04 #> [314,] -0.0356689838 -1.561549e-02  2.618552e-02 #> [315,]  0.0437616044  2.748106e-02  3.602699e-02 #> [316,]  0.0409066749  7.252112e-03 -3.802825e-02 #> [317,]  0.0299123898  3.835307e-02  3.304868e-02 #> [318,]  0.0381772182 -4.017485e-02  2.830639e-02 #> [319,] -0.0396578943  2.082661e-02 -2.356037e-02 #> [320,]  0.0055896225 -4.536841e-02 -3.251191e-02 #> [321,]  0.0104021395  3.983337e-02 -7.482458e-03 #> [322,]  0.0268479078 -2.046103e-02  1.728910e-02 #> [323,]  0.0187878912  9.955562e-03 -3.866947e-02 #> [324,] -0.0159617424 -4.162090e-02 -2.992925e-02 #> [325,]  0.0133452800  1.262877e-02 -3.301808e-02 #> [326,] -0.0274410672  1.807809e-02  6.645374e-03 #> [327,]  0.0219067287  3.839458e-02 -1.500121e-02 #> [328,] -0.0177262414  1.920623e-02  1.136378e-02 #> [329,]  0.0114701733 -2.973645e-03 -1.682999e-02 #> [330,] -0.0276317285 -3.627890e-02 -3.086636e-02 #> [331,]  0.0189099878  2.531115e-02 -4.466704e-02 #> [332,]  0.0124666015 -2.165974e-02  1.600684e-02 #> [333,]  0.0169812954  4.020626e-02 -5.458934e-03 #> [334,] -0.0378901855 -1.255083e-02  3.393768e-03 #> [335,] -0.0161097038 -7.836413e-03  1.585014e-03 #> [336,] -0.0067666897  5.436135e-03 -2.092009e-02 #> [337,]  0.0092469468 -3.670947e-02  4.643310e-02 #> [338,] -0.0331507916 -2.513314e-02  2.690083e-02 #> [339,] -0.0006146387 -3.756081e-02  2.811939e-02 #> [340,]  0.0245606462  3.980431e-02 -3.309001e-02 #> [341,] -0.0378229271 -3.459597e-02 -1.708869e-03 #> [342,] -0.0122767020  4.271604e-02 -3.511011e-02 #> [343,] -0.0453672324 -7.897625e-03  6.592443e-03 #> [344,]  0.0061189950 -3.571250e-02 -1.999755e-02 #> [345,] -0.0219731480  7.030366e-03  4.611906e-02 #> [346,] -0.0215335082 -1.379323e-02 -9.842820e-03 #> [347,]  0.0077105954 -4.455672e-03 -1.869424e-02 #> [348,]  0.0047630362  4.320028e-03 -4.127390e-02 #> [349,] -0.0277419638  1.244168e-02 -1.062900e-02 #> [350,]  0.0471964790  9.374141e-03  2.048466e-02 #> [351,] -0.0136764089 -1.342988e-02 -3.895319e-02 #> [352,] -0.0402014994 -1.611467e-02  4.605984e-02 #> [353,] -0.0420707073 -4.028547e-02  1.419915e-03 #> [354,] -0.0485590968 -4.579203e-02  3.075363e-02 #> [355,] -0.0122644665  3.170862e-02 -7.554341e-03 #> [356,] -0.0261378356  9.502372e-03 -3.761549e-02 #> [357,] -0.0376238571 -9.332806e-03 -1.057898e-02 #> [358,] -0.0292970977 -3.493982e-02  4.681717e-03 #> [359,]  0.0023666020 -1.795966e-02  6.884452e-03 #> [360,]  0.0211908803 -1.894733e-02 -2.317482e-02 #> [361,] -0.0398905383 -1.402784e-02  3.112008e-02 #> [362,]  0.0249748567  1.290207e-02 -3.618474e-02 #> [363,] -0.0396012254  2.612731e-02  4.721989e-02 #> [364,]  0.0380786851 -4.482053e-02  2.466123e-02 #> [365,] -0.0058208612  4.855641e-02 -2.402000e-02 #> [366,]  0.0122504012  2.384517e-02  3.829150e-02 #> [367,] -0.0200945648  4.360736e-02 -4.258246e-02 #> [368,] -0.0227118198  4.735805e-02 -2.860262e-02 #> [369,]  0.0399813341 -2.473133e-02 -9.667856e-03 #> [370,]  0.0317369873  1.732120e-02  4.902979e-02 #> [371,] -0.0437110557 -1.853077e-02 -1.638077e-02 #> [372,] -0.0101894685  1.144685e-02 -1.339599e-02 #> [373,]  0.0390691745  2.782121e-02 -1.936421e-02 #> [374,]  0.0103816213  2.604611e-02 -4.428517e-02 #> [375,]  0.0136437392 -2.413758e-02 -3.808414e-02 #> [376,] -0.0006388123 -1.497372e-02 -4.703322e-02 #> [377,] -0.0441887991 -4.220667e-02 -2.573769e-02 #> [378,] -0.0337064095 -4.258247e-02  1.076627e-02 #> [379,] -0.0465702948  2.790292e-02 -4.291149e-02 #> [380,] -0.0255896111  2.044601e-02 -1.358779e-02 #> [381,] -0.0260629578 -3.661121e-02  2.472590e-02 #> [382,]  0.0449200979  2.642213e-02 -3.467630e-02 #> [383,] -0.0323711666 -3.552169e-02 -2.137445e-02 #> [384,] -0.0232043326 -1.040866e-02  1.737053e-02 #> [385,] -0.0444635089 -4.030726e-02 -4.218691e-02 #> [386,]  0.0014560674 -4.051596e-02  1.548752e-02 #> [387,] -0.0259912651  2.916617e-02 -4.877649e-03 #> [388,] -0.0486039246 -2.406548e-02  4.718884e-02 #> [389,]  0.0147767596  3.517648e-02  2.539332e-02 #> [390,]  0.0463814764 -2.586840e-02 -4.847059e-02"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Coordinates for a Sphere — sphere","title":"Generate Coordinates for a Sphere — sphere","text":"function generates coordinates sphere three-dimensional space.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Coordinates for a Sphere — sphere","text":"","code":"sphere(radius, resolution, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Coordinates for a Sphere — sphere","text":"radius radius sphere. resolution number points used approximate surface sphere. num_noise_dims number additional noise dimensions add coordinates. min_noise minimum value random noise added coordinates. max_noise maximum value random noise added coordinates.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Coordinates for a Sphere — sphere","text":"matrix containing Cartesian coordinates points sphere.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/sphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Coordinates for a Sphere — sphere","text":"","code":"# Generate coordinates for a sphere with radius 1 and resolution 100 sphere(radius = 1, resolution = 20, num_noise_dims = 3, min_noise = -0.05, max_noise = 0.05) #>                 [,1]          [,2]        [,3]          [,4]          [,5] #>   [1,]  0.000000e+00  0.000000e+00  1.00000000 -2.099807e-02  0.0280797721 #>   [2,]  0.000000e+00  0.000000e+00  1.00000000  1.613195e-02 -0.0121924175 #>   [3,]  0.000000e+00  0.000000e+00  1.00000000 -3.913759e-02 -0.0330291233 #>   [4,]  0.000000e+00  0.000000e+00  1.00000000 -4.824815e-02 -0.0417178093 #>   [5,]  0.000000e+00  0.000000e+00  1.00000000  3.391568e-02 -0.0480593848 #>   [6,]  0.000000e+00  0.000000e+00  1.00000000  3.214650e-02 -0.0453294148 #>   [7,]  0.000000e+00  0.000000e+00  1.00000000  3.760383e-02  0.0111828555 #>   [8,]  0.000000e+00  0.000000e+00  1.00000000 -1.995349e-02  0.0488918754 #>   [9,]  0.000000e+00  0.000000e+00  1.00000000 -1.495153e-02  0.0225352554 #>  [10,]  0.000000e+00  0.000000e+00  1.00000000 -1.867661e-03  0.0142654950 #>  [11,]  0.000000e+00  0.000000e+00  1.00000000 -3.196475e-02  0.0354762347 #>  [12,]  0.000000e+00  0.000000e+00  1.00000000  3.527836e-02 -0.0366188484 #>  [13,]  0.000000e+00  0.000000e+00  1.00000000  1.439069e-02  0.0448334731 #>  [14,]  0.000000e+00  0.000000e+00  1.00000000  4.063819e-02 -0.0409425216 #>  [15,]  0.000000e+00  0.000000e+00  1.00000000 -1.781973e-02  0.0004098609 #>  [16,]  0.000000e+00  0.000000e+00  1.00000000 -9.991877e-03  0.0466561069 #>  [17,]  0.000000e+00  0.000000e+00  1.00000000 -2.113383e-02 -0.0227826453 #>  [18,]  0.000000e+00  0.000000e+00  1.00000000  3.586941e-02  0.0292143598 #>  [19,]  0.000000e+00  0.000000e+00  1.00000000  2.959686e-02 -0.0174030380 #>  [20,]  0.000000e+00  0.000000e+00  1.00000000 -4.514771e-03  0.0270248232 #>  [21,]  1.645946e-01  0.000000e+00  0.98636130  5.790182e-03 -0.0245905064 #>  [22,]  1.556764e-01  5.344378e-02  0.98636130 -3.248872e-02  0.0374791581 #>  [23,]  1.298883e-01  1.010961e-01  0.98636130  4.831964e-02  0.0378769194 #>  [24,]  9.002471e-02  1.377931e-01  0.98636130 -1.425967e-02 -0.0288486092 #>  [25,]  4.040558e-02  1.595580e-01  0.98636130  1.630627e-02  0.0053544863 #>  [26,] -1.359211e-02  1.640324e-01  0.98636130 -1.170086e-02  0.0025114908 #>  [27,] -6.611689e-02  1.507313e-01  0.98636130 -1.013226e-02  0.0179689034 #>  [28,] -1.114769e-01  1.210962e-01  0.98636130  7.622374e-03  0.0287334990 #>  [29,] -1.447566e-01  7.833837e-02  0.98636130  7.560358e-03 -0.0135804157 #>  [30,] -1.623497e-01  2.709138e-02  0.98636130  4.796044e-02  0.0285090832 #>  [31,] -1.623497e-01 -2.709138e-02  0.98636130  1.840153e-02  0.0022062201 #>  [32,] -1.447566e-01 -7.833837e-02  0.98636130  4.024499e-02  0.0363343889 #>  [33,] -1.114769e-01 -1.210962e-01  0.98636130 -3.349629e-02  0.0110172283 #>  [34,] -6.611689e-02 -1.507313e-01  0.98636130 -1.285116e-02  0.0350364899 #>  [35,] -1.359211e-02 -1.640324e-01  0.98636130 -2.579287e-02  0.0099672439 #>  [36,]  4.040558e-02 -1.595580e-01  0.98636130 -4.225003e-02  0.0360482751 #>  [37,]  9.002471e-02 -1.377931e-01  0.98636130  4.538793e-02 -0.0305348763 #>  [38,]  1.298883e-01 -1.010961e-01  0.98636130  1.727609e-02  0.0032009949 #>  [39,]  1.556764e-01 -5.344378e-02  0.98636130 -1.929411e-02  0.0005195178 #>  [40,]  1.645946e-01 -4.031405e-17  0.98636130 -9.397555e-04 -0.0378959184 #>  [41,]  3.246995e-01  0.000000e+00  0.94581724 -3.038556e-02 -0.0028261860 #>  [42,]  3.071064e-01  1.054297e-01  0.94581724  2.764673e-02  0.0431825544 #>  [43,]  2.562335e-01  1.994345e-01  0.94581724 -1.372276e-02  0.0265758651 #>  [44,]  1.775938e-01  2.718275e-01  0.94581724  1.545207e-02  0.0248394041 #>  [45,]  7.970901e-02  3.147638e-01  0.94581724  2.456389e-02 -0.0138229773 #>  [46,] -2.681347e-02  3.235905e-01  0.94581724 -2.235940e-03 -0.0135592397 #>  [47,] -1.304303e-01  2.973511e-01  0.94581724 -2.622800e-02  0.0344451946 #>  [48,] -2.199130e-01  2.388892e-01  0.94581724 -2.280766e-02 -0.0084846190 #>  [49,] -2.855647e-01  1.545399e-01  0.94581724 -1.940838e-02 -0.0394349312 #>  [50,] -3.202710e-01  5.344378e-02  0.94581724 -4.755792e-02 -0.0480947239 #>  [51,] -3.202710e-01 -5.344378e-02  0.94581724 -2.520550e-02  0.0137550354 #>  [52,] -2.855647e-01 -1.545399e-01  0.94581724  3.518140e-02 -0.0354823546 #>  [53,] -2.199130e-01 -2.388892e-01  0.94581724 -1.064635e-02  0.0251701997 #>  [54,] -1.304303e-01 -2.973511e-01  0.94581724 -1.871709e-02  0.0090644483 #>  [55,] -2.681347e-02 -3.235905e-01  0.94581724 -1.241584e-03  0.0441642432 #>  [56,]  7.970901e-02 -3.147638e-01  0.94581724 -3.620774e-03  0.0274463836 #>  [57,]  1.775938e-01 -2.718275e-01  0.94581724  2.281883e-02 -0.0398637896 #>  [58,]  2.562335e-01 -1.994345e-01  0.94581724 -2.209607e-02 -0.0241649840 #>  [59,]  3.071064e-01 -1.054297e-01  0.94581724 -4.388664e-02  0.0363729670 #>  [60,]  3.246995e-01 -7.952843e-17  0.94581724 -4.281530e-02  0.0350432127 #>  [61,]  4.759474e-01  0.000000e+00  0.87947375 -3.661060e-02  0.0313538057 #>  [62,]  4.501593e-01  1.545399e-01  0.87947375 -2.223650e-02  0.0418471035 #>  [63,]  3.755894e-01  2.923329e-01  0.87947375 -4.125096e-02  0.0279612498 #>  [64,]  2.603185e-01  3.984472e-01  0.87947375 -4.688179e-02  0.0237663522 #>  [65,]  1.168382e-01  4.613835e-01  0.87947375 -2.623198e-02  0.0020727467 #>  [66,] -3.930342e-02  4.743218e-01  0.87947375 -4.070112e-02 -0.0223322747 #>  [67,] -1.911859e-01  4.358599e-01  0.87947375  4.412034e-02 -0.0498677238 #>  [68,] -3.223504e-01  3.501659e-01  0.87947375  1.414885e-03 -0.0217301269 #>  [69,] -4.185832e-01  2.265259e-01  0.87947375 -1.894294e-02  0.0013216135 #>  [70,] -4.694561e-01  7.833837e-02  0.87947375 -3.722722e-02  0.0313574036 #>  [71,] -4.694561e-01 -7.833837e-02  0.87947375  6.057399e-03 -0.0030314952 #>  [72,] -4.185832e-01 -2.265259e-01  0.87947375 -1.173406e-02 -0.0113520778 #>  [73,] -3.223504e-01 -3.501659e-01  0.87947375  8.456683e-03  0.0259533292 #>  [74,] -1.911859e-01 -4.358599e-01  0.87947375 -3.458896e-03  0.0498913975 #>  [75,] -3.930342e-02 -4.743218e-01  0.87947375  1.265525e-02  0.0379498681 #>  [76,]  1.168382e-01 -4.613835e-01  0.87947375 -1.022387e-02  0.0459555196 #>  [77,]  2.603185e-01 -3.984472e-01  0.87947375 -2.665104e-02  0.0001875577 #>  [78,]  3.755894e-01 -2.923329e-01  0.87947375  3.598179e-02 -0.0050635456 #>  [79,]  4.501593e-01 -1.545399e-01  0.87947375 -4.704363e-02  0.0130623515 #>  [80,]  4.759474e-01 -1.165735e-16  0.87947375  1.688001e-02 -0.0168525227 #>  [81,]  6.142127e-01  0.000000e+00  0.78914051 -1.821828e-02  0.0421744693 #>  [82,]  5.809330e-01  1.994345e-01  0.78914051 -2.292980e-02  0.0359327714 #>  [83,]  4.847001e-01  3.772573e-01  0.78914051 -3.586433e-02 -0.0209681712 #>  [84,]  3.359425e-01  5.141983e-01  0.78914051  1.105405e-02 -0.0187252526 #>  [85,]  1.507803e-01  5.954180e-01  0.78914051  2.475721e-02 -0.0430619818 #>  [86,] -5.072128e-02  6.121149e-01  0.78914051  1.364248e-02 -0.0134724254 #>  [87,] -2.467264e-01  5.624796e-01  0.78914051 -3.149454e-02  0.0459288234 #>  [88,] -4.159950e-01  4.518910e-01  0.78914051  2.705457e-02 -0.0251172174 #>  [89,] -5.401840e-01  2.923329e-01  0.78914051  2.094090e-02 -0.0123699499 #>  [90,] -6.058357e-01  1.010961e-01  0.78914051  3.442369e-02 -0.0424742981 #>  [91,] -6.058357e-01 -1.010961e-01  0.78914051 -3.187770e-02 -0.0275251617 #>  [92,] -5.401840e-01 -2.923329e-01  0.78914051  4.541255e-02 -0.0035650667 #>  [93,] -4.159950e-01 -4.518910e-01  0.78914051 -4.690885e-02 -0.0429790955 #>  [94,] -2.467264e-01 -5.624796e-01  0.78914051  2.711215e-02  0.0390591999 #>  [95,] -5.072128e-02 -6.121149e-01  0.78914051 -2.472351e-02  0.0489502125 #>  [96,]  1.507803e-01 -5.954180e-01  0.78914051  1.218859e-02  0.0404855302 #>  [97,]  3.359425e-01 -5.141983e-01  0.78914051 -4.152191e-02 -0.0375176969 #>  [98,]  4.847001e-01 -3.772573e-01  0.78914051 -1.804215e-02 -0.0254410411 #>  [99,]  5.809330e-01 -1.994345e-01  0.78914051  3.710539e-02 -0.0317330339 #> [100,]  6.142127e-01 -1.504387e-16  0.78914051 -3.078041e-02 -0.0238184077 #> [101,]  7.357239e-01  0.000000e+00  0.67728157  2.244261e-02  0.0137804546 #> [102,]  6.958604e-01  2.388892e-01  0.67728157 -4.725582e-02  0.0378008378 #> [103,]  5.805895e-01  4.518910e-01  0.67728157  2.571498e-02  0.0433688580 #> [104,]  4.024028e-01  6.159234e-01  0.67728157 -3.528439e-03 -0.0109652535 #> [105,]  1.806095e-01  7.132110e-01  0.67728157  3.206485e-02  0.0008206311 #> [106,] -6.075560e-02  7.332110e-01  0.67728157 -8.738265e-03 -0.0085780721 #> [107,] -2.955369e-01  6.737563e-01  0.67728157 -2.291081e-02  0.0008441911 #> [108,] -4.982922e-01  5.412897e-01  0.67728157 -1.376853e-02  0.0296755642 #> [109,] -6.470499e-01  3.501659e-01  0.67728157  4.182947e-03  0.0448833886 #> [110,] -7.256896e-01  1.210962e-01  0.67728157 -1.044516e-02 -0.0136083371 #> [111,] -7.256896e-01 -1.210962e-01  0.67728157 -8.396360e-03  0.0301518152 #> [112,] -6.470499e-01 -3.501659e-01  0.67728157  5.215994e-03  0.0270571755 #> [113,] -4.982922e-01 -5.412897e-01  0.67728157  1.607129e-03  0.0061548268 #> [114,] -2.955369e-01 -6.737563e-01  0.67728157  3.557785e-02 -0.0118858161 #> [115,] -6.075560e-02 -7.332110e-01  0.67728157 -1.339833e-02  0.0166470921 #> [116,]  1.806095e-01 -7.132110e-01  0.67728157 -2.824950e-02  0.0074348239 #> [117,]  4.024028e-01 -6.159234e-01  0.67728157 -1.283247e-03 -0.0017691261 #> [118,]  5.805895e-01 -4.518910e-01  0.67728157 -1.005237e-02  0.0027092509 #> [119,]  6.958604e-01 -2.388892e-01  0.67728157 -3.412011e-02 -0.0423002261 #> [120,]  7.357239e-01 -1.802004e-16  0.67728157 -3.609985e-02 -0.0224883411 #> [121,]  8.371665e-01  0.000000e+00  0.54694816  2.975808e-02 -0.0146759835 #> [122,]  7.918065e-01  2.718275e-01  0.54694816  1.063481e-02  0.0422295440 #> [123,]  6.606420e-01  5.141983e-01  0.54694816  1.622648e-02 -0.0258545735 #> [124,]  4.578867e-01  7.008477e-01  0.54694816 -4.164142e-02 -0.0477003537 #> [125,]  2.055122e-01  8.115494e-01  0.54694816 -2.803801e-02 -0.0030060765 #> [126,] -6.913266e-02  8.343071e-01  0.54694816 -1.398614e-02  0.0265506459 #> [127,] -3.362859e-01  7.666547e-01  0.54694816  6.640408e-03 -0.0078081354 #> [128,] -5.669974e-01  6.159234e-01  0.54694816  2.090000e-02  0.0019698547 #> [129,] -7.362659e-01  3.984472e-01  0.54694816 -1.493015e-02 -0.0443911214 #> [130,] -8.257486e-01  1.377931e-01  0.54694816 -3.065316e-02  0.0091306838 #> [131,] -8.257486e-01 -1.377931e-01  0.54694816 -2.076540e-02  0.0214349334 #> [132,] -7.362659e-01 -3.984472e-01  0.54694816 -1.967559e-03 -0.0486329470 #> [133,] -5.669974e-01 -6.159234e-01  0.54694816 -1.897951e-02  0.0322591547 #> [134,] -3.362859e-01 -7.666547e-01  0.54694816  3.352277e-02  0.0401585845 #> [135,] -6.913266e-02 -8.343071e-01  0.54694816 -2.913357e-02  0.0152198908 #> [136,]  2.055122e-01 -8.115494e-01  0.54694816  1.018786e-02  0.0395091036 #> [137,]  4.578867e-01 -7.008477e-01  0.54694816 -3.809335e-02  0.0002048393 #> [138,]  6.606420e-01 -5.141983e-01  0.54694816 -4.270168e-02  0.0185578629 #> [139,]  7.918065e-01 -2.718275e-01  0.54694816  2.503381e-02  0.0142491821 #> [140,]  8.371665e-01 -2.050466e-16  0.54694816 -2.009889e-02  0.0464488313 #> [141,]  9.157733e-01  0.000000e+00  0.40169542  4.631907e-02 -0.0350199315 #> [142,]  8.661542e-01  2.973511e-01  0.40169542 -4.460922e-02 -0.0302801593 #> [143,]  7.226738e-01  5.624796e-01  0.40169542  4.727203e-02  0.0058469320 #> [144,]  5.008805e-01  7.666547e-01  0.40169542 -3.123575e-02  0.0041982303 #> [145,]  2.248091e-01  8.877509e-01  0.40169542 -3.287764e-02 -0.0039280682 #> [146,] -7.562396e-02  9.126455e-01  0.40169542 -4.616897e-02  0.0283623309 #> [147,] -3.678620e-01  8.386408e-01  0.40169542  3.662017e-02  0.0396664866 #> [148,] -6.202364e-01  6.737563e-01  0.40169542 -4.527129e-02 -0.0389704145 #> [149,] -8.053986e-01  4.358599e-01  0.40169542  4.233678e-02  0.0398126647 #> [150,] -9.032834e-01  1.507313e-01  0.40169542  3.484225e-02 -0.0051808101 #> [151,] -9.032834e-01 -1.507313e-01  0.40169542  1.476177e-03  0.0081318312 #> [152,] -8.053986e-01 -4.358599e-01  0.40169542 -7.141919e-03  0.0366609986 #> [153,] -6.202364e-01 -6.737563e-01  0.40169542 -5.994058e-03 -0.0167757102 #> [154,] -3.678620e-01 -8.386408e-01  0.40169542  1.278608e-02 -0.0376606197 #> [155,] -7.562396e-02 -9.126455e-01  0.40169542  2.373553e-02  0.0272550233 #> [156,]  2.248091e-01 -8.877509e-01  0.40169542  3.552742e-02  0.0264171684 #> [157,]  5.008805e-01 -7.666547e-01  0.40169542  2.582292e-02  0.0118820909 #> [158,]  7.226738e-01 -5.624796e-01  0.40169542  3.927075e-02  0.0411726092 #> [159,]  8.661542e-01 -2.973511e-01  0.40169542  4.792449e-04 -0.0276079002 #> [160,]  9.157733e-01 -2.242998e-16  0.40169542  1.735247e-02 -0.0010622081 #> [161,]  9.694003e-01  0.000000e+00  0.24548549 -2.700335e-02 -0.0479064680 #> [162,]  9.168755e-01  3.147638e-01  0.24548549  3.081018e-02 -0.0040199017 #> [163,]  7.649930e-01  5.954180e-01  0.24548549 -3.437978e-02  0.0245137195 #> [164,]  5.302117e-01  8.115494e-01  0.24548549  2.427493e-02  0.0441416510 #> [165,]  2.379737e-01  9.397369e-01  0.24548549 -4.724592e-02  0.0121284076 #> [166,] -8.005244e-02  9.660893e-01  0.24548549 -1.606065e-02  0.0199902450 #> [167,] -3.894037e-01  8.877509e-01  0.24548549  2.510918e-02  0.0337024454 #> [168,] -6.565569e-01  7.132110e-01  0.24548549 -1.421421e-02  0.0400298420 #> [169,] -8.525621e-01  4.613835e-01  0.24548549  1.608046e-02  0.0106446010 #> [170,] -9.561789e-01  1.595580e-01  0.24548549 -4.660045e-02  0.0051058598 #> [171,] -9.561789e-01 -1.595580e-01  0.24548549  3.924726e-02  0.0292815140 #> [172,] -8.525621e-01 -4.613835e-01  0.24548549  2.484573e-02 -0.0258847094 #> [173,] -6.565569e-01 -7.132110e-01  0.24548549  2.926683e-02  0.0478834353 #> [174,] -3.894037e-01 -8.877509e-01  0.24548549 -4.891862e-02  0.0407180830 #> [175,] -8.005244e-02 -9.660893e-01  0.24548549 -1.354476e-02  0.0459258026 #> [176,]  2.379737e-01 -9.397369e-01  0.24548549 -2.875110e-02 -0.0062494586 #> [177,]  5.302117e-01 -8.115494e-01  0.24548549  5.290703e-03 -0.0109179499 #> [178,]  7.649930e-01 -5.954180e-01  0.24548549 -9.127117e-03  0.0346075289 #> [179,]  9.168755e-01 -3.147638e-01  0.24548549  3.671608e-02  0.0066255765 #> [180,]  9.694003e-01 -2.374346e-16  0.24548549 -3.625103e-02  0.0016393725 #> [181,]  9.965845e-01  0.000000e+00  0.08257935 -4.571816e-02  0.0026284708 #> [182,]  9.425868e-01  3.235905e-01  0.08257935  1.720678e-02  0.0104732386 #> [183,]  7.864452e-01  6.121149e-01  0.08257935 -2.905942e-02 -0.0264232928 #> [184,]  5.450801e-01  8.343071e-01  0.08257935  2.907211e-02  0.0170200895 #> [185,]  2.446470e-01  9.660893e-01  0.08257935  4.659122e-02 -0.0400309947 #> [186,] -8.229730e-02  9.931807e-01  0.08257935  3.951857e-02  0.0281232769 #> [187,] -4.003234e-01  9.126455e-01  0.08257935 -3.559896e-02 -0.0350281331 #> [188,] -6.749683e-01  7.332110e-01  0.08257935  1.793591e-02 -0.0190916865 #> [189,] -8.764699e-01  4.743218e-01  0.08257935 -7.551380e-03  0.0492332134 #> [190,] -9.829924e-01  1.640324e-01  0.08257935 -1.094093e-03  0.0387078005 #> [191,] -9.829924e-01 -1.640324e-01  0.08257935  3.492902e-02 -0.0367262162 #> [192,] -8.764699e-01 -4.743218e-01  0.08257935 -1.758037e-02 -0.0425536354 #> [193,] -6.749683e-01 -7.332110e-01  0.08257935  7.119553e-03  0.0339544867 #> [194,] -4.003234e-01 -9.126455e-01  0.08257935 -1.837746e-02 -0.0029737594 #> [195,] -8.229730e-02 -9.931807e-01  0.08257935  3.158287e-04 -0.0283511394 #> [196,]  2.446470e-01 -9.660893e-01  0.08257935 -4.807500e-02 -0.0194406254 #> [197,]  5.450801e-01 -8.343071e-01  0.08257935  2.339810e-02 -0.0096749337 #> [198,]  7.864452e-01 -6.121149e-01  0.08257935 -1.495110e-03  0.0040005547 #> [199,]  9.425868e-01 -3.235905e-01  0.08257935 -2.254169e-02 -0.0153989097 #> [200,]  9.965845e-01 -2.440928e-16  0.08257935  3.576802e-02 -0.0277423693 #> [201,]  9.965845e-01  0.000000e+00 -0.08257935 -9.320607e-03 -0.0024594139 #> [202,]  9.425868e-01  3.235905e-01 -0.08257935  8.885773e-03 -0.0434584982 #> [203,]  7.864452e-01  6.121149e-01 -0.08257935 -8.807094e-03 -0.0491912927 #> [204,]  5.450801e-01  8.343071e-01 -0.08257935 -2.369820e-06 -0.0039507252 #> [205,]  2.446470e-01  9.660893e-01 -0.08257935 -2.187817e-02  0.0339367461 #> [206,] -8.229730e-02  9.931807e-01 -0.08257935  1.617901e-02  0.0351696699 #> [207,] -4.003234e-01  9.126455e-01 -0.08257935  2.396105e-02 -0.0346562735 #> [208,] -6.749683e-01  7.332110e-01 -0.08257935 -1.396856e-02  0.0353590870 #> [209,] -8.764699e-01  4.743218e-01 -0.08257935 -3.882461e-02  0.0341653890 #> [210,] -9.829924e-01  1.640324e-01 -0.08257935  8.309654e-03  0.0486927935 #> [211,] -9.829924e-01 -1.640324e-01 -0.08257935  3.594191e-02 -0.0186409093 #> [212,] -8.764699e-01 -4.743218e-01 -0.08257935  1.535813e-02  0.0046425507 #> [213,] -6.749683e-01 -7.332110e-01 -0.08257935 -3.055588e-02  0.0059940758 #> [214,] -4.003234e-01 -9.126455e-01 -0.08257935  3.756269e-02  0.0254501086 #> [215,] -8.229730e-02 -9.931807e-01 -0.08257935  2.099368e-02  0.0138193422 #> [216,]  2.446470e-01 -9.660893e-01 -0.08257935  1.577430e-02  0.0498462459 #> [217,]  5.450801e-01 -8.343071e-01 -0.08257935 -2.850424e-02  0.0371268279 #> [218,]  7.864452e-01 -6.121149e-01 -0.08257935  2.602364e-02  0.0095759856 #> [219,]  9.425868e-01 -3.235905e-01 -0.08257935 -2.892651e-02 -0.0237916254 #> [220,]  9.965845e-01 -2.440928e-16 -0.08257935 -2.526338e-02 -0.0027620777 #> [221,]  9.694003e-01  0.000000e+00 -0.24548549 -5.968637e-03 -0.0466033558 #> [222,]  9.168755e-01  3.147638e-01 -0.24548549  4.335062e-02 -0.0309553012 #> [223,]  7.649930e-01  5.954180e-01 -0.24548549 -5.219566e-03  0.0308160886 #> [224,]  5.302117e-01  8.115494e-01 -0.24548549 -3.497633e-03 -0.0250533162 #> [225,]  2.379737e-01  9.397369e-01 -0.24548549  3.290750e-04  0.0242647322 #> [226,] -8.005244e-02  9.660893e-01 -0.24548549  1.658156e-02  0.0290650770 #> [227,] -3.894037e-01  8.877509e-01 -0.24548549  1.689639e-02  0.0302366883 #> [228,] -6.565569e-01  7.132110e-01 -0.24548549  4.747614e-02 -0.0317684560 #> [229,] -8.525621e-01  4.613835e-01 -0.24548549  4.842098e-02 -0.0017692390 #> [230,] -9.561789e-01  1.595580e-01 -0.24548549  1.546469e-02  0.0237067814 #> [231,] -9.561789e-01 -1.595580e-01 -0.24548549  2.307396e-02 -0.0135680469 #> [232,] -8.525621e-01 -4.613835e-01 -0.24548549 -2.990679e-02  0.0100358631 #> [233,] -6.565569e-01 -7.132110e-01 -0.24548549  2.042425e-02 -0.0023742913 #> [234,] -3.894037e-01 -8.877509e-01 -0.24548549 -1.374456e-02 -0.0404959604 #> [235,] -8.005244e-02 -9.660893e-01 -0.24548549 -3.528680e-02  0.0449451298 #> [236,]  2.379737e-01 -9.397369e-01 -0.24548549  3.851849e-02  0.0032331870 #> [237,]  5.302117e-01 -8.115494e-01 -0.24548549 -4.833921e-02  0.0189601859 #> [238,]  7.649930e-01 -5.954180e-01 -0.24548549  4.447897e-03  0.0108713281 #> [239,]  9.168755e-01 -3.147638e-01 -0.24548549 -4.580795e-02  0.0378699395 #> [240,]  9.694003e-01 -2.374346e-16 -0.24548549  4.712559e-02 -0.0052085525 #> [241,]  9.157733e-01  0.000000e+00 -0.40169542 -9.925555e-03  0.0381767166 #> [242,]  8.661542e-01  2.973511e-01 -0.40169542  2.840028e-02 -0.0304293933 #> [243,]  7.226738e-01  5.624796e-01 -0.40169542  3.997728e-02  0.0080539073 #> [244,]  5.008805e-01  7.666547e-01 -0.40169542  2.822383e-02  0.0203363427 #> [245,]  2.248091e-01  8.877509e-01 -0.40169542 -1.862615e-02 -0.0178254703 #> [246,] -7.562396e-02  9.126455e-01 -0.40169542  4.691692e-02 -0.0281832897 #> [247,] -3.678620e-01  8.386408e-01 -0.40169542  3.840268e-02  0.0237727214 #> [248,] -6.202364e-01  6.737563e-01 -0.40169542  1.032877e-02 -0.0367811327 #> [249,] -8.053986e-01  4.358599e-01 -0.40169542  8.116701e-03 -0.0167824472 #> [250,] -9.032834e-01  1.507313e-01 -0.40169542  1.446084e-02 -0.0095084150 #> [251,] -9.032834e-01 -1.507313e-01 -0.40169542  7.370091e-04  0.0044107034 #> [252,] -8.053986e-01 -4.358599e-01 -0.40169542 -3.593937e-02 -0.0374312584 #> [253,] -6.202364e-01 -6.737563e-01 -0.40169542 -2.589176e-02 -0.0376135420 #> [254,] -3.678620e-01 -8.386408e-01 -0.40169542  2.379276e-02  0.0465826655 #> [255,] -7.562396e-02 -9.126455e-01 -0.40169542  2.767747e-02  0.0496049841 #> [256,]  2.248091e-01 -8.877509e-01 -0.40169542 -2.651068e-03  0.0028885404 #> [257,]  5.008805e-01 -7.666547e-01 -0.40169542  3.622647e-02  0.0078669869 #> [258,]  7.226738e-01 -5.624796e-01 -0.40169542  4.699369e-02 -0.0438675902 #> [259,]  8.661542e-01 -2.973511e-01 -0.40169542 -7.581202e-03 -0.0208439457 #> [260,]  9.157733e-01 -2.242998e-16 -0.40169542 -3.301410e-02  0.0376516746 #> [261,]  8.371665e-01  0.000000e+00 -0.54694816  7.923903e-03 -0.0286852656 #> [262,]  7.918065e-01  2.718275e-01 -0.54694816 -2.329295e-02  0.0055488282 #> [263,]  6.606420e-01  5.141983e-01 -0.54694816  1.736769e-02 -0.0177392087 #> [264,]  4.578867e-01  7.008477e-01 -0.54694816 -4.115406e-02 -0.0289964651 #> [265,]  2.055122e-01  8.115494e-01 -0.54694816 -3.049952e-02 -0.0113598105 #> [266,] -6.913266e-02  8.343071e-01 -0.54694816  3.355744e-02  0.0010038246 #> [267,] -3.362859e-01  7.666547e-01 -0.54694816 -4.913579e-02  0.0140679195 #> [268,] -5.669974e-01  6.159234e-01 -0.54694816 -1.417915e-02  0.0083117526 #> [269,] -7.362659e-01  3.984472e-01 -0.54694816 -6.221605e-03  0.0190250016 #> [270,] -8.257486e-01  1.377931e-01 -0.54694816 -7.042451e-03 -0.0377528639 #> [271,] -8.257486e-01 -1.377931e-01 -0.54694816 -2.106900e-02 -0.0200291937 #> [272,] -7.362659e-01 -3.984472e-01 -0.54694816  9.207022e-04  0.0407539491 #> [273,] -5.669974e-01 -6.159234e-01 -0.54694816 -2.243683e-02  0.0396335109 #> [274,] -3.362859e-01 -7.666547e-01 -0.54694816 -3.878158e-02  0.0103357211 #> [275,] -6.913266e-02 -8.343071e-01 -0.54694816  4.445817e-02  0.0322253232 #> [276,]  2.055122e-01 -8.115494e-01 -0.54694816  2.532280e-02  0.0107373370 #> [277,]  4.578867e-01 -7.008477e-01 -0.54694816  4.759618e-02  0.0182523262 #> [278,]  6.606420e-01 -5.141983e-01 -0.54694816 -1.209271e-02 -0.0095809901 #> [279,]  7.918065e-01 -2.718275e-01 -0.54694816 -3.342596e-02  0.0046864697 #> [280,]  8.371665e-01 -2.050466e-16 -0.54694816  4.841230e-02 -0.0068546325 #> [281,]  7.357239e-01  0.000000e+00 -0.67728157 -4.354098e-02 -0.0481068782 #> [282,]  6.958604e-01  2.388892e-01 -0.67728157  2.017294e-02  0.0104372159 #> [283,]  5.805895e-01  4.518910e-01 -0.67728157  2.603287e-02  0.0093141185 #> [284,]  4.024028e-01  6.159234e-01 -0.67728157 -3.991330e-02 -0.0322931050 #> [285,]  1.806095e-01  7.132110e-01 -0.67728157 -2.804533e-02  0.0276243568 #> [286,] -6.075560e-02  7.332110e-01 -0.67728157 -4.062016e-02 -0.0156757499 #> [287,] -2.955369e-01  6.737563e-01 -0.67728157 -4.483700e-02 -0.0220252863 #> [288,] -4.982922e-01  5.412897e-01 -0.67728157  1.925468e-02  0.0144242952 #> [289,] -6.470499e-01  3.501659e-01 -0.67728157  6.002385e-04  0.0436351998 #> [290,] -7.256896e-01  1.210962e-01 -0.67728157 -8.938643e-03  0.0278154743 #> [291,] -7.256896e-01 -1.210962e-01 -0.67728157  3.478389e-02  0.0304685674 #> [292,] -6.470499e-01 -3.501659e-01 -0.67728157 -4.124806e-02 -0.0032621220 #> [293,] -4.982922e-01 -5.412897e-01 -0.67728157  2.494363e-02  0.0213185854 #> [294,] -2.955369e-01 -6.737563e-01 -0.67728157 -6.416604e-03  0.0272414592 #> [295,] -6.075560e-02 -7.332110e-01 -0.67728157 -4.458165e-02 -0.0119070909 #> [296,]  1.806095e-01 -7.132110e-01 -0.67728157  3.483997e-02  0.0394971843 #> [297,]  4.024028e-01 -6.159234e-01 -0.67728157  1.774499e-02  0.0157238287 #> [298,]  5.805895e-01 -4.518910e-01 -0.67728157  3.123099e-02  0.0073775683 #> [299,]  6.958604e-01 -2.388892e-01 -0.67728157  3.353982e-02 -0.0459219912 #> [300,]  7.357239e-01 -1.802004e-16 -0.67728157 -1.069783e-03 -0.0226348604 #> [301,]  6.142127e-01  0.000000e+00 -0.78914051  3.889259e-02  0.0118887408 #> [302,]  5.809330e-01  1.994345e-01 -0.78914051 -1.520787e-02 -0.0202879455 #> [303,]  4.847001e-01  3.772573e-01 -0.78914051 -3.292522e-02  0.0085334935 #> [304,]  3.359425e-01  5.141983e-01 -0.78914051  1.839855e-02  0.0189687931 #> [305,]  1.507803e-01  5.954180e-01 -0.78914051 -4.215862e-02  0.0439416778 #> [306,] -5.072128e-02  6.121149e-01 -0.78914051  1.656574e-02 -0.0255372126 #> [307,] -2.467264e-01  5.624796e-01 -0.78914051  1.633445e-02  0.0078683428 #> [308,] -4.159950e-01  4.518910e-01 -0.78914051  3.362518e-02  0.0301495977 #> [309,] -5.401840e-01  2.923329e-01 -0.78914051 -4.571140e-02  0.0005122316 #> [310,] -6.058357e-01  1.010961e-01 -0.78914051  4.595713e-02  0.0325653430 #> [311,] -6.058357e-01 -1.010961e-01 -0.78914051 -1.712658e-02 -0.0405002255 #> [312,] -5.401840e-01 -2.923329e-01 -0.78914051  4.374033e-02  0.0318704513 #> [313,] -4.159950e-01 -4.518910e-01 -0.78914051 -2.611038e-03 -0.0301355670 #> [314,] -2.467264e-01 -5.624796e-01 -0.78914051  2.269044e-02  0.0292440554 #> [315,] -5.072128e-02 -6.121149e-01 -0.78914051  1.636613e-02  0.0236358887 #> [316,]  1.507803e-01 -5.954180e-01 -0.78914051  3.999788e-02 -0.0342380172 #> [317,]  3.359425e-01 -5.141983e-01 -0.78914051 -1.949816e-02  0.0451731122 #> [318,]  4.847001e-01 -3.772573e-01 -0.78914051  3.885122e-02 -0.0208861045 #> [319,]  5.809330e-01 -1.994345e-01 -0.78914051  2.003334e-03 -0.0479550461 #> [320,]  6.142127e-01 -1.504387e-16 -0.78914051 -3.430801e-02  0.0238272365 #> [321,]  4.759474e-01  0.000000e+00 -0.87947375 -3.413659e-02  0.0468909115 #> [322,]  4.501593e-01  1.545399e-01 -0.87947375  9.335427e-03 -0.0235861135 #> [323,]  3.755894e-01  2.923329e-01 -0.87947375  3.766894e-02 -0.0177708502 #> [324,]  2.603185e-01  3.984472e-01 -0.87947375  4.145389e-02  0.0121002652 #> [325,]  1.168382e-01  4.613835e-01 -0.87947375  2.446222e-02  0.0058167164 #> [326,] -3.930342e-02  4.743218e-01 -0.87947375  3.743208e-03  0.0087907006 #> [327,] -1.911859e-01  4.358599e-01 -0.87947375  4.517774e-02 -0.0155490278 #> [328,] -3.223504e-01  3.501659e-01 -0.87947375 -1.070952e-02 -0.0419516760 #> [329,] -4.185832e-01  2.265259e-01 -0.87947375  4.002746e-02  0.0230809814 #> [330,] -4.694561e-01  7.833837e-02 -0.87947375 -4.081297e-02 -0.0226636962 #> [331,] -4.694561e-01 -7.833837e-02 -0.87947375  3.968569e-02  0.0375408654 #> [332,] -4.185832e-01 -2.265259e-01 -0.87947375 -1.157779e-02  0.0211497325 #> [333,] -3.223504e-01 -3.501659e-01 -0.87947375  1.170740e-02 -0.0144789500 #> [334,] -1.911859e-01 -4.358599e-01 -0.87947375  1.831581e-02 -0.0404549389 #> [335,] -3.930342e-02 -4.743218e-01 -0.87947375  9.588638e-03  0.0257775217 #> [336,]  1.168382e-01 -4.613835e-01 -0.87947375 -4.574251e-02 -0.0257210549 #> [337,]  2.603185e-01 -3.984472e-01 -0.87947375 -2.341394e-02 -0.0336559628 #> [338,]  3.755894e-01 -2.923329e-01 -0.87947375  3.973561e-02 -0.0225065942 #> [339,]  4.501593e-01 -1.545399e-01 -0.87947375 -1.540693e-02 -0.0003932666 #> [340,]  4.759474e-01 -1.165735e-16 -0.87947375  3.312627e-02 -0.0049031496 #> [341,]  3.246995e-01  0.000000e+00 -0.94581724 -4.982232e-02  0.0040581789 #> [342,]  3.071064e-01  1.054297e-01 -0.94581724 -8.464566e-04  0.0157605133 #> [343,]  2.562335e-01  1.994345e-01 -0.94581724 -1.266126e-02  0.0346560197 #> [344,]  1.775938e-01  2.718275e-01 -0.94581724 -2.533797e-02  0.0299988588 #> [345,]  7.970901e-02  3.147638e-01 -0.94581724 -4.118392e-02 -0.0375437240 #> [346,] -2.681347e-02  3.235905e-01 -0.94581724  4.155776e-03  0.0456036761 #> [347,] -1.304303e-01  2.973511e-01 -0.94581724  1.402479e-02  0.0035671920 #> [348,] -2.199130e-01  2.388892e-01 -0.94581724  2.530704e-02  0.0129344609 #> [349,] -2.855647e-01  1.545399e-01 -0.94581724 -2.116601e-02 -0.0052698983 #> [350,] -3.202710e-01  5.344378e-02 -0.94581724  9.327792e-04  0.0295750235 #> [351,] -3.202710e-01 -5.344378e-02 -0.94581724 -3.258958e-02 -0.0169425233 #> [352,] -2.855647e-01 -1.545399e-01 -0.94581724 -1.009954e-03  0.0081031180 #> [353,] -2.199130e-01 -2.388892e-01 -0.94581724  1.965206e-02  0.0005213174 #> [354,] -1.304303e-01 -2.973511e-01 -0.94581724  1.579541e-02 -0.0186029508 #> [355,] -2.681347e-02 -3.235905e-01 -0.94581724 -3.144355e-02  0.0193202520 #> [356,]  7.970901e-02 -3.147638e-01 -0.94581724 -7.118557e-03 -0.0117970928 #> [357,]  1.775938e-01 -2.718275e-01 -0.94581724 -2.984907e-02  0.0384177311 #> [358,]  2.562335e-01 -1.994345e-01 -0.94581724  3.363478e-02  0.0433963194 #> [359,]  3.071064e-01 -1.054297e-01 -0.94581724 -3.837031e-02 -0.0390575929 #> [360,]  3.246995e-01 -7.952843e-17 -0.94581724 -1.007004e-02  0.0171533582 #> [361,]  1.645946e-01  0.000000e+00 -0.98636130 -4.066879e-02 -0.0465612458 #> [362,]  1.556764e-01  5.344378e-02 -0.98636130 -9.733680e-03 -0.0346247125 #> [363,]  1.298883e-01  1.010961e-01 -0.98636130 -4.813094e-03  0.0416392289 #> [364,]  9.002471e-02  1.377931e-01 -0.98636130  1.783845e-02 -0.0049372797 #> [365,]  4.040558e-02  1.595580e-01 -0.98636130 -1.307484e-02  0.0185919262 #> [366,] -1.359211e-02  1.640324e-01 -0.98636130 -6.667444e-03 -0.0045117962 #> [367,] -6.611689e-02  1.507313e-01 -0.98636130 -3.290617e-02  0.0461717237 #> [368,] -1.114769e-01  1.210962e-01 -0.98636130 -8.257724e-03 -0.0122553712 #> [369,] -1.447566e-01  7.833837e-02 -0.98636130 -2.379192e-02 -0.0162304267 #> [370,] -1.623497e-01  2.709138e-02 -0.98636130  2.736267e-02 -0.0264930890 #> [371,] -1.623497e-01 -2.709138e-02 -0.98636130  2.927325e-02  0.0172058788 #> [372,] -1.447566e-01 -7.833837e-02 -0.98636130  1.527919e-02  0.0004430643 #> [373,] -1.114769e-01 -1.210962e-01 -0.98636130  4.065855e-02 -0.0347882810 #> [374,] -6.611689e-02 -1.507313e-01 -0.98636130 -4.764542e-02 -0.0333774019 #> [375,] -1.359211e-02 -1.640324e-01 -0.98636130 -1.713199e-02  0.0260965556 #> [376,]  4.040558e-02 -1.595580e-01 -0.98636130 -5.897846e-03 -0.0074521042 #> [377,]  9.002471e-02 -1.377931e-01 -0.98636130  1.804426e-02 -0.0394366712 #> [378,]  1.298883e-01 -1.010961e-01 -0.98636130  3.669566e-03  0.0301168667 #> [379,]  1.556764e-01 -5.344378e-02 -0.98636130 -3.647639e-02 -0.0419587971 #> [380,]  1.645946e-01 -4.031405e-17 -0.98636130  9.567656e-03 -0.0178800270 #> [381,]  1.224647e-16  0.000000e+00 -1.00000000  2.803267e-02 -0.0242777936 #> [382,]  1.158292e-16  3.976422e-17 -1.00000000 -2.222794e-03 -0.0480781602 #> [383,]  9.664184e-17  7.521936e-17 -1.00000000 -1.373098e-02 -0.0044925978 #> [384,]  6.698183e-17  1.025233e-16 -1.00000000 -4.923526e-02  0.0268020860 #> [385,]  3.006330e-17  1.187173e-16 -1.00000000 -3.362425e-02  0.0154708300 #> [386,] -1.011305e-17  1.220464e-16 -1.00000000 -1.111713e-02  0.0422128927 #> [387,] -4.919350e-17  1.121499e-16 -1.00000000  3.094393e-02 -0.0053710290 #> [388,] -8.294307e-17  9.010019e-17 -1.00000000 -4.189133e-02 -0.0415850116 #> [389,] -1.077045e-16  5.828675e-17 -1.00000000 -1.425399e-02  0.0147140309 #> [390,] -1.207944e-16  2.015702e-17 -1.00000000  3.304404e-02 -0.0090381307 #> [391,] -1.207944e-16 -2.015702e-17 -1.00000000  3.638922e-02 -0.0208063293 #> [392,] -1.077045e-16 -5.828675e-17 -1.00000000  3.358489e-02 -0.0371321189 #> [393,] -8.294307e-17 -9.010019e-17 -1.00000000 -2.726210e-02 -0.0022840990 #> [394,] -4.919350e-17 -1.121499e-16 -1.00000000 -6.798036e-03 -0.0159999489 #> [395,] -1.011305e-17 -1.220464e-16 -1.00000000 -2.147680e-02  0.0035788741 #> [396,]  3.006330e-17 -1.187173e-16 -1.00000000 -7.835588e-03  0.0112141618 #> [397,]  6.698183e-17 -1.025233e-16 -1.00000000  1.377198e-02 -0.0371199941 #> [398,]  9.664184e-17 -7.521936e-17 -1.00000000 -1.840246e-02  0.0062326387 #> [399,]  1.158292e-16 -3.976422e-17 -1.00000000 -4.141806e-02  0.0117852898 #> [400,]  1.224647e-16 -2.999520e-32 -1.00000000  2.342941e-02 -0.0316545064 #>                 [,6] #>   [1,] -0.0224097124 #>   [2,]  0.0058730685 #>   [3,]  0.0384471205 #>   [4,]  0.0066567696 #>   [5,] -0.0256157019 #>   [6,]  0.0338826125 #>   [7,]  0.0412903447 #>   [8,]  0.0403237645 #>   [9,] -0.0432364848 #>  [10,] -0.0427404279 #>  [11,]  0.0391346660 #>  [12,]  0.0330254006 #>  [13,]  0.0030522383 #>  [14,] -0.0263212564 #>  [15,]  0.0303858228 #>  [16,] -0.0071982476 #>  [17,]  0.0012970382 #>  [18,]  0.0453215297 #>  [19,] -0.0155376290 #>  [20,]  0.0387788581 #>  [21,]  0.0166450149 #>  [22,] -0.0098181709 #>  [23,]  0.0075139229 #>  [24,] -0.0331760231 #>  [25,]  0.0198006235 #>  [26,] -0.0396713876 #>  [27,] -0.0223306950 #>  [28,]  0.0475047150 #>  [29,] -0.0336251184 #>  [30,] -0.0084340744 #>  [31,] -0.0388732226 #>  [32,] -0.0096390683 #>  [33,]  0.0354503244 #>  [34,] -0.0090557174 #>  [35,] -0.0363325094 #>  [36,] -0.0135676930 #>  [37,] -0.0378405037 #>  [38,]  0.0376625641 #>  [39,]  0.0498988348 #>  [40,] -0.0105055742 #>  [41,]  0.0119267519 #>  [42,] -0.0281139098 #>  [43,] -0.0171310939 #>  [44,]  0.0122536972 #>  [45,] -0.0224939816 #>  [46,] -0.0473302682 #>  [47,]  0.0481403759 #>  [48,] -0.0174051022 #>  [49,] -0.0003205740 #>  [50,] -0.0363566860 #>  [51,]  0.0003904358 #>  [52,] -0.0482579468 #>  [53,] -0.0030323254 #>  [54,] -0.0153248419 #>  [55,] -0.0283819866 #>  [56,] -0.0429583367 #>  [57,]  0.0448328620 #>  [58,] -0.0183201506 #>  [59,] -0.0454515950 #>  [60,]  0.0422209830 #>  [61,]  0.0139031098 #>  [62,]  0.0141489498 #>  [63,] -0.0036226860 #>  [64,] -0.0035760734 #>  [65,]  0.0181178080 #>  [66,]  0.0078491741 #>  [67,]  0.0274168907 #>  [68,] -0.0343960205 #>  [69,] -0.0430605633 #>  [70,] -0.0460080283 #>  [71,] -0.0155184703 #>  [72,]  0.0219805820 #>  [73,]  0.0460303989 #>  [74,]  0.0349399659 #>  [75,]  0.0180103326 #>  [76,] -0.0269992773 #>  [77,] -0.0053544548 #>  [78,] -0.0347711010 #>  [79,]  0.0014136756 #>  [80,] -0.0298901162 #>  [81,] -0.0276710545 #>  [82,]  0.0224227906 #>  [83,] -0.0135186209 #>  [84,]  0.0186513433 #>  [85,] -0.0079166902 #>  [86,] -0.0187565769 #>  [87,]  0.0483486468 #>  [88,] -0.0474801549 #>  [89,]  0.0178648174 #>  [90,] -0.0324134449 #>  [91,]  0.0365930069 #>  [92,]  0.0348708935 #>  [93,] -0.0355114629 #>  [94,] -0.0271630161 #>  [95,]  0.0476140357 #>  [96,] -0.0071402431 #>  [97,] -0.0408832290 #>  [98,]  0.0209972294 #>  [99,] -0.0066626939 #> [100,] -0.0068892051 #> [101,] -0.0164028188 #> [102,] -0.0235047219 #> [103,]  0.0293101677 #> [104,] -0.0271239813 #> [105,] -0.0320154624 #> [106,] -0.0260786190 #> [107,] -0.0181429178 #> [108,]  0.0045807536 #> [109,]  0.0386862828 #> [110,]  0.0170380435 #> [111,] -0.0234720815 #> [112,]  0.0255245471 #> [113,] -0.0385013859 #> [114,] -0.0107553932 #> [115,] -0.0471267601 #> [116,] -0.0085367720 #> [117,] -0.0445342469 #> [118,] -0.0230817826 #> [119,]  0.0364498982 #> [120,] -0.0237685415 #> [121,] -0.0114170825 #> [122,]  0.0251514799 #> [123,]  0.0028231731 #> [124,]  0.0320612674 #> [125,] -0.0288956664 #> [126,] -0.0488141491 #> [127,] -0.0018438478 #> [128,]  0.0328250262 #> [129,]  0.0163606977 #> [130,] -0.0286887900 #> [131,] -0.0103585480 #> [132,] -0.0071313513 #> [133,] -0.0404556623 #> [134,]  0.0076960147 #> [135,]  0.0474338481 #> [136,] -0.0279450347 #> [137,] -0.0234312846 #> [138,]  0.0485053924 #> [139,] -0.0399691103 #> [140,] -0.0289001654 #> [141,] -0.0194087601 #> [142,]  0.0452673686 #> [143,]  0.0331066190 #> [144,] -0.0083416061 #> [145,] -0.0311471867 #> [146,] -0.0441733215 #> [147,] -0.0119291255 #> [148,] -0.0237154981 #> [149,] -0.0299821134 #> [150,] -0.0074312360 #> [151,]  0.0230554801 #> [152,]  0.0098318679 #> [153,] -0.0245330961 #> [154,] -0.0390898018 #> [155,] -0.0129817799 #> [156,] -0.0407671100 #> [157,]  0.0079379001 #> [158,]  0.0463330709 #> [159,] -0.0278409448 #> [160,]  0.0370877966 #> [161,]  0.0169036374 #> [162,]  0.0438895473 #> [163,] -0.0246802411 #> [164,]  0.0475824768 #> [165,]  0.0163820421 #> [166,] -0.0143898793 #> [167,]  0.0030039197 #> [168,]  0.0081166394 #> [169,] -0.0396844822 #> [170,] -0.0265566208 #> [171,] -0.0204097725 #> [172,]  0.0207407020 #> [173,]  0.0136008093 #> [174,] -0.0404925953 #> [175,] -0.0140859347 #> [176,]  0.0415320981 #> [177,]  0.0046214467 #> [178,] -0.0461561202 #> [179,]  0.0237664109 #> [180,]  0.0341202633 #> [181,] -0.0107587299 #> [182,]  0.0031358037 #> [183,] -0.0244422555 #> [184,] -0.0419026258 #> [185,] -0.0329581960 #> [186,]  0.0175840472 #> [187,]  0.0232373429 #> [188,]  0.0347976334 #> [189,]  0.0263744748 #> [190,] -0.0026231199 #> [191,] -0.0498535967 #> [192,] -0.0010101914 #> [193,]  0.0279497629 #> [194,] -0.0454600266 #> [195,]  0.0021767576 #> [196,]  0.0321382353 #> [197,] -0.0413611765 #> [198,]  0.0252109422 #> [199,] -0.0047064543 #> [200,]  0.0379222085 #> [201,]  0.0231339094 #> [202,] -0.0254172823 #> [203,] -0.0385850925 #> [204,] -0.0350221756 #> [205,]  0.0248769978 #> [206,]  0.0168705793 #> [207,]  0.0247189383 #> [208,]  0.0364377812 #> [209,] -0.0125814772 #> [210,]  0.0418471181 #> [211,]  0.0428638628 #> [212,] -0.0272539393 #> [213,] -0.0161944947 #> [214,] -0.0217740091 #> [215,] -0.0492675133 #> [216,] -0.0048696535 #> [217,] -0.0427472331 #> [218,] -0.0456530863 #> [219,]  0.0470452822 #> [220,]  0.0142377665 #> [221,] -0.0205767895 #> [222,] -0.0295530638 #> [223,] -0.0164014023 #> [224,] -0.0203098571 #> [225,]  0.0080661156 #> [226,] -0.0070536014 #> [227,]  0.0250502022 #> [228,]  0.0248653408 #> [229,] -0.0100916413 #> [230,]  0.0407043314 #> [231,] -0.0067056266 #> [232,]  0.0139697193 #> [233,]  0.0205438121 #> [234,] -0.0418444135 #> [235,]  0.0492599612 #> [236,]  0.0302602059 #> [237,]  0.0328657944 #> [238,] -0.0287647745 #> [239,] -0.0208798466 #> [240,]  0.0464145993 #> [241,]  0.0287747040 #> [242,] -0.0047427858 #> [243,]  0.0409220008 #> [244,]  0.0042775594 #> [245,]  0.0262099978 #> [246,]  0.0107163528 #> [247,]  0.0286980778 #> [248,]  0.0235257468 #> [249,]  0.0185531181 #> [250,]  0.0294697858 #> [251,] -0.0468884161 #> [252,] -0.0393205576 #> [253,] -0.0118330416 #> [254,] -0.0029590431 #> [255,]  0.0323901244 #> [256,]  0.0379452252 #> [257,]  0.0444275221 #> [258,]  0.0355318096 #> [259,]  0.0426709957 #> [260,] -0.0087971702 #> [261,] -0.0311517806 #> [262,] -0.0011031435 #> [263,]  0.0193374486 #> [264,] -0.0191149206 #> [265,] -0.0142531339 #> [266,] -0.0325184840 #> [267,] -0.0433118920 #> [268,]  0.0091552068 #> [269,] -0.0116142937 #> [270,]  0.0128278553 #> [271,]  0.0211744872 #> [272,]  0.0241856493 #> [273,]  0.0189844236 #> [274,] -0.0134978752 #> [275,]  0.0434817782 #> [276,] -0.0403850951 #> [277,]  0.0245464425 #> [278,]  0.0182316082 #> [279,] -0.0249041270 #> [280,] -0.0494712179 #> [281,]  0.0177415921 #> [282,]  0.0256914099 #> [283,]  0.0058509766 #> [284,]  0.0201534934 #> [285,]  0.0452117470 #> [286,] -0.0279468767 #> [287,] -0.0279926708 #> [288,]  0.0082922763 #> [289,]  0.0200072185 #> [290,]  0.0387308071 #> [291,] -0.0161308155 #> [292,]  0.0109509172 #> [293,]  0.0176600055 #> [294,]  0.0397794622 #> [295,] -0.0166495348 #> [296,] -0.0420082424 #> [297,]  0.0105494620 #> [298,]  0.0322157142 #> [299,]  0.0113894432 #> [300,] -0.0337994490 #> [301,] -0.0491327587 #> [302,]  0.0298733779 #> [303,] -0.0353214066 #> [304,] -0.0383287284 #> [305,]  0.0267304244 #> [306,]  0.0355022175 #> [307,]  0.0339183060 #> [308,]  0.0026046358 #> [309,] -0.0211841339 #> [310,]  0.0391550695 #> [311,] -0.0007669843 #> [312,]  0.0350284525 #> [313,] -0.0144637923 #> [314,] -0.0435446614 #> [315,] -0.0278114101 #> [316,]  0.0260843266 #> [317,] -0.0243631189 #> [318,] -0.0285567578 #> [319,]  0.0489091729 #> [320,]  0.0026081893 #> [321,]  0.0067090560 #> [322,] -0.0121331936 #> [323,]  0.0054102787 #> [324,]  0.0106938969 #> [325,] -0.0076204948 #> [326,]  0.0009310514 #> [327,]  0.0214030946 #> [328,]  0.0279471935 #> [329,]  0.0239026508 #> [330,] -0.0388526369 #> [331,] -0.0399831240 #> [332,] -0.0158668309 #> [333,]  0.0212632748 #> [334,]  0.0134260325 #> [335,] -0.0306095738 #> [336,]  0.0119397532 #> [337,]  0.0203225523 #> [338,]  0.0295053924 #> [339,] -0.0050001372 #> [340,]  0.0158011169 #> [341,]  0.0342345787 #> [342,]  0.0153676139 #> [343,] -0.0098876848 #> [344,]  0.0413664310 #> [345,]  0.0366867488 #> [346,]  0.0156652802 #> [347,] -0.0092806607 #> [348,]  0.0426080174 #> [349,]  0.0457930321 #> [350,] -0.0300707191 #> [351,] -0.0046635683 #> [352,]  0.0205307506 #> [353,] -0.0359196191 #> [354,]  0.0171758374 #> [355,]  0.0073782693 #> [356,] -0.0288933859 #> [357,]  0.0445737168 #> [358,]  0.0099332970 #> [359,] -0.0236614419 #> [360,] -0.0092817232 #> [361,] -0.0132293402 #> [362,]  0.0481698418 #> [363,] -0.0220092569 #> [364,]  0.0407650940 #> [365,] -0.0082799604 #> [366,]  0.0414082336 #> [367,]  0.0270289054 #> [368,]  0.0040653758 #> [369,] -0.0342927033 #> [370,]  0.0084706679 #> [371,] -0.0016720979 #> [372,]  0.0400159159 #> [373,] -0.0136091234 #> [374,]  0.0099424049 #> [375,]  0.0189795232 #> [376,]  0.0471670046 #> [377,]  0.0355190796 #> [378,] -0.0479021518 #> [379,] -0.0089147941 #> [380,] -0.0401660026 #> [381,]  0.0165191547 #> [382,]  0.0404188616 #> [383,] -0.0110777525 #> [384,] -0.0127219753 #> [385,]  0.0331947756 #> [386,]  0.0321540025 #> [387,] -0.0184107002 #> [388,]  0.0328720801 #> [389,] -0.0007916308 #> [390,] -0.0302327739 #> [391,]  0.0383540310 #> [392,] -0.0337559121 #> [393,] -0.0158351770 #> [394,]  0.0078958530 #> [395,]  0.0116285037 #> [396,] -0.0217218023 #> [397,]  0.0417551709 #> [398,]  0.0431604248 #> [399,] -0.0258266344 #> [400,]  0.0116242698"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/spiral_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a spiral dataset with optional noise. — spiral_with_noise","title":"Generate a spiral dataset with optional noise. — spiral_with_noise","text":"function generates dataset arranged spiral pattern optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/spiral_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a spiral dataset with optional noise. — spiral_with_noise","text":"","code":"spiral_with_noise(sample_size, num_dims, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/spiral_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a spiral dataset with optional noise. — spiral_with_noise","text":"sample_size Total number data points generate. num_dims Number effective dimensions data point. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/spiral_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a spiral dataset with optional noise. — spiral_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/spiral_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a spiral dataset with optional noise. — spiral_with_noise","text":"","code":"spiral_with_noise(sample_size = 100, num_dims = 10, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #>                 [,1]          [,2]          [,3]          [,4]          [,5] #>   [1,] -1.264462e-01  0.0286599852 -6.496004e-03  1.472369e-03 -3.337236e-04 #>   [2,]  1.417685e-01  0.0646788770  2.950837e-02  1.346257e-02  6.142014e-03 #>   [3,]  3.171968e-05  0.0000317181  3.171652e-05  3.171494e-05  3.171336e-05 #>   [4,]  1.106361e+00  0.8296372887  6.221280e-01  4.665211e-01  3.498346e-01 #>   [5,] -1.410193e+00 -0.6045472142 -2.591683e-01 -1.111050e-01 -4.763049e-02 #>   [6,] -1.853791e+00 -1.2339627657 -8.213784e-01 -5.467446e-01 -3.639366e-01 #>   [7,]  1.120094e+00  0.2945129474  7.743805e-02  2.036125e-02  5.353704e-03 #>   [8,] -1.986855e+00  1.7618250282 -1.562282e+00  1.385338e+00 -1.228435e+00 #>   [9,] -9.055340e-01  0.3370190972 -1.254308e-01  4.668248e-02 -1.737416e-02 #>  [10,] -3.986607e-01 -0.3896794099 -3.809004e-01 -3.723192e-01 -3.639313e-01 #>  [11,] -5.615241e-02  0.0059408861 -6.285417e-04  6.649928e-05 -7.035579e-06 #>  [12,]  9.539640e-01  0.2106703548  4.652376e-02  1.027416e-02  2.268912e-03 #>  [13,] -8.778392e-01 -0.6357028585 -4.603555e-01 -3.333746e-01 -2.414192e-01 #>  [14,] -7.854437e-02  0.0785172744 -7.849019e-02  7.846311e-02 -7.843605e-02 #>  [15,] -1.427137e-01 -0.1423393576 -1.419660e-01 -1.415937e-01 -1.412223e-01 #>  [16,]  1.227778e-01  0.0407223645  1.350660e-02  4.479808e-03  1.485842e-03 #>  [17,]  1.008630e+00  0.8397007780  6.990644e-01  5.819824e-01  4.845097e-01 #>  [18,]  1.876428e-01 -0.1872788165  1.869155e-01 -1.865529e-01  1.861910e-01 #>  [19,] -2.283981e-01  0.0207131111 -1.878444e-03  1.703535e-04 -1.544913e-05 #>  [20,] -1.773040e+00 -1.0575999465 -6.308475e-01 -3.762941e-01 -2.244555e-01 #>  [21,] -1.492141e-01  0.1473098783 -1.454300e-01  1.435740e-01 -1.417418e-01 #>  [22,]  1.532640e+00  1.4008247288  1.280346e+00  1.170230e+00  1.069584e+00 #>  [23,] -1.161028e+00  1.0316570547 -9.167014e-01  8.145550e-01 -7.237906e-01 #>  [24,]  1.114755e+00  0.8198121050  6.029054e-01  4.433881e-01  3.260760e-01 #>  [25,] -9.209352e-01 -0.8935631060 -8.670046e-01 -8.412354e-01 -8.162321e-01 #>  [26,] -1.209068e+00  0.3312774478 -9.076802e-02  2.486989e-02 -6.814200e-03 #>  [27,]  6.299907e-01 -0.4175039868  2.766860e-01 -1.833638e-01  1.215179e-01 #>  [28,] -2.184033e-01 -0.0311812102 -4.451709e-03 -6.355658e-04 -9.073906e-05 #>  [29,]  3.837673e-01 -0.1090800699  3.100437e-02 -8.812525e-03  2.504828e-03 #>  [30,]  1.445292e-01  0.0732038911  3.707770e-02  1.877982e-02  9.511963e-03 #>  [31,] -1.440995e+00 -0.6344648629 -2.793525e-01 -1.229978e-01 -5.415549e-02 #>  [32,] -4.350988e-02  0.0036085604 -2.992817e-04  2.482140e-05 -2.058602e-06 #>  [33,] -2.195912e+00  1.2496391258 -7.111386e-01  4.046914e-01 -2.302998e-01 #>  [34,] -1.467069e+00  0.4961235669 -1.677757e-01  5.673727e-02 -1.918703e-02 #>  [35,]  6.139321e-01  0.1617822041  4.263253e-02  1.123444e-02  2.960478e-03 #>  [36,]  1.217754e-01  0.0877850528  6.328221e-02  4.561868e-02  3.288545e-02 #>  [37,]  8.071244e-02  0.0806474198  8.058245e-02  8.051753e-02  8.045266e-02 #>  [38,] -7.359671e-01  0.1206112889 -1.976594e-02  3.239269e-03 -5.308558e-04 #>  [39,]  1.347227e-01  0.0884401205  5.805742e-02  3.811238e-02  2.501926e-02 #>  [40,]  5.928876e-01  0.5662831421  5.408725e-01  5.166022e-01  4.934209e-01 #>  [41,] -1.844440e+00  1.6761048334 -1.523133e+00  1.384122e+00 -1.257798e+00 #>  [42,]  1.103584e-01  0.0309984837  8.707139e-03  2.445741e-03  6.869823e-04 #>  [43,]  2.777905e-01  0.0315241888  3.577425e-03  4.059729e-04  4.607058e-05 #>  [44,]  1.406052e+00  0.4790724903  1.632304e-01  5.561611e-02  1.894961e-02 #>  [45,]  9.784700e-02  0.0784093195  6.283301e-02  5.035099e-02  4.034857e-02 #>  [46,]  2.414267e-01 -0.0168002672  1.169088e-03 -8.135381e-05  5.661203e-06 #>  [47,]  5.690667e-01  0.5632909507  5.575738e-01  5.519147e-01  5.463130e-01 #>  [48,] -1.365957e+00  0.9311496986 -6.347489e-01  4.326975e-01 -2.949625e-01 #>  [49,]  6.296473e-01 -0.4088774896  2.655150e-01 -1.724189e-01  1.119646e-01 #>  [50,] -2.328127e-02  0.0232748569 -2.326845e-02  2.326204e-02 -2.325564e-02 #>  [51,] -6.447845e-01 -0.2810610994 -1.225143e-01 -5.340391e-02 -2.327873e-02 #>  [52,]  5.940869e-01 -0.4625573020  3.601481e-01 -2.804121e-01  2.183294e-01 #>  [53,] -1.863433e+00  1.6884449146 -1.529889e+00  1.386223e+00 -1.256048e+00 #>  [54,]  3.347683e-02  0.0315936515  2.981641e-02  2.813914e-02  2.655623e-02 #>  [55,] -5.821099e-01  0.1353162882 -3.145540e-02  7.312069e-03 -1.699751e-03 #>  [56,] -8.587987e-01 -0.6910943796 -5.561390e-01 -4.475374e-01 -3.601433e-01 #>  [57,] -2.250125e-01  0.2243646544 -2.237186e-01  2.230745e-01 -2.224322e-01 #>  [58,]  5.776847e-01 -0.4625951831  3.704344e-01 -2.966345e-01  2.375373e-01 #>  [59,]  5.897854e-01 -0.3076096349  1.604375e-01 -8.367809e-02  4.364331e-02 #>  [60,] -1.852624e+00 -1.2304500111 -8.172230e-01 -5.427717e-01 -3.604905e-01 #>  [61,]  6.609521e-01  0.6233516618  5.878903e-01  5.544463e-01  5.229048e-01 #>  [62,]  6.085172e-01 -0.4585156769  3.454900e-01 -2.603256e-01  1.961544e-01 #>  [63,]  1.470955e+00 -1.2239354144  1.018398e+00 -8.473770e-01  7.050757e-01 #>  [64,] -1.064875e+00 -0.3313785983 -1.031218e-01 -3.209047e-02 -9.986239e-03 #>  [65,]  5.481955e-02 -0.0547396527  5.465987e-02 -5.458020e-02  5.450064e-02 #>  [66,] -8.334443e-01 -0.8135392187 -7.941096e-01 -7.751439e-01 -7.566313e-01 #>  [67,]  8.352489e-02  0.0700946573  5.882391e-02  4.936543e-02  4.142781e-02 #>  [68,]  1.410096e-01 -0.0135965012  1.311009e-03 -1.264107e-04  1.218884e-05 #>  [69,] -1.481026e+00 -0.6750284559 -3.076674e-01 -1.402300e-01 -6.391465e-02 #>  [70,]  1.626348e+00 -1.1373972494  7.954461e-01 -5.563004e-01  3.890523e-01 #>  [71,]  5.375079e-01 -0.2379697189  1.053558e-01 -4.664396e-02  2.065058e-02 #>  [72,]  3.316674e-01 -0.0796445684  1.912536e-02 -4.592646e-03  1.102850e-03 #>  [73,]  3.340485e-01 -0.3165446567  2.999580e-01 -2.842405e-01  2.693466e-01 #>  [74,]  9.725725e-01  0.8276204751  7.042720e-01  5.993074e-01  5.099868e-01 #>  [75,] -2.787365e-01 -0.0221088038 -1.753625e-03 -1.390939e-04 -1.103264e-05 #>  [76,] -1.693863e+00 -1.4498023304 -1.240907e+00 -1.062111e+00 -9.090769e-01 #>  [77,]  9.526736e-01  0.4339168115  1.976373e-01  9.001837e-02  4.100091e-02 #>  [78,]  4.514513e-01 -0.1566544953  5.435941e-02 -1.886282e-02  6.545436e-03 #>  [79,]  6.773254e-02  0.0102800764  1.560254e-03  2.368069e-04  3.594127e-05 #>  [80,] -2.317485e-01  0.0119074555 -6.118164e-04  3.143570e-05 -1.615196e-06 #>  [81,]  1.464435e+00 -0.7501224243  3.842327e-01 -1.968142e-01  1.008135e-01 #>  [82,]  1.565427e+00 -0.9146498561  5.344127e-01 -3.122473e-01  1.824402e-01 #>  [83,] -6.204549e-01 -0.1099771676 -1.949373e-02 -3.455311e-03 -6.124625e-04 #>  [84,] -3.436425e-01  0.3062673748 -2.729572e-01  2.432700e-01 -2.168116e-01 #>  [85,]  1.170525e+00  0.3231818504  8.923046e-02  2.463652e-02  6.802140e-03 #>  [86,]  1.631100e+00  0.6679952157  2.735686e-01  1.120364e-01  4.588302e-02 #>  [87,]  1.623245e+00 -1.0793271993  7.176655e-01 -4.771896e-01  3.172926e-01 #>  [88,] -2.791788e-01 -0.0221789870 -1.761980e-03 -1.399782e-04 -1.112038e-05 #>  [89,] -1.336758e-01 -0.0117399444 -1.031049e-03 -9.055085e-05 -7.952539e-06 #>  [90,] -1.161518e+00  1.0319204130 -9.167827e-01  8.144916e-01 -7.236138e-01 #>  [91,] -3.624887e-01 -0.0858094840 -2.031309e-02 -4.808580e-03 -1.138302e-03 #>  [92,] -8.321712e-02  0.0829097064 -8.260342e-02  8.229827e-02 -8.199425e-02 #>  [93,]  7.828830e-02  0.0140829927  2.533338e-03  4.557127e-04  8.197648e-05 #>  [94,] -1.246928e+00 -1.1721631118 -1.101881e+00 -1.035814e+00 -9.737073e-01 #>  [95,]  3.092498e-01 -0.2954405125  2.822478e-01 -2.696443e-01  2.576035e-01 #>  [96,] -3.696805e-01  0.2536060864 -1.739774e-01  1.193509e-01 -8.187643e-02 #>  [97,]  1.074565e+00 -0.3616368858  1.217062e-01 -4.095932e-02  1.378455e-02 #>  [98,] -1.063123e-01  0.0205037835 -3.954435e-03  7.626667e-04 -1.470907e-04 #>  [99,] -3.124103e-02 -0.0312372011 -3.123337e-02 -3.122954e-02 -3.122571e-02 #> [100,]  1.027362e+00  0.5288610838  2.722450e-01  1.401452e-01  7.214338e-02 #>                 [,6]          [,7]          [,8]          [,9]        [,10] #>   [1,]  7.564100e-05 -1.714461e-05  3.885956e-06 -8.807816e-07 -0.129824916 #>   [2,]  2.802164e-03  1.278428e-03  5.832559e-04  2.660982e-04  0.159315049 #>   [3,]  3.171178e-05  3.171020e-05  3.170862e-05  3.170704e-05  0.003177476 #>   [4,]  2.623338e-01  1.967188e-01  1.475154e-01  1.106188e-01  1.672314968 #>   [5,] -2.041910e-02 -8.753630e-03 -3.752665e-03 -1.608761e-03  1.560901753 #>   [6,] -2.422518e-01 -1.612532e-01 -1.073370e-01 -7.144810e-02  2.484074075 #>   [7,]  1.407681e-03  3.701301e-04  9.732051e-05  2.558906e-05  1.160943594 #>   [8,]  1.089303e+00 -9.659294e-01  8.565287e-01 -7.595186e-01 -4.298062830 #>   [9,]  6.466264e-03 -2.406596e-03  8.956800e-04 -3.333516e-04 -0.975620993 #>  [10,] -3.557324e-01 -3.477182e-01 -3.398845e-01 -3.322274e-01  1.888773217 #>  [11,]  7.443594e-07 -7.875272e-08  8.331984e-09 -8.815182e-10 -0.056469339 #>  [12,]  5.010593e-04  1.106523e-04  2.443610e-05  5.396390e-06  0.978112892 #>  [13,] -1.748280e-01 -1.266048e-01 -9.168312e-02 -6.639396e-02  1.272924679 #>  [14,]  7.840899e-02 -7.838195e-02  7.835491e-02 -7.832788e-02 -2.990607081 #>  [15,] -1.408519e-01 -1.404825e-01 -1.401140e-01 -1.397465e-01  1.971755777 #>  [16,]  4.928171e-04  1.634553e-04  5.421409e-05  1.798148e-05  0.130144813 #>  [17,]  4.033621e-01  3.358055e-01  2.795634e-01  2.327411e-01  1.820629097 #>  [18,] -1.858298e-01  1.854693e-01 -1.851096e-01  1.847505e-01 -3.013971915 #>  [19,]  1.401061e-06 -1.270603e-07  1.152293e-08 -1.044998e-09 -0.229343126 #>  [20,] -1.338854e-01 -7.986128e-02 -4.763643e-02 -2.841464e-02  2.209062938 #>  [21,]  1.399329e-01 -1.381471e-01  1.363841e-01 -1.346436e-01 -0.936980376 #>  [22,]  9.775939e-01  8.935156e-01  8.166685e-01  7.464307e-01  3.777522958 #>  [23,]  6.431400e-01 -5.714760e-01  5.077975e-01 -4.512145e-01 -2.530920722 #>  [24,]  2.398025e-01  1.763553e-01  1.296950e-01  9.538018e-02  1.645121496 #>  [25,] -7.919720e-01 -7.684329e-01 -7.455935e-01 -7.234329e-01  3.805622903 #>  [26,]  1.867050e-03 -5.115604e-04  1.401645e-04 -3.840422e-05 -1.257178835 #>  [27,] -8.053166e-02  5.336951e-02 -3.536875e-02  2.343938e-02 -0.841252694 #>  [28,] -1.295472e-05 -1.849532e-06 -2.640557e-07 -3.769896e-08  0.220663773 #>  [29,] -7.119595e-04  2.023638e-04 -5.751886e-05  1.634887e-05 -0.400276827 #>  [30,]  4.817801e-03  2.440212e-03  1.235965e-03  6.260151e-04  0.167620482 #>  [31,] -2.384446e-02 -1.049862e-02 -4.622505e-03 -2.035271e-03  1.604935489 #>  [32,]  1.707334e-07 -1.416004e-08  1.174386e-09 -9.739952e-11 -0.043660295 #>  [33,]  1.310579e-01 -7.458181e-02  4.244266e-02 -2.415306e-02 -2.670498450 #>  [34,]  6.488541e-03 -2.194251e-03  7.420372e-04 -2.509372e-04 -1.558914270 #>  [35,]  7.801395e-04  2.055809e-04  5.417427e-05  1.427590e-05  0.636426984 #>  [36,]  2.370636e-02  1.708937e-02  1.231933e-02  8.880720e-03  0.175706032 #>  [37,]  8.038785e-02  8.032308e-02  8.025837e-02  8.019372e-02  2.011156408 #>  [38,]  8.699738e-05 -1.425725e-05  2.336497e-06 -3.829083e-07 -0.746053719 #>  [39,]  1.642415e-02  1.078180e-02  7.077823e-03  4.646309e-03  0.178591956 #>  [40,]  4.712798e-01  4.501322e-01  4.299336e-01  4.106414e-01  2.001677597 #>  [41,]  1.143003e+00 -1.038685e+00  9.438879e-01 -8.577426e-01 -4.419125160 #>  [42,]  1.929659e-04  5.420203e-05  1.522477e-05  4.276472e-06  0.114987792 #>  [43,]  5.228176e-06  5.933034e-07  6.732919e-08  7.640644e-09  0.279596647 #>  [44,]  6.456543e-03  2.199884e-03  7.495480e-04  2.553872e-04  1.495539214 #>  [45,]  3.233318e-02  2.591007e-02  2.076293e-02  1.663830e-02  0.163568797 #>  [46,] -3.939486e-07  2.741388e-08 -1.907661e-09  1.327493e-10 -0.242013399 #>  [47,]  5.407682e-01  5.352797e-01  5.298468e-01  5.244691e-01  4.004330766 #>  [48,]  2.010709e-01 -1.370666e-01  9.343595e-02 -6.369369e-02 -1.866960227 #>  [49,] -7.270708e-02  4.721419e-02 -3.065974e-02  1.990968e-02 -0.827973447 #>  [50,]  2.324924e-02 -2.324284e-02  2.323644e-02 -2.323004e-02 -0.992257597 #>  [51,] -1.014718e-02 -4.423149e-03 -1.928047e-03 -8.404345e-04  0.716430829 #>  [52,] -1.699917e-01  1.323559e-01 -1.030526e-01  8.023697e-02 -0.946724944 #>  [53,]  1.138097e+00 -1.031222e+00  9.343842e-01 -8.466396e-01 -4.404475949 #>  [54,]  2.506236e-02  2.365252e-02  2.232200e-02  2.106631e-02  0.101239769 #>  [55,]  3.951214e-04 -9.184926e-05  2.135113e-05 -4.963247e-06 -0.598505102 #>  [56,] -2.898153e-01 -2.332208e-01 -1.876780e-01 -1.510286e-01  1.446637662 #>  [57,]  2.217917e-01 -2.211531e-01  2.205163e-01 -2.198814e-01 -2.967270401 #>  [58,] -1.902138e-01  1.523184e-01 -1.219727e-01  9.767261e-02 -0.964470056 #>  [59,] -2.276269e-02  1.187215e-02 -6.192064e-03  3.229545e-03 -0.691251915 #>  [60,] -2.394255e-01 -1.590183e-01 -1.056145e-01 -7.014558e-02  2.478144836 #>  [61,]  4.931577e-01  4.651028e-01  4.386439e-01  4.136903e-01  1.987970208 #>  [62,] -1.478017e-01  1.113681e-01 -8.391547e-02  6.323002e-02 -0.925569368 #>  [63,] -5.866713e-01  4.881507e-01 -4.061748e-01  3.379653e-01 -2.651932612 #>  [64,] -3.107619e-03 -9.670605e-04 -3.009397e-04 -9.364947e-05  1.120510951 #>  [65,] -5.442121e-02  5.434189e-02 -5.426268e-02  5.418359e-02 -1.015705542 #>  [66,] -7.385607e-01 -7.209218e-01 -7.037041e-01 -6.868976e-01  3.836426231 #>  [67,]  3.476650e-02  2.917628e-02  2.448493e-02  2.054792e-02  0.153591370 #>  [68,] -1.175279e-06  1.133233e-07 -1.092692e-08  1.053601e-09 -0.141669732 #>  [69,] -2.913130e-02 -1.327759e-02 -6.051720e-03 -2.758279e-03  1.663905292 #>  [70,] -2.720862e-01  1.902853e-01 -1.330772e-01  9.306841e-02 -2.275335282 #>  [71,] -9.142587e-03  4.047678e-03 -1.792020e-03  7.933771e-04 -0.599458293 #>  [72,] -2.648316e-04  6.359504e-05 -1.527132e-05  3.667162e-06 -0.341664548 #>  [73,] -2.552331e-01  2.418591e-01 -2.291860e-01  2.171769e-01 -1.045677960 #>  [74,]  4.339784e-01  3.692983e-01  3.142582e-01  2.674212e-01  1.851706992 #>  [75,] -8.750862e-07 -6.941003e-08 -5.505460e-09 -4.366818e-10  0.279617473 #>  [76,] -7.780925e-01 -6.659810e-01 -5.700231e-01 -4.878912e-01  3.275591021 #>  [77,]  1.867479e-02  8.505858e-03  3.874186e-03  1.764586e-03  1.070119509 #>  [78,] -2.271279e-03  7.881382e-04 -2.734855e-04  9.490000e-05 -0.481360999 #>  [79,]  5.454970e-06  8.279258e-07  1.256581e-07  1.907170e-08  0.068526404 #>  [80,]  8.299032e-08 -4.264121e-09  2.190946e-10 -1.125729e-11 -0.232054974 #>  [81,] -5.163933e-02  2.645104e-02 -1.354893e-02  6.940120e-03 -1.705110522 #>  [82,] -1.065964e-01  6.228228e-02 -3.639037e-02  2.126221e-02 -1.928932294 #>  [83,] -1.085605e-04 -1.924262e-05 -3.410802e-06 -6.045730e-07  0.630437605 #>  [84,]  1.932308e-01 -1.722147e-01  1.534843e-01 -1.367911e-01 -0.757697615 #>  [85,]  1.878070e-03  5.185348e-04  1.431674e-04  3.952850e-05  1.217864889 #>  [86,]  1.879079e-02  7.695517e-03  3.151597e-03  1.290695e-03  1.787910696 #>  [87,] -2.109739e-01  1.402806e-01 -9.327530e-02  6.202055e-02 -2.173265997 #>  [88,] -8.834441e-07 -7.018405e-08 -5.575679e-09 -4.429524e-10  0.280063939 #>  [89,] -6.984239e-07 -6.133838e-08 -5.386983e-09 -4.731064e-10  0.134194323 #>  [90,]  6.428757e-01 -5.711461e-01  5.074198e-01 -4.508039e-01 -2.530408056 #>  [91,] -2.694625e-04 -6.378803e-05 -1.510010e-05 -3.574545e-06  0.373093108 #>  [92,]  8.169135e-02 -8.138957e-02  8.108890e-02 -8.078934e-02 -0.969038043 #>  [93,]  1.474645e-05  2.652684e-06  4.771815e-07  8.583841e-08  0.079586561 #>  [94,] -9.153248e-01 -8.604428e-01 -8.088515e-01 -7.603536e-01  3.656020175 #>  [95,] -2.461004e-01  2.351110e-01 -2.246123e-01  2.145824e-01 -1.046565018 #>  [96,]  5.616839e-02 -3.853231e-02  2.643371e-02 -1.813390e-02 -0.508090356 #>  [97,] -4.639089e-03  1.561251e-03 -5.254274e-04  1.768287e-04 -1.141129135 #>  [98,]  2.836845e-05 -5.471243e-06  1.055204e-06 -2.035105e-07 -0.108346466 #>  [99,] -3.122188e-02 -3.121805e-02 -3.121422e-02 -3.121039e-02  1.994769910 #> [100,]  3.713768e-02  1.911759e-02  9.841276e-03  5.066053e-03  1.198334246 #>                [,11]         [,12]        [,13]         [,14] #>   [1,] -0.0423739981  0.0005641295  0.009125218  0.0259026846 #>   [2,]  0.0360534161  0.0012561879  0.009230198 -0.0481396592 #>   [3,] -0.0406324059  0.0173678077  0.003680050  0.0236935982 #>   [4,] -0.0352223045  0.0453709402 -0.036068859  0.0104190209 #>   [5,] -0.0255592588 -0.0311284318 -0.005730876 -0.0394405735 #>   [6,]  0.0157639137 -0.0049550921  0.010154759 -0.0380121459 #>   [7,]  0.0210674550  0.0080957928  0.041096133  0.0419023976 #>   [8,] -0.0435816205 -0.0266173788 -0.029051033  0.0150044224 #>   [9,] -0.0233161476  0.0215818671 -0.049052845  0.0272523994 #>  [10,] -0.0186572021  0.0019121361  0.049463993 -0.0047822804 #>  [11,]  0.0230429891  0.0049170736 -0.018322509  0.0287551134 #>  [12,]  0.0078257111  0.0075277892 -0.032712364 -0.0118214930 #>  [13,] -0.0144340040 -0.0293110288  0.008727631  0.0028810099 #>  [14,]  0.0097798355  0.0334458059  0.041756186  0.0286048706 #>  [15,]  0.0290009541  0.0072258456  0.046103125 -0.0311320245 #>  [16,]  0.0113489529  0.0076404400  0.012405603 -0.0122259753 #>  [17,] -0.0306449142  0.0189800955  0.033573566 -0.0318777867 #>  [18,]  0.0103233630  0.0088371196  0.038805186 -0.0011737513 #>  [19,]  0.0344990999  0.0112050680  0.008456710 -0.0369153217 #>  [20,] -0.0404158640 -0.0371579429  0.033159245  0.0419871304 #>  [21,] -0.0158153146 -0.0133850800  0.020406507 -0.0034047455 #>  [22,] -0.0381807014  0.0121491541  0.026402958  0.0425362405 #>  [23,]  0.0415786709 -0.0268756625  0.008696158 -0.0319545166 #>  [24,]  0.0334932922 -0.0492738383 -0.018786392  0.0414120165 #>  [25,] -0.0153042593  0.0410459159 -0.006616948 -0.0152989134 #>  [26,] -0.0032833889  0.0258638427  0.009389376 -0.0395568010 #>  [27,]  0.0045865014 -0.0245568391  0.034754460 -0.0289941242 #>  [28,] -0.0349629747  0.0308871629 -0.005155091  0.0473556313 #>  [29,] -0.0425756249 -0.0058567726 -0.033246600 -0.0104748802 #>  [30,] -0.0375505047 -0.0030661104  0.029984499  0.0294528896 #>  [31,]  0.0332036016  0.0431488342 -0.017278502 -0.0326594592 #>  [32,]  0.0148408001  0.0352013747 -0.035968679 -0.0491418596 #>  [33,]  0.0461352635  0.0324264881 -0.024265525  0.0130012729 #>  [34,] -0.0340987876 -0.0029234624  0.004271558 -0.0447945905 #>  [35,] -0.0122685367  0.0153300464  0.049098975 -0.0183883592 #>  [36,] -0.0372341619 -0.0138539880  0.008499671 -0.0085528377 #>  [37,] -0.0102585910  0.0396912986 -0.031015289  0.0092152898 #>  [38,]  0.0049165524  0.0123364045 -0.013058185  0.0054035998 #>  [39,] -0.0036641160 -0.0215964957 -0.020049325 -0.0249077035 #>  [40,] -0.0406942968  0.0486775603 -0.048080916  0.0335447852 #>  [41,] -0.0219196065 -0.0196659999 -0.015563637  0.0225848536 #>  [42,]  0.0339932150  0.0434134995  0.046950515 -0.0363274698 #>  [43,]  0.0129231562 -0.0009032456  0.032615416 -0.0309964480 #>  [44,]  0.0114566615 -0.0223315342 -0.012023662 -0.0264314575 #>  [45,] -0.0342428840 -0.0229795506  0.046101671 -0.0184312303 #>  [46,] -0.0036162026 -0.0162010657 -0.011964851  0.0154507402 #>  [47,]  0.0416055099  0.0021083007  0.040049632 -0.0013594597 #>  [48,] -0.0359464856  0.0127213856  0.008459823  0.0488755484 #>  [49,]  0.0054651178 -0.0038775178  0.032150785  0.0225479410 #>  [50,]  0.0451698213 -0.0392241852  0.007593704  0.0119685331 #>  [51,]  0.0353342006  0.0338103729  0.008126795  0.0381696011 #>  [52,] -0.0292908858  0.0195843794 -0.037365302  0.0059889935 #>  [53,] -0.0290128477 -0.0458790026 -0.018176880 -0.0074502126 #>  [54,] -0.0097823656 -0.0332694022  0.040167015  0.0128912321 #>  [55,] -0.0144400492 -0.0398796815 -0.015291461 -0.0316742466 #>  [56,]  0.0270458351  0.0442972293  0.043295570 -0.0207969493 #>  [57,] -0.0434133501 -0.0164187283 -0.043451531  0.0116174912 #>  [58,]  0.0146367602 -0.0089219590  0.008097974 -0.0410736010 #>  [59,]  0.0469097281  0.0481089856 -0.041742355  0.0358389253 #>  [60,]  0.0268055704 -0.0306078838  0.017151298 -0.0108867611 #>  [61,] -0.0122563329  0.0203989227  0.018126565  0.0264094083 #>  [62,]  0.0379149776 -0.0425984581  0.005658895  0.0494566324 #>  [63,]  0.0094532959 -0.0059796841 -0.005071636 -0.0340290352 #>  [64,]  0.0065051951  0.0395742948  0.049280810 -0.0335202447 #>  [65,]  0.0024463860  0.0443061970 -0.034242105 -0.0065991141 #>  [66,]  0.0193318980  0.0050130781 -0.032253226  0.0143277417 #>  [67,]  0.0344214538  0.0377495332 -0.031986658 -0.0191993365 #>  [68,] -0.0428117999  0.0417571197  0.028149178 -0.0347360489 #>  [69,] -0.0199536927  0.0418732466  0.027342555  0.0414403909 #>  [70,] -0.0475057746 -0.0368594302  0.036163947 -0.0110333550 #>  [71,]  0.0276388028 -0.0085194062  0.015944307 -0.0197400030 #>  [72,]  0.0357076274  0.0229601533  0.005095061  0.0017181385 #>  [73,] -0.0231309286 -0.0479159137  0.028314006 -0.0165427397 #>  [74,]  0.0415386613 -0.0221352559  0.015396115  0.0232373388 #>  [75,] -0.0348869239 -0.0448330908  0.047606187  0.0106966854 #>  [76,]  0.0253965649  0.0290720587  0.015670469 -0.0430178287 #>  [77,] -0.0479325875  0.0487698218 -0.049496241 -0.0271816092 #>  [78,] -0.0001826605 -0.0490405730 -0.038765256  0.0096133667 #>  [79,] -0.0109943578  0.0340992453 -0.033347206 -0.0383510709 #>  [80,] -0.0307794619  0.0225772991  0.014908686 -0.0347243825 #>  [81,] -0.0404083670 -0.0291443344  0.011487250 -0.0466620282 #>  [82,] -0.0127275979 -0.0009079289  0.011397636  0.0008147368 #>  [83,] -0.0359342281 -0.0412632473  0.037161177 -0.0178322429 #>  [84,] -0.0487924160 -0.0006198183  0.039001489 -0.0013549264 #>  [85,]  0.0319013681 -0.0295031329  0.009417408 -0.0139003184 #>  [86,]  0.0306152622 -0.0404827507 -0.014109675 -0.0281517614 #>  [87,] -0.0040673974 -0.0214823572  0.048997115 -0.0043045224 #>  [88,] -0.0157591008 -0.0369237602 -0.047615878  0.0126707347 #>  [89,] -0.0274727595 -0.0237149512  0.007065461  0.0206500478 #>  [90,] -0.0017752889  0.0227769018  0.010523320 -0.0239284310 #>  [91,] -0.0045398859  0.0351648150 -0.029063431  0.0212146054 #>  [92,]  0.0099924972 -0.0009740921 -0.049732513 -0.0236133712 #>  [93,] -0.0158017890  0.0368753227  0.007839739 -0.0449493300 #>  [94,]  0.0313287776  0.0190020639  0.016910303  0.0062411134 #>  [95,] -0.0383533302 -0.0059064964 -0.033586488  0.0027902156 #>  [96,] -0.0440198813  0.0262138775  0.017675678  0.0197057987 #>  [97,] -0.0117220946  0.0469231449  0.020838287  0.0021704347 #>  [98,] -0.0081496359 -0.0045200395  0.013948086 -0.0310464339 #>  [99,]  0.0130012767 -0.0140521320 -0.023699761  0.0317625453 #> [100,]  0.0424385834 -0.0423046128 -0.004630538  0.0074610829"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/swiss_roll.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Swiss Roll Data — swiss_roll","title":"Generate Swiss Roll Data — swiss_roll","text":"function generates data points shape Swiss roll.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/swiss_roll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Swiss Roll Data — swiss_roll","text":"","code":"swiss_roll(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/swiss_roll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Swiss Roll Data — swiss_roll","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/swiss_roll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Swiss Roll Data — swiss_roll","text":"matrix containing generated Swiss roll data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/swiss_roll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Swiss Roll Data — swiss_roll","text":"","code":"# Generate Swiss roll data with noise with custom parameters data <- swiss_roll(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_circulars_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","title":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","text":"function generates three circular clusters 4D space added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_circulars_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","text":"","code":"three_circulars_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_circulars_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_circulars_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","text":"matrix containing three circular clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_circulars_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Circular Clusters with Noise — three_circulars_with_noise","text":"","code":"circular_clusters_data <- three_circulars_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_cluster_mirror_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","title":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","text":"function generates data three clusters forming mirror image, along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_cluster_mirror_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","text":"","code":"three_cluster_mirror_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_cluster_mirror_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_cluster_mirror_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_cluster_mirror_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Cluster Mirror with Noise — three_cluster_mirror_with_noise","text":"","code":"# Generate three cluster mirror with noise with custom parameters data <- three_cluster_mirror_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_clusters_data_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","title":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","text":"function generates three clusters data points along optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_clusters_data_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","text":"","code":"three_clusters_data_with_noise(   sample_size,   num_dims,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_clusters_data_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","text":"sample_size Total number data points generate, multiple three. num_dims Number dimensions data point. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_clusters_data_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","text":"matrix containing generated data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_clusters_data_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate three clusters of data points with optional noise. — three_clusters_data_with_noise","text":"","code":"three_clusters_data_with_noise(sample_size = 100, num_dims = 7, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #> Warning: The sample size should be a product of three. #>               [,1]        [,2]         [,3]        [,4]        [,5]        [,6] #>   [1,] -2.19314883  0.90630179  1.380969258 -0.03805258 -1.57385502  0.41775847 #>   [2,] -0.10582958 -0.33874867  0.648129677  0.32545462 -0.71557040 -0.31871094 #>   [3,] -0.05757660  0.33003905  0.656409074 -0.57594431 -0.70668125 -0.78400108 #>   [4,] -2.24476178 -1.46939081  0.334765439 -0.13777281 -1.02296262  0.26052864 #>   [5,]  0.71777153 -0.21671085 -1.714935816  1.40151928  0.29486649  0.91885170 #>   [6,]  0.43844893  0.28230361 -0.870314395  0.98611613  0.62580293 -0.13448269 #>   [7,] -0.52061902  1.78688578  1.684569930 -1.09661086 -1.06293213 -0.62154305 #>   [8,]  0.40538549  1.46325751  2.354757201 -0.50834146 -0.86546609 -0.41195810 #>   [9,]  0.69832814 -0.43437912 -0.536674265  2.05718479 -3.14684444 -0.14722458 #>  [10,] -1.03225893 -0.19178881 -2.642450917 -0.71104875 -0.27156150  0.26815832 #>  [11,] -0.08245575  1.18805912 -0.751602749  0.73114007 -0.06244142  0.04168728 #>  [12,] -0.31262335  0.68457766 -0.134013365  2.28625174  0.11465867  1.77709426 #>  [13,] -0.61910957 -0.46915804  1.519195498 -1.57381532  2.20558200 -2.06428276 #>  [14,]  0.51624799  0.43339430 -1.247878620 -1.69120071  1.78916980  0.08339923 #>  [15,] -1.02136451  0.88859425 -0.775842928  0.46046969  0.71614596  0.03196105 #>  [16,]  0.14417026 -0.44415079  0.433968765  0.30839088  0.77822454 -0.57875984 #>  [17,] -0.22273786 -1.05021689  1.383817591  0.72023293  0.29669522  1.98778213 #>  [18,] -1.62012167 -1.49600766 -0.484752664  0.99310755  0.36459430  0.48622746 #>  [19,] -1.42116839 -0.78549513  0.179575195  1.48148191  0.92196799 -0.55196645 #>  [20,] -0.74335497 -0.46933299 -1.722038515  0.26963193 -1.21454123 -1.48730129 #>  [21,]  0.49348896  1.71403915  0.749349460  0.07046417 -1.57816632  1.38274046 #>  [22,] -1.23718221  0.27656809 -1.142122667  0.35800074 -0.43775045 -0.68156648 #>  [23,] -1.42839566  0.66464368 -0.848217940 -0.04823147 -2.53920920  0.47115652 #>  [24,]  0.10522845  0.47869322 -0.228190941 -0.50600313  0.34395273  0.09105672 #>  [25,] -0.02738123 -0.19441088  0.860046410 -0.28500427  0.57156703 -1.39164050 #>  [26,] -0.72837193  0.05085676  1.198040998 -0.45552307 -0.26108849 -0.03480334 #>  [27,]  1.30549327 -0.67453661 -1.322963068 -1.50353368 -0.30348987  0.17337844 #>  [28,] -0.29228466 -0.55565426  2.406269443  0.29289643  0.11438018 -0.70021418 #>  [29,]  0.75969178 -1.00629840 -0.784569409  0.96163093 -0.12011629  0.44755155 #>  [30,] -1.87660075  1.60598805 -1.503845974 -0.33579362 -1.78569781  1.47718534 #>  [31,]  1.04266809  0.22361696 -0.019541596  2.83273229 -2.42117937 -1.53150751 #>  [32,]  0.39983974  0.72721942 -2.975027474 -0.01564961 -0.17132628 -0.63944921 #>  [33,] -0.54829624  0.61232961  0.205869654  0.49399658 -0.08768444  1.00816466 #>  [34,]  9.02332451  1.77285522  1.573647193 -0.75135681  0.23547776  0.63115187 #>  [35,]  9.82144119  0.79569789 -2.491792394 -0.15800248 -0.23391480  0.25884441 #>  [36,]  9.69472559  0.62865756  0.013867083  0.56569175 -1.73717181 -0.94982275 #>  [37,]  9.15905148 -0.26317152  0.255707692 -0.27003152  0.75456043  0.07272108 #>  [38,]  8.81736561 -0.74224317 -1.788046159 -0.26701221 -0.49228317 -1.50865753 #>  [39,]  7.35428281 -0.61719596 -0.001171215  1.93229718  0.04436402 -0.01645098 #>  [40,] 10.57444335  0.45964636 -0.063603651 -0.07799508  0.66179282 -1.28632407 #>  [41,]  9.35007552 -0.03791945 -2.216567972  0.06715127  0.75348936 -1.06566264 #>  [42,]  8.95505678 -0.05720700 -0.433965800  1.64654885 -0.77876600 -0.80901866 #>  [43,]  9.13781585 -0.85219437 -0.174910891  0.08035232 -0.32767425  0.54383477 #>  [44,] 10.15895549  0.05857071  1.197774782 -0.24664449  0.55396019  0.31346565 #>  [45,]  9.38862434  0.31936487 -0.957200429  0.21883616 -1.42404049 -0.63079327 #>  [46,] 10.57863917  0.80937344  1.226253463  1.15733240  0.32768566  0.56537802 #>  [47,] 10.96598901 -0.45374484  0.293641899 -1.64677081 -0.88914941 -1.45336999 #>  [48,] 10.65670620  0.11350631 -0.092744648  0.01357618  0.38573884  0.63148522 #>  [49,]  9.73080275  0.47273722  0.682857709  0.89127114  1.20869909  0.50802111 #>  [50,]  9.85131993 -0.30952228 -1.107403925 -2.11046210  0.24752176  0.77802917 #>  [51,] 11.05372128 -0.11015182  0.380869049 -0.54067764  0.12066406  1.78413184 #>  [52,] 11.09153427  0.55208515  1.161753119 -0.26413408 -0.73134632 -1.58425380 #>  [53,]  9.13897212 -0.52962028 -1.176647849 -0.25054874 -0.44380428 -0.13340667 #>  [54,] 10.30709500 -0.51133625  0.032289268 -0.93956381 -0.09125948 -0.12528420 #>  [55,]  8.95215906 -2.09842604  1.417947366  1.02418263  0.57466467 -1.97368624 #>  [56,]  8.73552121 -0.98290078  1.116219456 -1.31911199  0.21258092 -0.32221529 #>  [57,]  9.68898786 -0.60575819  1.499080292 -0.62522131 -1.43493670  0.67581861 #>  [58,]  9.90405304 -0.32411375  1.303118251 -0.18668081  0.53637913  0.17039987 #>  [59,] 10.36063629 -0.38681257  0.951268577 -1.02416375  0.30771960 -0.13776886 #>  [60,] 10.33966642  1.29923407 -2.345182229  0.20719848 -1.20904556  1.03855443 #>  [61,] 10.15000929 -0.76150018 -1.252802335 -0.83763180 -0.89293989 -0.79939715 #>  [62,]  7.92429143  0.19681458  1.555980063  0.32928997 -0.58448668  0.01831979 #>  [63,]  8.86726029  0.30926194 -0.288725712  0.37346086  1.08480773 -0.43658607 #>  [64,]  9.03252228 -1.68711949  0.725702421  0.51307298  0.77307307 -0.57606358 #>  [65,]  9.39136752 -1.28782799  0.298667897  1.13034236 -0.21024432 -1.23511443 #>  [66,] 10.50488402  0.19515798  0.430335047 -0.58074076 -0.51542316 -0.07316060 #>  [67,] 49.37853101 -0.06350457  1.074907978 -0.05433793 -0.84327375 -0.88017888 #>  [68,] 49.14310409 -0.35414955  1.596855643 -1.23698114  0.05406275  0.30997376 #>  [69,] 49.72524147 -0.12840965  0.505833283  1.53731799 -0.21819288 -0.88581661 #>  [70,] 50.11160827 -1.53970371 -0.202906855 -0.02297115  0.63159555 -0.03993655 #>  [71,] 50.16439350 -1.10522105 -0.895818632 -0.37476117  0.80447572 -0.01955094 #>  [72,] 49.72260938  0.58785269  0.641600576  1.31984976 -0.80543765 -1.05231887 #>  [73,] 50.44975807  1.54416680  0.947031618  0.54846813 -0.63953489  1.59077828 #>  [74,] 48.81863288 -0.49387934 -1.431079992  0.72041532 -0.74258793 -0.21876194 #>  [75,] 50.58919275 -1.58109218 -1.042310172 -1.82439212 -0.43876314  0.07734078 #>  [76,] 51.63273117  0.87117564  0.305218777  0.64826256  0.04905887  0.74410957 #>  [77,] 49.96963582 -1.11997691  0.714244396 -0.87458087 -0.15346926  0.93130357 #>  [78,] 50.57898073 -1.40185127 -0.355163037 -0.85426776  1.70716560  0.19943848 #>  [79,] 51.70757004  0.86617571  1.091601767 -1.10530316  0.24224391 -0.24534840 #>  [80,] 51.89473320  0.36438920 -0.151654105  0.74636131  0.26769474  1.06049460 #>  [81,] 49.22386536  1.73358241 -0.660721206  1.16110455  1.82223650 -0.05057228 #>  [82,] 50.43952610 -0.38073592  0.051558506 -0.69753915 -2.77278313 -0.41563868 #>  [83,] 50.05240483  0.40635815  0.428999266  0.02657036  1.75617721 -1.78090984 #>  [84,] 51.01422526 -0.59384316  0.810462945 -1.80483230  2.75183444  1.35820381 #>  [85,] 49.96047437  0.11154742  0.557180273  0.12081969 -0.10591972 -0.32354376 #>  [86,] 50.32072765 -1.99153088 -0.307176870 -0.14097947  1.34892931  1.42537629 #>  [87,] 48.66000274  0.51588303  0.709729392  0.24696245 -1.96713725  0.63611110 #>  [88,] 50.22010066  1.26005437 -0.664042710  1.26160007 -1.26747441 -1.27839277 #>  [89,] 49.95641765 -2.23933951  1.417106288 -0.93741279 -1.68307518 -1.67845517 #>  [90,] 49.55327105  0.41963987  0.096232880 -0.24470616  0.84659603  0.84464861 #>  [91,] 49.43682764 -0.04047970  0.564049818  0.36280194  0.85517057 -0.85005405 #>  [92,] 49.74994534  0.70874232 -0.083933252  0.47472215  0.97152932 -0.34215600 #>  [93,] 50.20164039  0.98786681 -0.022151098  0.94480883  0.59645022  0.65832243 #>  [94,] 50.84875280 -0.02794175  0.463155161  0.37414965 -0.02187159 -0.33246867 #>  [95,] 49.35451302 -0.49240341  0.488315427 -0.24767760 -0.69623250 -0.71784941 #>  [96,] 49.39973790  0.37776417  0.948299325 -1.50140310  1.12508054 -0.86853673 #>  [97,] 49.01546709  0.02152830 -1.657096056  1.17050783  0.08673689 -0.31713250 #>  [98,] 50.51355291  2.66840566  0.077922960  2.17488162  0.41238564  0.02937130 #>  [99,] 50.19956860  0.48035441 -0.429685292  0.48179432  0.16606044  1.18064402 #>                [,7]          [,8]          [,9]        [,10]         [,11] #>   [1,]  0.564327616  4.042422e-02 -0.0386524449 -0.037850994  0.0230355620 #>   [2,]  1.284955456  2.706632e-02 -0.0380654131  0.019806420 -0.0464702945 #>   [3,] -0.625058982  2.868065e-02  0.0008586671 -0.025721422  0.0397901131 #>   [4,]  0.161155760  2.536803e-02  0.0152503848  0.011260015  0.0436177553 #>   [5,]  0.645447324 -3.080172e-02 -0.0431983415  0.024827206 -0.0290140109 #>   [6,]  0.686162694  4.772631e-02 -0.0044149122  0.044541804  0.0362886753 #>   [7,] -0.816625837  3.666532e-02 -0.0082004807 -0.040707324  0.0071622534 #>   [8,]  0.831897637  4.191320e-02 -0.0327135013 -0.020245210 -0.0057862737 #>   [9,] -0.165422319  1.741796e-02 -0.0332354474 -0.019267677 -0.0461359359 #>  [10,]  0.881780623 -8.178367e-03  0.0134352890  0.020571771 -0.0498253466 #>  [11,]  0.298690917  4.231087e-02  0.0346757744 -0.045383769  0.0490436703 #>  [12,]  1.239074792 -1.476578e-02  0.0375633751  0.002641426  0.0073355934 #>  [13,]  1.278945293 -3.075290e-02  0.0275703301 -0.036002234  0.0022295303 #>  [14,] -0.545577904  1.736488e-02  0.0318245156 -0.035776996 -0.0295749091 #>  [15,] -0.491791113  4.719218e-03 -0.0414107800 -0.025089814 -0.0417353933 #>  [16,]  0.076394878 -1.282811e-02  0.0182842540  0.006181339 -0.0165278192 #>  [17,]  0.839446864 -2.934835e-02  0.0218355500  0.008597190 -0.0391062590 #>  [18,] -0.487047902 -5.929361e-03  0.0333146504 -0.038968778  0.0067514870 #>  [19,]  0.003444717 -4.520392e-02  0.0362531248 -0.023803585 -0.0015041380 #>  [20,]  0.722430344 -1.069017e-02  0.0069976041 -0.014359351 -0.0090125197 #>  [21,] -0.957981536 -1.256171e-02  0.0122582562 -0.004556570  0.0046156519 #>  [22,]  0.502105588  7.869771e-03 -0.0056410545 -0.001177076 -0.0033800514 #>  [23,] -0.080286491  2.605670e-02 -0.0173053467 -0.001069752  0.0167556488 #>  [24,]  0.241734694  4.831015e-02  0.0120701199  0.046458852  0.0394483536 #>  [25,]  1.310461110 -4.101518e-02 -0.0256430729 -0.024017451 -0.0446575628 #>  [26,]  0.896122608  4.786699e-02 -0.0007919788  0.037455750  0.0469723496 #>  [27,] -0.513487824  8.491204e-03 -0.0304532066  0.001854014 -0.0448599732 #>  [28,]  0.521876441  1.254057e-02  0.0176766022  0.031500933  0.0129582276 #>  [29,]  1.300212710 -3.098916e-02  0.0109321790  0.018941839 -0.0056066030 #>  [30,]  1.746410410  3.649483e-03  0.0139929644 -0.008427741  0.0203856640 #>  [31,] -0.962577048 -1.626492e-02 -0.0319041454  0.024739780 -0.0220490272 #>  [32,]  0.659490364  4.776044e-02  0.0127570285 -0.006233312 -0.0084177858 #>  [33,]  0.620212162 -2.679000e-02  0.0396905482  0.014497841 -0.0486719050 #>  [34,] -0.485527873 -1.688647e-04  0.0132083341  0.007759455  0.0303796712 #>  [35,]  0.171547533  2.911234e-02 -0.0453616493 -0.027210044  0.0182231972 #>  [36,] -1.158670385  4.075171e-02 -0.0276556141 -0.015801341  0.0001404131 #>  [37,]  0.660939962  3.125530e-02  0.0073249945  0.040082700  0.0427050776 #>  [38,] -0.364266566  4.693764e-03  0.0297576727 -0.007479337  0.0212919864 #>  [39,] -0.390424343 -4.285985e-02  0.0106489951 -0.044682368 -0.0140526580 #>  [40,] -1.456147701 -4.491657e-02  0.0245702764  0.008002542  0.0193926302 #>  [41,] -1.989762840  1.857689e-02 -0.0178545069 -0.012294158 -0.0129835188 #>  [42,] -0.429556514  3.706078e-02 -0.0159003206  0.031889731 -0.0022254417 #>  [43,] -0.240403233  3.194818e-02  0.0447471770 -0.035222778  0.0117401400 #>  [44,] -0.511468599  7.227175e-03  0.0468975492  0.037459523  0.0068247873 #>  [45,] -0.264161607  4.379368e-02  0.0281376664 -0.033672730 -0.0096285778 #>  [46,]  1.773762272 -3.026703e-02  0.0241120597  0.049647795 -0.0049848125 #>  [47,]  0.610667978 -4.624916e-03  0.0350392195 -0.046649312 -0.0209032410 #>  [48,]  0.382627411 -1.519407e-02  0.0134902223  0.005776603  0.0178341377 #>  [49,]  0.511784788  1.975296e-02  0.0324176193  0.049607396  0.0323232627 #>  [50,]  0.292209403 -3.607914e-02  0.0392813073  0.029176930 -0.0366059244 #>  [51,] -0.152449819  3.098516e-02 -0.0424384317 -0.031116040 -0.0199414371 #>  [52,]  0.173895834 -2.318124e-02  0.0081701874  0.021782364 -0.0047036141 #>  [53,] -0.139718649  4.098419e-02 -0.0264623580  0.036520940  0.0047313797 #>  [54,] -0.959306991  3.997992e-02 -0.0090396144  0.049074027 -0.0043193338 #>  [55,] -0.585600595  3.493268e-02  0.0496368643  0.014704934  0.0370245442 #>  [56,]  0.590306768  4.828303e-02  0.0123792257 -0.010774099 -0.0162397272 #>  [57,] -1.307490833 -1.186714e-02  0.0228386260  0.026563613 -0.0471876693 #>  [58,] -1.995439504 -3.423708e-02  0.0250458616  0.035769918 -0.0336316298 #>  [59,]  0.958217242  3.059111e-02 -0.0120871730 -0.044496227  0.0208042996 #>  [60,]  0.081612862  1.056960e-03 -0.0248446313  0.021610996 -0.0020275788 #>  [61,]  2.133551115 -4.835289e-02 -0.0025647172  0.035112763 -0.0387384678 #>  [62,]  0.239718258 -1.164140e-02  0.0247115278  0.033675197 -0.0370666194 #>  [63,] -1.267398571  3.041864e-02 -0.0201092135 -0.046766203 -0.0306514346 #>  [64,]  1.728769159 -3.667411e-02  0.0122284327 -0.037164096  0.0202300003 #>  [65,]  1.027258786  4.462335e-02  0.0391451758  0.023033043  0.0142592933 #>  [66,]  1.311992528  2.180849e-02 -0.0121642071  0.033421048  0.0094605768 #>  [67,]  2.400414483  3.829580e-02  0.0436892926  0.005538457 -0.0329641509 #>  [68,] -0.525416481  2.863905e-02  0.0172992665  0.005614134 -0.0371599268 #>  [69,] -1.259249057  4.441746e-02 -0.0419492389 -0.004158913 -0.0249414600 #>  [70,]  0.111049516 -5.719125e-03 -0.0484853951 -0.001159024  0.0319756642 #>  [71,] -1.373715984 -1.485155e-02 -0.0381173596 -0.023118861 -0.0220866299 #>  [72,] -1.519005963 -3.098153e-02  0.0209353369  0.033257312 -0.0205802375 #>  [73,] -0.024220628 -1.316090e-02 -0.0357554186 -0.036162413  0.0357807948 #>  [74,] -0.299527100 -1.517174e-02 -0.0491017628 -0.007956220  0.0248531149 #>  [75,]  0.879736063  2.813185e-02  0.0432806557  0.027702208 -0.0108748715 #>  [76,] -0.984978128 -1.200771e-02 -0.0230415274  0.016699068 -0.0022310298 #>  [77,] -0.814807166 -3.645480e-02  0.0033454647  0.016824624  0.0483912582 #>  [78,]  0.500687707 -2.703718e-02 -0.0091294925  0.032347168 -0.0342942488 #>  [79,] -0.481256885 -4.891962e-02 -0.0082337446  0.021051342  0.0293481530 #>  [80,]  0.489558955  1.250599e-02  0.0433702388  0.013245288 -0.0321273669 #>  [81,]  0.278115377  2.912626e-02  0.0067505342 -0.040422528 -0.0443262044 #>  [82,] -1.024025741 -3.595826e-02  0.0382706701  0.032649443  0.0003696824 #>  [83,]  0.590915342 -3.832016e-03 -0.0125876472  0.046681286 -0.0162919476 #>  [84,] -0.119032020 -1.991772e-02 -0.0211898650  0.048567265  0.0112345540 #>  [85,] -1.071944937  1.876798e-02 -0.0363260629 -0.021976858  0.0301381673 #>  [86,] -0.427702375  2.911250e-02  0.0397010307  0.041231497  0.0053759863 #>  [87,] -1.219065367  4.864002e-02 -0.0414049126  0.001736963  0.0492312837 #>  [88,] -1.552424417  3.012929e-03 -0.0054614848 -0.024974829 -0.0376336952 #>  [89,]  0.321980131 -2.234471e-03  0.0048218299 -0.032078836 -0.0007810471 #>  [90,]  2.016702716 -4.773749e-02  0.0010735424 -0.018514950 -0.0279793007 #>  [91,] -0.322211237 -1.487279e-02  0.0002972984 -0.003404786 -0.0085484510 #>  [92,]  1.604406334 -1.700475e-02  0.0382741228 -0.022321683  0.0133881637 #>  [93,] -0.512531126  2.189897e-02 -0.0041231070  0.015385182  0.0064739871 #>  [94,]  2.709113867 -2.800049e-05 -0.0097657378 -0.044152735  0.0382531768 #>  [95,]  0.187388608  2.853468e-02  0.0497524523  0.013911928 -0.0235968283 #>  [96,]  0.882101393 -1.758749e-02  0.0383343335  0.019511647  0.0027662017 #>  [97,]  0.390939448 -1.821725e-02 -0.0484373735  0.012115257 -0.0284862126 #>  [98,]  1.065135043 -7.992357e-03  0.0490414470  0.019409797 -0.0309171153 #>  [99,] -0.018143104 -2.035458e-02 -0.0254209649 -0.040326768  0.0211005686"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_diff_linear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","title":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","text":"function generates dataset consisting three different linear patterns added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_diff_linear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","text":"","code":"three_diff_linear_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_diff_linear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_diff_linear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","text":"matrix containing three different linear data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_diff_linear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Different Linear Data with Noise — three_diff_linear_with_noise","text":"","code":"three_diff_linear <- three_diff_linear_with_noise(sample_size = 150, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_doublets_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","title":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","text":"function generates data three sets doublets (pairs clusters) along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_doublets_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","text":"","code":"three_doublets_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_doublets_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_doublets_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_doublets_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets with Three Clusters and Noise — three_doublets_with_noise","text":"","code":"# Generate doublets with three clusters and noise with custom parameters data <- three_doublets_with_noise(sample_size = 420, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_grid_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Grids with Noise — three_grid_with_noise","title":"Generate Three Grids with Noise — three_grid_with_noise","text":"function generates three grid datasets noise dimensions. function generates three grid data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_grid_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Grids with Noise — three_grid_with_noise","text":"","code":"three_grid_with_noise(   n_value = 19,   num_noise_dims = 4,   min_noise = -0.05,   max_noise = 0.05 )  three_grid_with_noise(   n_value = 19,   num_noise_dims = 4,   min_noise = -0.05,   max_noise = 0.05 )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_grid_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Grids with Noise — three_grid_with_noise","text":"n_value number grid points along dimension. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_grid_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Grids with Noise — three_grid_with_noise","text":"list containing three grid datasets added noise sample  size dataset. list containing generated data matrix (`df`) total sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_grid_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Grids with Noise — three_grid_with_noise","text":"","code":"three_grids <- three_grid_with_noise(n_value = 19, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)  # Generate grid data with noise with custom parameters data <- three_grid_with_noise(n_value = 19, num_noise_dims = 4,  min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_linear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Linear Clusters with Noise — three_linear_with_noise","title":"Generate Three Linear Clusters with Noise — three_linear_with_noise","text":"function generates data three linear clusters, along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_linear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Linear Clusters with Noise — three_linear_with_noise","text":"","code":"three_linear_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_linear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Linear Clusters with Noise — three_linear_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_linear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Linear Clusters with Noise — three_linear_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_linear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Linear Clusters with Noise — three_linear_with_noise","text":"","code":"# Generate three linear clusters with noise with custom parameters data <- three_linear_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_nonlinear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","title":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","text":"function generates data three nonlinear clusters, along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_nonlinear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","text":"","code":"three_nonlinear_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_nonlinear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_nonlinear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/three_nonlinear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Three Nonlinear Clusters with Noise — three_nonlinear_with_noise","text":"","code":"# Generate three nonlinear clusters with noise with custom parameters data <- three_nonlinear_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_3d_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a row of data points for a 3D torus. — torus_3d_row","title":"Generate a row of data points for a 3D torus. — torus_3d_row","text":"function generates row data points 3D torus given radii.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_3d_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a row of data points for a 3D torus. — torus_3d_row","text":"","code":"torus_3d_row(radius)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_3d_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a row of data points for a 3D torus. — torus_3d_row","text":"radius numeric vector containing radii torus, largest smallest.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_3d_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a row of data points for a 3D torus. — torus_3d_row","text":"vector representing row data points 3D torus.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_3d_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a row of data points for a 3D torus. — torus_3d_row","text":"","code":"torus_3d_row(c(2, 1)) #> [1] -1.6687196 -1.0695564 -0.9998391"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","title":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","text":"function generates torus-shaped dataset along optional noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","text":"","code":"torus_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","text":"sample_size Total number data points generate. num_noise_dims Number additional noise dimensions add data. min_noise Minimum value noise added data. max_noise Maximum value noise added data.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","text":"matrix containing generated torus-shaped data points without added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/torus_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a torus-shaped dataset with optional noise. — torus_with_noise","text":"","code":"torus_with_noise(sample_size = 100, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05) #>               [,1]        [,2]         [,3]         [,4]          [,5] #>   [1,]  1.75596439  2.32702846 -0.402968256 -0.035220649 -0.0413890014 #>   [2,] -0.31627536 -0.99117170 -0.281399410 -0.047708134 -0.0070030712 #>   [3,] -2.41033011 -1.51358369  0.532928923 -0.026895262  0.0361978746 #>   [4,] -1.64041720  1.06934926  0.999125241 -0.008843861  0.0032281447 #>   [5,] -1.39108948  0.74806168 -0.907278741  0.039767782 -0.0369721360 #>   [6,]  0.64159533 -1.60282597 -0.961863224 -0.018150367  0.0411472063 #>   [7,]  2.53925523  1.50557020  0.305963812 -0.042268784  0.0399192747 #>   [8,]  0.20512912  1.00917460  0.242350767 -0.049610272  0.0063302057 #>   [9,]  1.15256725 -0.48146815  0.660403199  0.019296562  0.0318057873 #>  [10,]  0.53827074  1.06314845 -0.588696607  0.028215118 -0.0249199912 #>  [11,]  2.76356813 -0.84556923  0.455894287  0.008979859 -0.0180578328 #>  [12,]  1.91116384 -0.30047659 -0.997861774  0.025402755 -0.0078388975 #>  [13,] -0.15473809  2.87152435  0.482872765 -0.031466889  0.0135346089 #>  [14,]  2.41431680  1.27023909  0.685489741 -0.026466946  0.0009568886 #>  [15,]  0.04950259  1.14970751  0.528027496  0.011576106 -0.0142152189 #>  [16,] -0.46466245  1.12398383 -0.621069578 -0.015868054 -0.0386087419 #>  [17,]  1.24139525  0.41288269 -0.722143004 -0.036141318  0.0383671022 #>  [18,]  1.94372104 -0.99364881 -0.983117157 -0.028705032  0.0411669702 #>  [19,] -0.70151756 -1.48292784  0.933140577  0.030453105  0.0201116817 #>  [20,]  0.75748078 -0.65289175 -0.006690021 -0.041348666  0.0375252078 #>  [21,] -0.61968814 -0.94759875  0.496975283 -0.031346469  0.0468601100 #>  [22,]  2.65242640 -1.15705113  0.448446964 -0.008711458 -0.0427922674 #>  [23,] -0.71247310  1.55030201  0.955861134 -0.035708845 -0.0079684225 #>  [24,]  0.98817753 -0.28199108  0.233425546 -0.040389311  0.0422511406 #>  [25,] -1.32183502  0.82030963  0.895870609 -0.047890890 -0.0408170913 #>  [26,] -0.12587438  1.10005186 -0.450512899  0.039022108  0.0485213517 #>  [27,] -2.65131035 -0.62428514  0.689992093  0.043298258  0.0213965312 #>  [28,]  2.50532575  1.61335606 -0.199678081 -0.027863876 -0.0168641825 #>  [29,] -1.10925771  0.58935609  0.668293636 -0.001364039  0.0067950562 #>  [30,] -2.35215797 -1.40394333  0.673388325 -0.035106546 -0.0039661721 #>  [31,] -0.15673893 -1.03654590 -0.307120546  0.017399470  0.0347263255 #>  [32,]  0.12523397 -2.53120030 -0.845297169 -0.030794455 -0.0266020129 #>  [33,] -1.04689149 -1.98916233  0.968803032  0.023072892  0.0443006858 #>  [34,] -1.68226587 -0.09412788 -0.949057540 -0.032548941 -0.0351835602 #>  [35,]  1.66620496 -1.78313532 -0.897775701  0.039135945 -0.0254672030 #>  [36,] -2.50032264 -1.19040228  0.638964142  0.001362512  0.0372412618 #>  [37,] -0.94018279 -1.31860094 -0.924764642 -0.031502645 -0.0263276917 #>  [38,] -0.89050497  0.55834676  0.315489641 -0.036047550 -0.0260977332 #>  [39,]  1.22814268 -1.90193379 -0.964523250  0.028044433  0.0392256111 #>  [40,] -1.14992630  1.02538431 -0.888279029 -0.049002150 -0.0325477761 #>  [41,]  0.41139831 -1.06243324  0.509118763 -0.047470851 -0.0142261531 #>  [42,]  1.42667161 -0.40761761  0.856444015  0.044633782  0.0359497275 #>  [43,]  1.15652034 -1.91601826  0.971263989  0.020616366 -0.0373747984 #>  [44,] -0.65521908 -1.14665820  0.733821639 -0.004581891  0.0124696270 #>  [45,] -0.77895984 -2.89223362 -0.096888248  0.018971746 -0.0104161012 #>  [46,]  2.65888296 -1.36597940  0.146298960  0.009015472 -0.0139370589 #>  [47,]  1.99032131  0.24513349 -0.999985634 -0.007582631  0.0441316154 #>  [48,] -1.95409534 -1.10985042  0.968944681 -0.039681346 -0.0490629904 #>  [49,] -2.15394557  1.90357012  0.484928131  0.016611275 -0.0137041819 #>  [50,]  0.98795167  0.33454289 -0.290275177 -0.037618171 -0.0195972586 #>  [51,]  1.20697100 -0.75467828 -0.817088737 -0.047370342 -0.0225775151 #>  [52,] -1.24904699  0.37569825  0.718358096 -0.028656463 -0.0369493379 #>  [53,]  2.27298058 -1.67478700  0.567521873  0.040269858 -0.0138401185 #>  [54,] -0.87956641  1.66383197 -0.993015170 -0.037872026  0.0464528964 #>  [55,] -1.07855023  0.33037351  0.489532136 -0.008815536 -0.0075613866 #>  [56,] -2.14637609 -0.37649328  0.983822491  0.029240300 -0.0309259859 #>  [57,] -0.03242686 -1.00119325 -0.058596312  0.044173142  0.0380746909 #>  [58,] -0.46606933 -0.95592183  0.350636071  0.034253678  0.0167759117 #>  [59,] -1.54603909  2.34124511  0.592393372  0.023766878  0.0237321745 #>  [60,] -2.59127117  1.12763047 -0.563680297 -0.019719704  0.0303163804 #>  [61,]  1.09954579  0.17134489 -0.461416292  0.002931907  0.0350885266 #>  [62,]  1.82414685 -1.04069735 -0.994973964 -0.045572575  0.0234708515 #>  [63,]  0.25127350  1.38480829  0.805511945 -0.000767401 -0.0487990947 #>  [64,]  0.87775609  1.43099533  0.946994606 -0.010241389 -0.0413011562 #>  [65,] -1.98276091 -0.59553626 -0.997528240 -0.030745791 -0.0288850958 #>  [66,]  1.46066673 -0.50122944  0.890119459 -0.010138801  0.0025170439 #>  [67,] -1.71473604  2.17701373 -0.636558168 -0.045365448  0.0325163940 #>  [68,] -0.81144954  0.86830259  0.584275000 -0.015533447 -0.0332528251 #>  [69,] -1.94746260 -0.39750781  0.999923333 -0.023409305 -0.0104095605 #>  [70,] -1.40576128 -2.32468953 -0.697402928  0.048599400 -0.0177573336 #>  [71,] -2.19787665  0.16840131  0.978904431 -0.011586869 -0.0039292349 #>  [72,] -0.20547603  2.98084522 -0.154972529  0.023697786 -0.0280672709 #>  [73,]  2.02368182  2.01855960  0.513150555 -0.032803816 -0.0363123827 #>  [74,]  2.82289072 -1.01427585  0.029052423 -0.015033471 -0.0481486798 #>  [75,] -0.39600978 -2.31992382  0.935441908  0.018560811  0.0071866081 #>  [76,] -0.65249959 -0.80967586  0.279555707  0.040005419 -0.0273290583 #>  [77,]  2.63532689  0.51115971 -0.729066749 -0.036950103  0.0200688085 #>  [78,] -1.29246119  0.64592527  0.831769616 -0.028027540 -0.0428461904 #>  [79,] -0.99281688 -2.22706429  0.898809363  0.009074518 -0.0324983501 #>  [80,] -1.23517893 -0.10034570 -0.649042981  0.028130975 -0.0349277206 #>  [81,]  1.16062872 -1.06606816  0.905630155  0.048502879 -0.0111150932 #>  [82,]  0.20624924  1.36731683  0.786794457 -0.017939755  0.0257509095 #>  [83,]  2.54730128  0.53630509  0.797631114  0.012253383  0.0162511526 #>  [84,]  1.57284282 -1.91612789 -0.877821544 -0.019601148 -0.0394674942 #>  [85,] -0.40020379  2.21835679  0.967160285 -0.020980399 -0.0049157295 #>  [86,] -1.95978005  0.24037878 -0.999673979  0.031964127  0.0253965042 #>  [87,] -2.22088151  0.23816421 -0.972329131 -0.032292374  0.0099579119 #>  [88,] -0.57884100 -1.51800447 -0.926871541 -0.005871122 -0.0301681072 #>  [89,]  1.74244403  1.42420607  0.968132470 -0.026190765  0.0495881533 #>  [90,] -1.71680881  1.46251863  0.966861000  0.047064107  0.0215314501 #>  [91,]  1.28802319  0.81580621  0.879794282  0.029292961  0.0055103527 #>  [92,]  0.95990980  0.48310190  0.379047653  0.019510498 -0.0014198164 #>  [93,] -1.69011896  2.11675197 -0.705494146 -0.006819493  0.0353692735 #>  [94,]  0.90247955  0.59268316 -0.391203117 -0.022548103 -0.0244210305 #>  [95,] -0.71496556  1.73740808 -0.992623985 -0.048144334 -0.0284167386 #>  [96,]  2.63838589  0.24250565 -0.760355329 -0.039582591 -0.0414769596 #>  [97,] -1.54547503 -2.57092321  0.024903670 -0.030479953  0.0192226702 #>  [98,] -0.17749615 -1.88895383  0.994709767  0.045122221  0.0147487297 #>  [99,]  1.85118786 -1.36141233 -0.954597381  0.024581253 -0.0179904100 #> [100,] -2.25652294 -1.81576197 -0.443331770 -0.049885435 -0.0423380179 #>                 [,6]          [,7] #>   [1,]  0.0095832565  0.0002922800 #>   [2,] -0.0266406630 -0.0024799030 #>   [3,]  0.0329666909  0.0289243373 #>   [4,] -0.0147078566  0.0174967367 #>   [5,] -0.0069697323 -0.0458306788 #>   [6,]  0.0314624313  0.0104631993 #>   [7,]  0.0081860261  0.0451189126 #>   [8,] -0.0194040084  0.0094473721 #>   [9,] -0.0428688820  0.0370479102 #>  [10,]  0.0026849007  0.0486879260 #>  [11,]  0.0022872865 -0.0136065118 #>  [12,]  0.0013940846  0.0224043879 #>  [13,]  0.0313281161  0.0310346203 #>  [14,] -0.0210632421  0.0252130944 #>  [15,] -0.0144269704 -0.0139956920 #>  [16,] -0.0093651362 -0.0069703208 #>  [17,] -0.0108168368  0.0094861534 #>  [18,]  0.0172680418  0.0339568058 #>  [19,]  0.0344833083 -0.0358987421 #>  [20,] -0.0454159579 -0.0327478505 #>  [21,] -0.0093561981 -0.0189579947 #>  [22,]  0.0396547277  0.0264252754 #>  [23,] -0.0451344814  0.0472637191 #>  [24,]  0.0487099020  0.0323779521 #>  [25,] -0.0240822078  0.0110516789 #>  [26,] -0.0376884447  0.0137200678 #>  [27,]  0.0200525602 -0.0224207042 #>  [28,]  0.0272840366 -0.0141355241 #>  [29,]  0.0025653793 -0.0083042403 #>  [30,]  0.0008814695  0.0469945305 #>  [31,] -0.0285198053  0.0024664085 #>  [32,] -0.0056778962  0.0166698525 #>  [33,] -0.0049028260 -0.0411085621 #>  [34,]  0.0187988844 -0.0271453298 #>  [35,] -0.0379018271 -0.0140130572 #>  [36,]  0.0417903086 -0.0256205071 #>  [37,] -0.0424125727 -0.0236385710 #>  [38,] -0.0438426733 -0.0094260246 #>  [39,] -0.0313470324  0.0174269036 #>  [40,]  0.0031317025 -0.0452166670 #>  [41,] -0.0291986905 -0.0085330202 #>  [42,]  0.0126839608  0.0425648325 #>  [43,]  0.0089078305 -0.0314434839 #>  [44,]  0.0014842902 -0.0383992604 #>  [45,] -0.0296623494  0.0015955400 #>  [46,]  0.0209008188 -0.0485900112 #>  [47,]  0.0223604991  0.0099147135 #>  [48,] -0.0494228308 -0.0493410359 #>  [49,]  0.0320848967 -0.0044842294 #>  [50,]  0.0482571659  0.0139203837 #>  [51,] -0.0448505170 -0.0090072411 #>  [52,]  0.0219973698  0.0106927139 #>  [53,]  0.0109987007  0.0305214964 #>  [54,]  0.0159363716 -0.0419314152 #>  [55,] -0.0441858407  0.0446353598 #>  [56,] -0.0258936247  0.0176150748 #>  [57,] -0.0262809399  0.0108909499 #>  [58,]  0.0277324335 -0.0488770320 #>  [59,]  0.0251754210 -0.0066879806 #>  [60,]  0.0188167986  0.0008472490 #>  [61,]  0.0420880673  0.0113221152 #>  [62,]  0.0073119656  0.0014994823 #>  [63,]  0.0212186538 -0.0347111745 #>  [64,]  0.0315057692  0.0368487634 #>  [65,]  0.0374848023  0.0196946633 #>  [66,] -0.0315754419 -0.0116633489 #>  [67,] -0.0338012822 -0.0031975573 #>  [68,] -0.0026918047 -0.0103791422 #>  [69,]  0.0048027311 -0.0264657836 #>  [70,] -0.0295907385 -0.0029352558 #>  [71,]  0.0234476721  0.0497341457 #>  [72,] -0.0259494630 -0.0469626904 #>  [73,] -0.0296446106  0.0038461851 #>  [74,]  0.0069129028 -0.0425382219 #>  [75,]  0.0092031661 -0.0064976265 #>  [76,]  0.0266492500  0.0474321380 #>  [77,]  0.0224620257  0.0323446197 #>  [78,]  0.0424475306 -0.0385212377 #>  [79,]  0.0054160010 -0.0173011404 #>  [80,] -0.0426761724  0.0358089990 #>  [81,] -0.0109921372  0.0463989817 #>  [82,]  0.0081394651  0.0463904848 #>  [83,]  0.0381643004  0.0021304497 #>  [84,]  0.0229201293 -0.0387863542 #>  [85,]  0.0070497429  0.0001248337 #>  [86,]  0.0414602482  0.0132561871 #>  [87,]  0.0467431856 -0.0038118397 #>  [88,] -0.0340264374  0.0458660896 #>  [89,] -0.0425061390  0.0054312696 #>  [90,]  0.0346774267 -0.0471662242 #>  [91,] -0.0184196660  0.0073096257 #>  [92,] -0.0215751942 -0.0324232042 #>  [93,]  0.0398827155  0.0474069657 #>  [94,] -0.0280261239 -0.0341347246 #>  [95,] -0.0041962688  0.0013918406 #>  [96,] -0.0000148938  0.0140629166 #>  [97,]  0.0475174043  0.0056495602 #>  [98,] -0.0198791114 -0.0390863102 #>  [99,] -0.0266712060  0.0355017966 #> [100,] -0.0211487415  0.0123463956"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/traingular_3d_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","title":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","text":"function generates triangular 3D datasets added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/traingular_3d_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","text":"","code":"traingular_3d_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/traingular_3d_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/traingular_3d_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","text":"matrix containing triangular 3D datasets added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/traingular_3d_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Triangular 3D Datasets with Noise — traingular_3d_with_noise","text":"","code":"triangular_3d_data <- traingular_3d_with_noise(sample_size = 150, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/tree_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Tree-like Data with Noise — tree_with_noise","title":"Generate Tree-like Data with Noise — tree_with_noise","text":"function generates dataset representing tree-like structure, added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/tree_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Tree-like Data with Noise — tree_with_noise","text":"","code":"tree_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/tree_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Tree-like Data with Noise — tree_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/tree_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Tree-like Data with Noise — tree_with_noise","text":"matrix containing tree-like data added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/tree_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Tree-like Data with Noise — tree_with_noise","text":"","code":"tree_data <- tree_with_noise(sample_size = 300, num_noise_dims = 8,                              min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/triangular_plane_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","title":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","text":"function generates triangular plane dataset background noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/triangular_plane_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","text":"","code":"triangular_plane_with_bkg_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/triangular_plane_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/triangular_plane_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","text":"matrix containing triangular plane dataset background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/triangular_plane_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Triangular Plane with Background Noise — triangular_plane_with_bkg_noise","text":"","code":"triangular_plane_data <- triangular_plane_with_bkg_noise(sample_size = 675, num_noise_dims = 3, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_data_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","title":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","text":"function generates dataset representing two curvilinear clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_data_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","text":"","code":"two_curvilinear_data_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_data_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_data_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","text":"matrix containing two curvilinear data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_data_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Curvilinear Data with Noise — two_curvilinear_data_with_noise","text":"","code":"two_curvilinear_data_with_noise <- two_curvilinear_data_with_noise(sample_size = 250, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_diff_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","title":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","text":"function generates data two curvilinear clusters differentiated , along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_diff_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","text":"","code":"two_curvilinear_diff_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_diff_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_diff_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_diff_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Curvilinear Differentiated Clusters with Noise — two_curvilinear_diff_with_noise","text":"","code":"# Generate two curvilinear differentiated clusters with noise with custom parameters data <- two_curvilinear_diff_with_noise(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","title":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","text":"function generates data two curvilinear clusters along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","text":"","code":"two_curvilinear_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvilinear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Curvilinear Clusters with Noise — two_curvilinear_with_noise","text":"","code":"# Generate two curvilinear clusters with noise with custom parameters data <- two_curvilinear_with_noise(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvy_panckakes_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","title":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","text":"function generates dataset representing two curvy pancake-shaped clusters added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvy_panckakes_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","text":"","code":"two_curvy_panckakes_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvy_panckakes_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","text":"sample_size total number samples generate. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvy_panckakes_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","text":"matrix containing two curvy pancakes data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_curvy_panckakes_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Curvy Pancakes with Noise — two_curvy_panckakes_with_noise","text":"","code":"two_curvy_panckakes_with_noise <- two_curvy_panckakes_with_noise(sample_size = 300, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_parallel_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","title":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","text":"function generates data two sets doublets (pairs clusters) running parallel, along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_parallel_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","text":"","code":"two_doublets_parallel_with_noise(   sample_size,   num_noise_dims,   min_noise,   max_noise )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_parallel_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_parallel_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_parallel_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Doublets in Parallel with Noise — two_doublets_parallel_with_noise","text":"","code":"# Generate doublets in parallel with noise with custom parameters data <- two_doublets_parallel_with_noise(sample_size = 440, num_noise_dims = 2, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","title":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","text":"function generates data two doublets along added background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","text":"","code":"two_doublets_with_bkg_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_doublets_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Doublets with Background Noise — two_doublets_with_bkg_noise","text":"","code":"# Generate two doublets with background noise with custom parameters data <- two_doublets_with_bkg_noise(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_grid_with_bkg_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","title":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","text":"function generates two grid datasets background noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_grid_with_bkg_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","text":"","code":"two_grid_with_bkg_noise(n_value, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_grid_with_bkg_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","text":"n_value number grid points along axis grids. num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_grid_with_bkg_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","text":"list containing two grid datasets background noise sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_grid_with_bkg_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Grids with Background Noise — two_grid_with_bkg_noise","text":"","code":"two_grid_with_bkg_noise <- two_grid_with_bkg_noise(n_value = 10, num_noise_dims = 4,                                                   min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_linear_diff_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","title":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","text":"function generates data two linear clusters differentiated , along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_linear_diff_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","text":"","code":"two_linear_diff_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_linear_diff_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_linear_diff_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_linear_diff_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Linear Differentiated Clusters with Noise — two_linear_diff_with_noise","text":"","code":"# Generate two linear differentiated clusters with noise with custom parameters data <- two_linear_diff_with_noise(sample_size = 300, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_nonlinear_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","title":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","text":"function generates data two nonlinear clusters along added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_nonlinear_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","text":"","code":"two_nonlinear_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_nonlinear_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_nonlinear_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","text":"matrix containing generated data, row representing data point.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_nonlinear_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two Nonlinear Clusters with Noise — two_nonlinear_with_noise","text":"","code":"# Generate two nonlinear clusters with noise with custom parameters data <- two_nonlinear_with_noise(sample_size = 200, num_noise_dims = 4, min_noise = -0.05, max_noise = 0.050)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curve_hole_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","title":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","text":"function generates two S-curve data noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curve_hole_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","text":"","code":"two_s_curve_hole_with_noise(   sample_size = 200,   num_noise_dims = 8,   min_noise = -0.05,   max_noise = 0.05 )"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curve_hole_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","text":"sample_size total number data points generated. num_noise_dims number additional noise dimensions generated. min_noise minimum value noise added data points. max_noise maximum value noise added data points.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curve_hole_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","text":"list containing generated data matrix (`df`) total sample size.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curve_hole_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two S-Curve Data with Noise — two_s_curve_hole_with_noise","text":"","code":"# Generate two S-curve data with noise with custom parameters data <- two_s_curve_hole_with_noise(sample_size = 200, num_noise_dims = 8, min_noise = -0.05, max_noise = 0.05)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curves_with_noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","title":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","text":"function generates two S-curve datasets added noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curves_with_noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","text":"","code":"two_s_curves_with_noise(sample_size, num_noise_dims, min_noise, max_noise)"},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curves_with_noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","text":"sample_size total number samples generate (divisible 2). num_noise_dims number additional noise dimensions add data. min_noise minimum value noise dimensions. max_noise maximum value noise dimensions.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curves_with_noise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","text":"matrix containing combined S-curve datasets added noise.","code":""},{"path":"https://jayanilakshika.github.io/cardinalR/reference/two_s_curves_with_noise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Two S-curve Datasets with Noise — two_s_curves_with_noise","text":"","code":"two_s_curve_data <- two_s_curves_with_noise(sample_size = 200, num_noise_dims = 8, min_noise = -0.5, max_noise = 0.5)"}]
